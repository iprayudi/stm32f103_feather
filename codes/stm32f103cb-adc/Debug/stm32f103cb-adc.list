
stm32f103cb-adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001301c  08005dd0  08005dd0  00015dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018dec  08018dec  00030074  2**0
                  CONTENTS
  4 .ARM          00000000  08018dec  08018dec  00030074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08018dec  08018dec  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018dec  08018dec  00028dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018df0  08018df0  00028df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08018df4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000150c  20000074  08018e68  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001580  08018e68  00031580  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146c9  00000000  00000000  0003009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c3c  00000000  00000000  00044766  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a90  00000000  00000000  000473a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a08  00000000  00000000  00047e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001452e  00000000  00000000  00048840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c89a  00000000  00000000  0005cd6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00070930  00000000  00000000  00069608  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  000d9f38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bf4  00000000  00000000  000da028  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00004186  00000000  00000000  000dcc1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08005db8 	.word	0x08005db8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08005db8 	.word	0x08005db8

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a44:	f1a2 0201 	sub.w	r2, r2, #1
 8000a48:	d1ed      	bne.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__gesf2>:
 8000e44:	f04f 3cff 	mov.w	ip, #4294967295
 8000e48:	e006      	b.n	8000e58 <__cmpsf2+0x4>
 8000e4a:	bf00      	nop

08000e4c <__lesf2>:
 8000e4c:	f04f 0c01 	mov.w	ip, #1
 8000e50:	e002      	b.n	8000e58 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__cmpsf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d011      	beq.n	8000e94 <__cmpsf2+0x40>
 8000e70:	b001      	add	sp, #4
 8000e72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e76:	bf18      	it	ne
 8000e78:	ea90 0f01 	teqne	r0, r1
 8000e7c:	bf58      	it	pl
 8000e7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e82:	bf88      	it	hi
 8000e84:	17c8      	asrhi	r0, r1, #31
 8000e86:	bf38      	it	cc
 8000e88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e8c:	bf18      	it	ne
 8000e8e:	f040 0001 	orrne.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	d102      	bne.n	8000ea0 <__cmpsf2+0x4c>
 8000e9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e9e:	d105      	bne.n	8000eac <__cmpsf2+0x58>
 8000ea0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea4:	d1e4      	bne.n	8000e70 <__cmpsf2+0x1c>
 8000ea6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eaa:	d0e1      	beq.n	8000e70 <__cmpsf2+0x1c>
 8000eac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_cfrcmple>:
 8000eb4:	4684      	mov	ip, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7ff      	b.n	8000ebc <__aeabi_cfcmpeq>

08000ebc <__aeabi_cfcmpeq>:
 8000ebc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ebe:	f7ff ffc9 	bl	8000e54 <__cmpsf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ecc <__aeabi_fcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cfcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffd2 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc8 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpun>:
 8000f30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f3c:	d102      	bne.n	8000f44 <__aeabi_fcmpun+0x14>
 8000f3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f42:	d108      	bne.n	8000f56 <__aeabi_fcmpun+0x26>
 8000f44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f48:	d102      	bne.n	8000f50 <__aeabi_fcmpun+0x20>
 8000f4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f4e:	d102      	bne.n	8000f56 <__aeabi_fcmpun+0x26>
 8000f50:	f04f 0000 	mov.w	r0, #0
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0001 	mov.w	r0, #1
 8000f5a:	4770      	bx	lr

08000f5c <__aeabi_f2uiz>:
 8000f5c:	0042      	lsls	r2, r0, #1
 8000f5e:	d20e      	bcs.n	8000f7e <__aeabi_f2uiz+0x22>
 8000f60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f64:	d30b      	bcc.n	8000f7e <__aeabi_f2uiz+0x22>
 8000f66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6e:	d409      	bmi.n	8000f84 <__aeabi_f2uiz+0x28>
 8000f70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f78:	fa23 f002 	lsr.w	r0, r3, r2
 8000f7c:	4770      	bx	lr
 8000f7e:	f04f 0000 	mov.w	r0, #0
 8000f82:	4770      	bx	lr
 8000f84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f88:	d101      	bne.n	8000f8e <__aeabi_f2uiz+0x32>
 8000f8a:	0242      	lsls	r2, r0, #9
 8000f8c:	d102      	bne.n	8000f94 <__aeabi_f2uiz+0x38>
 8000f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f92:	4770      	bx	lr
 8000f94:	f04f 0000 	mov.w	r0, #0
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <plotData>:
//	  arm_max_f32(&pOut_mag[1],(FFT_SIZE/2)-1,&pMax,&pIndex);
//	  pFreq = FFT_BIN * (pIndex+1);
//	  pOut_mag[0]=0;
}
void plotData(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af02      	add	r7, sp, #8
	uint32_t mag;
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 fc4a 	bl	800183c <SSD1306_Fill>
//	for (int i =0;i<128;i++)
//	{
//		mag=(uint32_t)pOut_mag[i] >> 11  ;
//		SSD1306_DrawLine(i,((64-mag)<0?0:(64-mag)),i,64,SSD1306_COLOR_WHITE);
//	}
	for (int i =0;i<128;i++)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	e01a      	b.n	8000fe4 <plotData+0x48>
	{
//		mag=(uint32_t)adcRawData[i] >> 6  ;
		mag=(uint32_t)pDst[i] >> 1  ;
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <plotData+0x5c>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ffd0 	bl	8000f5c <__aeabi_f2uiz>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	085b      	lsrs	r3, r3, #1
 8000fc0:	603b      	str	r3, [r7, #0]
		SSD1306_DrawLine(i,((64-mag)<0?0:(64-mag)),i,64,SSD1306_COLOR_WHITE);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	b298      	uxth	r0, r3
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000fce:	b299      	uxth	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2340      	movs	r3, #64	; 0x40
 8000fda:	f000 fca5 	bl	8001928 <SSD1306_DrawLine>
	for (int i =0;i<128;i++)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b7f      	cmp	r3, #127	; 0x7f
 8000fe8:	dde1      	ble.n	8000fae <plotData+0x12>
	}
    SSD1306_UpdateScreen();
 8000fea:	f000 fbf9 	bl	80017e0 <SSD1306_UpdateScreen>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000498 	.word	0x20000498

08000ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001002:	f000 fe09 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001006:	f000 f879 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100a:	f000 f957 	bl	80012bc <MX_GPIO_Init>
  MX_DMA_Init();
 800100e:	f000 f937 	bl	8001280 <MX_DMA_Init>
  MX_ADC1_Init();
 8001012:	f000 f8c9 	bl	80011a8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001016:	f000 f905 	bl	8001224 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init(); // initialize the SSD1306 display
 800101a:	f000 fb1d 	bl	8001658 <SSD1306_Init>

  while ( arm_rfft_fast_init_f32(&S,FFT_SIZE) != ARM_MATH_SUCCESS );
 800101e:	bf00      	nop
 8001020:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001024:	482c      	ldr	r0, [pc, #176]	; (80010d8 <main+0xdc>)
 8001026:	f003 f97d 	bl	8004324 <arm_rfft_fast_init_f32>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1f7      	bne.n	8001020 <main+0x24>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawData, ADC_SIZE);
 8001030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001034:	4929      	ldr	r1, [pc, #164]	; (80010dc <main+0xe0>)
 8001036:	482a      	ldr	r0, [pc, #168]	; (80010e0 <main+0xe4>)
 8001038:	f000 ff4a 	bl	8001ed0 <HAL_ADC_Start_DMA>
  adcReadyFlag=0;
 800103c:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <main+0xe8>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
//  {
//	  pSrc[i]=signal1[i];
//  }


  int k=0;
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500);
 8001046:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800104a:	f000 fe47 	bl	8001cdc <HAL_Delay>
	  if (adcReadyFlag==1)
 800104e:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <main+0xe8>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d1f7      	bne.n	8001046 <main+0x4a>
	  {

		  for (int i=0; i<FFT_SIZE;i++)
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	e01c      	b.n	8001096 <main+0x9a>
		  {
			  pSrc[i]=(float32_t) adcRawData[i];
 800105c:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <main+0xe0>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fd45 	bl	8000af4 <__aeabi_ui2f>
 800106a:	4601      	mov	r1, r0
 800106c:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <main+0xec>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  pSrc[i]=pSrc[i]*0.000805f;
 8001074:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <main+0xec>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107c:	491b      	ldr	r1, [pc, #108]	; (80010ec <main+0xf0>)
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fd90 	bl	8000ba4 <__aeabi_fmul>
 8001084:	4603      	mov	r3, r0
 8001086:	4619      	mov	r1, r3
 8001088:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <main+0xec>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (int i=0; i<FFT_SIZE;i++)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3301      	adds	r3, #1
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2bff      	cmp	r3, #255	; 0xff
 800109a:	dddf      	ble.n	800105c <main+0x60>
//			  			  pSrc[i]=(float32_t) signal1[i];
//			  			  pSrc[i]=pSrc[i]*0.000805f;
//			  		  }
//			  k=0;
//		  }
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800109c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a0:	4813      	ldr	r0, [pc, #76]	; (80010f0 <main+0xf4>)
 80010a2:	f001 fe5d 	bl	8002d60 <HAL_GPIO_TogglePin>

//		  memcpy(pSrc,adcRawData,FFT_SIZE);
//		  memcpy(pSrc,signal1,FFT_SIZE);
//		  doFFT(pSrc);

		  arm_rfft_fast_f32(&S,pSrc, pBuff,0);
 80010a6:	2300      	movs	r3, #0
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <main+0xf8>)
 80010aa:	490f      	ldr	r1, [pc, #60]	; (80010e8 <main+0xec>)
 80010ac:	480a      	ldr	r0, [pc, #40]	; (80010d8 <main+0xdc>)
 80010ae:	f003 fa87 	bl	80045c0 <arm_rfft_fast_f32>
		  arm_cmplx_mag_f32(pBuff,pDst,FFT_SIZE);
 80010b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b6:	4910      	ldr	r1, [pc, #64]	; (80010f8 <main+0xfc>)
 80010b8:	480e      	ldr	r0, [pc, #56]	; (80010f4 <main+0xf8>)
 80010ba:	f004 f82f 	bl	800511c <arm_cmplx_mag_f32>

		  plotData();
 80010be:	f7ff ff6d 	bl	8000f9c <plotData>
		  adcReadyFlag=0;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <main+0xe8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRawData, ADC_SIZE);
 80010c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010cc:	4903      	ldr	r1, [pc, #12]	; (80010dc <main+0xe0>)
 80010ce:	4804      	ldr	r0, [pc, #16]	; (80010e0 <main+0xe4>)
 80010d0:	f000 fefe 	bl	8001ed0 <HAL_ADC_Start_DMA>
	  HAL_Delay(500);
 80010d4:	e7b7      	b.n	8001046 <main+0x4a>
 80010d6:	bf00      	nop
 80010d8:	200014ec 	.word	0x200014ec
 80010dc:	20000698 	.word	0x20000698
 80010e0:	20001504 	.word	0x20001504
 80010e4:	20001578 	.word	0x20001578
 80010e8:	200010ec 	.word	0x200010ec
 80010ec:	3a5306a3 	.word	0x3a5306a3
 80010f0:	40011000 	.word	0x40011000
 80010f4:	200008ec 	.word	0x200008ec
 80010f8:	20000498 	.word	0x20000498

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	; 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001106:	2228      	movs	r2, #40	; 0x28
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f004 fdac 	bl	8005c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800112c:	2302      	movs	r3, #2
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001130:	2301      	movs	r3, #1
 8001132:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001134:	2310      	movs	r3, #16
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001138:	2302      	movs	r3, #2
 800113a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800113c:	2300      	movs	r3, #0
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001140:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001144:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fb64 	bl	8003818 <HAL_RCC_OscConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001156:	f000 f913 	bl	8001380 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115a:	230f      	movs	r3, #15
 800115c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	2101      	movs	r1, #1
 8001174:	4618      	mov	r0, r3
 8001176:	f002 fdcf 	bl	8003d18 <HAL_RCC_ClockConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001180:	f000 f8fe 	bl	8001380 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001184:	2302      	movs	r3, #2
 8001186:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001188:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800118c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4618      	mov	r0, r3
 8001192:	f002 ff49 	bl	8004028 <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800119c:	f000 f8f0 	bl	8001380 <Error_Handler>
  }
}
 80011a0:	bf00      	nop
 80011a2:	3750      	adds	r7, #80	; 0x50
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_ADC1_Init+0x74>)
 80011ba:	4a19      	ldr	r2, [pc, #100]	; (8001220 <MX_ADC1_Init+0x78>)
 80011bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <MX_ADC1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <MX_ADC1_Init+0x74>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ca:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_ADC1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_ADC1_Init+0x74>)
 80011d2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <MX_ADC1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_ADC1_Init+0x74>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <MX_ADC1_Init+0x74>)
 80011e6:	f000 fd9b 	bl	8001d20 <HAL_ADC_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011f0:	f000 f8c6 	bl	8001380 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_ADC1_Init+0x74>)
 8001206:	f000 ff53 	bl	80020b0 <HAL_ADC_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001210:	f000 f8b6 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20001504 	.word	0x20001504
 8001220:	40012400 	.word	0x40012400

08001224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2C1_Init+0x50>)
 800122a:	4a13      	ldr	r2, [pc, #76]	; (8001278 <MX_I2C1_Init+0x54>)
 800122c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_I2C1_Init+0x50>)
 8001230:	4a12      	ldr	r2, [pc, #72]	; (800127c <MX_I2C1_Init+0x58>)
 8001232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_I2C1_Init+0x50>)
 8001242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001246:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <MX_I2C1_Init+0x50>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_I2C1_Init+0x50>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_I2C1_Init+0x50>)
 8001262:	f001 fd95 	bl	8002d90 <HAL_I2C_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800126c:	f000 f888 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000898 	.word	0x20000898
 8001278:	40005400 	.word	0x40005400
 800127c:	000186a0 	.word	0x000186a0

08001280 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_DMA_Init+0x38>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <MX_DMA_Init+0x38>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6153      	str	r3, [r2, #20]
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_DMA_Init+0x38>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	200b      	movs	r0, #11
 80012a4:	f001 f9c5 	bl	8002632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012a8:	200b      	movs	r0, #11
 80012aa:	f001 f9de 	bl	800266a <HAL_NVIC_EnableIRQ>

}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000

080012bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d0:	4b1e      	ldr	r3, [pc, #120]	; (800134c <MX_GPIO_Init+0x90>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <MX_GPIO_Init+0x90>)
 80012d6:	f043 0310 	orr.w	r3, r3, #16
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <MX_GPIO_Init+0x90>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <MX_GPIO_Init+0x90>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a17      	ldr	r2, [pc, #92]	; (800134c <MX_GPIO_Init+0x90>)
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <MX_GPIO_Init+0x90>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_GPIO_Init+0x90>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a11      	ldr	r2, [pc, #68]	; (800134c <MX_GPIO_Init+0x90>)
 8001306:	f043 0308 	orr.w	r3, r3, #8
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_GPIO_Init+0x90>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0308 	and.w	r3, r3, #8
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800131e:	480c      	ldr	r0, [pc, #48]	; (8001350 <MX_GPIO_Init+0x94>)
 8001320:	f001 fd06 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2302      	movs	r3, #2
 8001334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4619      	mov	r1, r3
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_GPIO_Init+0x94>)
 800133e:	f001 fb9d 	bl	8002a7c <HAL_GPIO_Init>

}
 8001342:	bf00      	nop
 8001344:	3720      	adds	r7, #32
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000
 8001350:	40011000 	.word	0x40011000

08001354 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800135c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <HAL_ADC_ConvCpltCallback+0x24>)
 8001362:	f001 fcfd 	bl	8002d60 <HAL_GPIO_TogglePin>
	__NOP();
 8001366:	bf00      	nop
	adcReadyFlag=1;
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <HAL_ADC_ConvCpltCallback+0x28>)
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
//  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40011000 	.word	0x40011000
 800137c:	20001578 	.word	0x20001578

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_MspInit+0x5c>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	4a14      	ldr	r2, [pc, #80]	; (80013e8 <HAL_MspInit+0x5c>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6193      	str	r3, [r2, #24]
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_MspInit+0x5c>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_MspInit+0x5c>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_MspInit+0x5c>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b4:	61d3      	str	r3, [r2, #28]
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_MspInit+0x5c>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_MspInit+0x60>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_MspInit+0x60>)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010000 	.word	0x40010000

080013f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a28      	ldr	r2, [pc, #160]	; (80014ac <HAL_ADC_MspInit+0xbc>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d149      	bne.n	80014a4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001410:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <HAL_ADC_MspInit+0xc0>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a26      	ldr	r2, [pc, #152]	; (80014b0 <HAL_ADC_MspInit+0xc0>)
 8001416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <HAL_ADC_MspInit+0xc0>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001428:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <HAL_ADC_MspInit+0xc0>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a20      	ldr	r2, [pc, #128]	; (80014b0 <HAL_ADC_MspInit+0xc0>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <HAL_ADC_MspInit+0xc0>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001440:	2302      	movs	r3, #2
 8001442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001444:	2303      	movs	r3, #3
 8001446:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	4619      	mov	r1, r3
 800144e:	4819      	ldr	r0, [pc, #100]	; (80014b4 <HAL_ADC_MspInit+0xc4>)
 8001450:	f001 fb14 	bl	8002a7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 8001456:	4a19      	ldr	r2, [pc, #100]	; (80014bc <HAL_ADC_MspInit+0xcc>)
 8001458:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 800146e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001472:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001474:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 8001476:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 800147e:	2220      	movs	r2, #32
 8001480:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 8001484:	2200      	movs	r2, #0
 8001486:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001488:	480b      	ldr	r0, [pc, #44]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 800148a:	f001 f909 	bl	80026a0 <HAL_DMA_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001494:	f7ff ff74 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 800149c:	621a      	str	r2, [r3, #32]
 800149e:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <HAL_ADC_MspInit+0xc8>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014a4:	bf00      	nop
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40012400 	.word	0x40012400
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010800 	.word	0x40010800
 80014b8:	20001534 	.word	0x20001534
 80014bc:	40020008 	.word	0x40020008

080014c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a15      	ldr	r2, [pc, #84]	; (8001530 <HAL_I2C_MspInit+0x70>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d123      	bne.n	8001528 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_I2C_MspInit+0x74>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a13      	ldr	r2, [pc, #76]	; (8001534 <HAL_I2C_MspInit+0x74>)
 80014e6:	f043 0308 	orr.w	r3, r3, #8
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_I2C_MspInit+0x74>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014f8:	23c0      	movs	r3, #192	; 0xc0
 80014fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fc:	2312      	movs	r3, #18
 80014fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	4619      	mov	r1, r3
 800150a:	480b      	ldr	r0, [pc, #44]	; (8001538 <HAL_I2C_MspInit+0x78>)
 800150c:	f001 fab6 	bl	8002a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_I2C_MspInit+0x74>)
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_I2C_MspInit+0x74>)
 8001516:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800151a:	61d3      	str	r3, [r2, #28]
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_I2C_MspInit+0x74>)
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40005400 	.word	0x40005400
 8001534:	40021000 	.word	0x40021000
 8001538:	40010c00 	.word	0x40010c00

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <HardFault_Handler+0x4>

0800154e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <MemManage_Handler+0x4>

08001554 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <BusFault_Handler+0x4>

0800155a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <UsageFault_Handler+0x4>

08001560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f000 fb8c 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <DMA1_Channel1_IRQHandler+0x10>)
 8001596:	f001 f93d 	bl	8002814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20001534 	.word	0x20001534

080015a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <SystemInit+0x5c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <SystemInit+0x5c>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <SystemInit+0x5c>)
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	4911      	ldr	r1, [pc, #68]	; (8001600 <SystemInit+0x5c>)
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <SystemInit+0x60>)
 80015bc:	4013      	ands	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <SystemInit+0x5c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <SystemInit+0x5c>)
 80015c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80015ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <SystemInit+0x5c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <SystemInit+0x5c>)
 80015d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <SystemInit+0x5c>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <SystemInit+0x5c>)
 80015e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80015e6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <SystemInit+0x5c>)
 80015ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80015ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <SystemInit+0x64>)
 80015f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f6:	609a      	str	r2, [r3, #8]
#endif 
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	40021000 	.word	0x40021000
 8001604:	f8ff0000 	.word	0xf8ff0000
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800160c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800160e:	e003      	b.n	8001618 <LoopCopyDataInit>

08001610 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001612:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001614:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001616:	3104      	adds	r1, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001618:	480a      	ldr	r0, [pc, #40]	; (8001644 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800161c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800161e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001620:	d3f6      	bcc.n	8001610 <CopyDataInit>
  ldr r2, =_sbss
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001624:	e002      	b.n	800162c <LoopFillZerobss>

08001626 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001628:	f842 3b04 	str.w	r3, [r2], #4

0800162c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800162e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001630:	d3f9      	bcc.n	8001626 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001632:	f7ff ffb7 	bl	80015a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001636:	f004 faf3 	bl	8005c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800163a:	f7ff fcdf 	bl	8000ffc <main>
  bx lr
 800163e:	4770      	bx	lr
  ldr r3, =_sidata
 8001640:	08018df4 	.word	0x08018df4
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001648:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 800164c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001650:	20001580 	.word	0x20001580

08001654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC1_2_IRQHandler>
	...

08001658 <SSD1306_Init>:
//}




uint8_t SSD1306_Init(void) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800165e:	f000 fa5f 	bl	8001b20 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001662:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001666:	2201      	movs	r2, #1
 8001668:	2178      	movs	r1, #120	; 0x78
 800166a:	485b      	ldr	r0, [pc, #364]	; (80017d8 <SSD1306_Init+0x180>)
 800166c:	f001 fdb6 	bl	80031dc <HAL_I2C_IsDeviceReady>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001676:	2300      	movs	r3, #0
 8001678:	e0a9      	b.n	80017ce <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800167a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800167e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001680:	e002      	b.n	8001688 <SSD1306_Init+0x30>
		p--;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3b01      	subs	r3, #1
 8001686:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f9      	bne.n	8001682 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800168e:	22ae      	movs	r2, #174	; 0xae
 8001690:	2100      	movs	r1, #0
 8001692:	2078      	movs	r0, #120	; 0x78
 8001694:	f000 faa2 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001698:	2220      	movs	r2, #32
 800169a:	2100      	movs	r1, #0
 800169c:	2078      	movs	r0, #120	; 0x78
 800169e:	f000 fa9d 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80016a2:	2210      	movs	r2, #16
 80016a4:	2100      	movs	r1, #0
 80016a6:	2078      	movs	r0, #120	; 0x78
 80016a8:	f000 fa98 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80016ac:	22b0      	movs	r2, #176	; 0xb0
 80016ae:	2100      	movs	r1, #0
 80016b0:	2078      	movs	r0, #120	; 0x78
 80016b2:	f000 fa93 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80016b6:	22c8      	movs	r2, #200	; 0xc8
 80016b8:	2100      	movs	r1, #0
 80016ba:	2078      	movs	r0, #120	; 0x78
 80016bc:	f000 fa8e 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	2078      	movs	r0, #120	; 0x78
 80016c6:	f000 fa89 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80016ca:	2210      	movs	r2, #16
 80016cc:	2100      	movs	r1, #0
 80016ce:	2078      	movs	r0, #120	; 0x78
 80016d0:	f000 fa84 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80016d4:	2240      	movs	r2, #64	; 0x40
 80016d6:	2100      	movs	r1, #0
 80016d8:	2078      	movs	r0, #120	; 0x78
 80016da:	f000 fa7f 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80016de:	2281      	movs	r2, #129	; 0x81
 80016e0:	2100      	movs	r1, #0
 80016e2:	2078      	movs	r0, #120	; 0x78
 80016e4:	f000 fa7a 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80016e8:	22ff      	movs	r2, #255	; 0xff
 80016ea:	2100      	movs	r1, #0
 80016ec:	2078      	movs	r0, #120	; 0x78
 80016ee:	f000 fa75 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80016f2:	22a1      	movs	r2, #161	; 0xa1
 80016f4:	2100      	movs	r1, #0
 80016f6:	2078      	movs	r0, #120	; 0x78
 80016f8:	f000 fa70 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80016fc:	22a6      	movs	r2, #166	; 0xa6
 80016fe:	2100      	movs	r1, #0
 8001700:	2078      	movs	r0, #120	; 0x78
 8001702:	f000 fa6b 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001706:	22a8      	movs	r2, #168	; 0xa8
 8001708:	2100      	movs	r1, #0
 800170a:	2078      	movs	r0, #120	; 0x78
 800170c:	f000 fa66 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001710:	223f      	movs	r2, #63	; 0x3f
 8001712:	2100      	movs	r1, #0
 8001714:	2078      	movs	r0, #120	; 0x78
 8001716:	f000 fa61 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800171a:	22a4      	movs	r2, #164	; 0xa4
 800171c:	2100      	movs	r1, #0
 800171e:	2078      	movs	r0, #120	; 0x78
 8001720:	f000 fa5c 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001724:	22d3      	movs	r2, #211	; 0xd3
 8001726:	2100      	movs	r1, #0
 8001728:	2078      	movs	r0, #120	; 0x78
 800172a:	f000 fa57 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	2078      	movs	r0, #120	; 0x78
 8001734:	f000 fa52 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001738:	22d5      	movs	r2, #213	; 0xd5
 800173a:	2100      	movs	r1, #0
 800173c:	2078      	movs	r0, #120	; 0x78
 800173e:	f000 fa4d 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001742:	22f0      	movs	r2, #240	; 0xf0
 8001744:	2100      	movs	r1, #0
 8001746:	2078      	movs	r0, #120	; 0x78
 8001748:	f000 fa48 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800174c:	22d9      	movs	r2, #217	; 0xd9
 800174e:	2100      	movs	r1, #0
 8001750:	2078      	movs	r0, #120	; 0x78
 8001752:	f000 fa43 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001756:	2222      	movs	r2, #34	; 0x22
 8001758:	2100      	movs	r1, #0
 800175a:	2078      	movs	r0, #120	; 0x78
 800175c:	f000 fa3e 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001760:	22da      	movs	r2, #218	; 0xda
 8001762:	2100      	movs	r1, #0
 8001764:	2078      	movs	r0, #120	; 0x78
 8001766:	f000 fa39 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800176a:	2212      	movs	r2, #18
 800176c:	2100      	movs	r1, #0
 800176e:	2078      	movs	r0, #120	; 0x78
 8001770:	f000 fa34 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001774:	22db      	movs	r2, #219	; 0xdb
 8001776:	2100      	movs	r1, #0
 8001778:	2078      	movs	r0, #120	; 0x78
 800177a:	f000 fa2f 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800177e:	2220      	movs	r2, #32
 8001780:	2100      	movs	r1, #0
 8001782:	2078      	movs	r0, #120	; 0x78
 8001784:	f000 fa2a 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001788:	228d      	movs	r2, #141	; 0x8d
 800178a:	2100      	movs	r1, #0
 800178c:	2078      	movs	r0, #120	; 0x78
 800178e:	f000 fa25 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001792:	2214      	movs	r2, #20
 8001794:	2100      	movs	r1, #0
 8001796:	2078      	movs	r0, #120	; 0x78
 8001798:	f000 fa20 	bl	8001bdc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800179c:	22af      	movs	r2, #175	; 0xaf
 800179e:	2100      	movs	r1, #0
 80017a0:	2078      	movs	r0, #120	; 0x78
 80017a2:	f000 fa1b 	bl	8001bdc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80017a6:	222e      	movs	r2, #46	; 0x2e
 80017a8:	2100      	movs	r1, #0
 80017aa:	2078      	movs	r0, #120	; 0x78
 80017ac:	f000 fa16 	bl	8001bdc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80017b0:	2000      	movs	r0, #0
 80017b2:	f000 f843 	bl	800183c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80017b6:	f000 f813 	bl	80017e0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <SSD1306_Init+0x184>)
 80017bc:	2200      	movs	r2, #0
 80017be:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <SSD1306_Init+0x184>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <SSD1306_Init+0x184>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000898 	.word	0x20000898
 80017dc:	20000490 	.word	0x20000490

080017e0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80017e6:	2300      	movs	r3, #0
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	e01d      	b.n	8001828 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	3b50      	subs	r3, #80	; 0x50
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	2100      	movs	r1, #0
 80017f6:	2078      	movs	r0, #120	; 0x78
 80017f8:	f000 f9f0 	bl	8001bdc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	2078      	movs	r0, #120	; 0x78
 8001802:	f000 f9eb 	bl	8001bdc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001806:	2210      	movs	r2, #16
 8001808:	2100      	movs	r1, #0
 800180a:	2078      	movs	r0, #120	; 0x78
 800180c:	f000 f9e6 	bl	8001bdc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	01db      	lsls	r3, r3, #7
 8001814:	4a08      	ldr	r2, [pc, #32]	; (8001838 <SSD1306_UpdateScreen+0x58>)
 8001816:	441a      	add	r2, r3
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	2140      	movs	r1, #64	; 0x40
 800181c:	2078      	movs	r0, #120	; 0x78
 800181e:	f000 f993 	bl	8001b48 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	3301      	adds	r3, #1
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b07      	cmp	r3, #7
 800182c:	d9de      	bls.n	80017ec <SSD1306_UpdateScreen+0xc>
	}
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000090 	.word	0x20000090

0800183c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <SSD1306_Fill+0x14>
 800184c:	2300      	movs	r3, #0
 800184e:	e000      	b.n	8001852 <SSD1306_Fill+0x16>
 8001850:	23ff      	movs	r3, #255	; 0xff
 8001852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001856:	4619      	mov	r1, r3
 8001858:	4803      	ldr	r0, [pc, #12]	; (8001868 <SSD1306_Fill+0x2c>)
 800185a:	f004 fa05 	bl	8005c68 <memset>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000090 	.word	0x20000090

0800186c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	460b      	mov	r3, r1
 8001878:	80bb      	strh	r3, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	70fb      	strb	r3, [r7, #3]
	if (
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	2b7f      	cmp	r3, #127	; 0x7f
 8001882:	d848      	bhi.n	8001916 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001884:	88bb      	ldrh	r3, [r7, #4]
 8001886:	2b3f      	cmp	r3, #63	; 0x3f
 8001888:	d845      	bhi.n	8001916 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <SSD1306_DrawPixel+0xb4>)
 800188c:	791b      	ldrb	r3, [r3, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d006      	beq.n	80018a0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf0c      	ite	eq
 8001898:	2301      	moveq	r3, #1
 800189a:	2300      	movne	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d11a      	bne.n	80018dc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018a6:	88fa      	ldrh	r2, [r7, #6]
 80018a8:	88bb      	ldrh	r3, [r7, #4]
 80018aa:	08db      	lsrs	r3, r3, #3
 80018ac:	b298      	uxth	r0, r3
 80018ae:	4603      	mov	r3, r0
 80018b0:	01db      	lsls	r3, r3, #7
 80018b2:	4413      	add	r3, r2
 80018b4:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <SSD1306_DrawPixel+0xb8>)
 80018b6:	5cd3      	ldrb	r3, [r2, r3]
 80018b8:	b25a      	sxtb	r2, r3
 80018ba:	88bb      	ldrh	r3, [r7, #4]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	2101      	movs	r1, #1
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	b25b      	sxtb	r3, r3
 80018c8:	4313      	orrs	r3, r2
 80018ca:	b259      	sxtb	r1, r3
 80018cc:	88fa      	ldrh	r2, [r7, #6]
 80018ce:	4603      	mov	r3, r0
 80018d0:	01db      	lsls	r3, r3, #7
 80018d2:	4413      	add	r3, r2
 80018d4:	b2c9      	uxtb	r1, r1
 80018d6:	4a13      	ldr	r2, [pc, #76]	; (8001924 <SSD1306_DrawPixel+0xb8>)
 80018d8:	54d1      	strb	r1, [r2, r3]
 80018da:	e01d      	b.n	8001918 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018dc:	88fa      	ldrh	r2, [r7, #6]
 80018de:	88bb      	ldrh	r3, [r7, #4]
 80018e0:	08db      	lsrs	r3, r3, #3
 80018e2:	b298      	uxth	r0, r3
 80018e4:	4603      	mov	r3, r0
 80018e6:	01db      	lsls	r3, r3, #7
 80018e8:	4413      	add	r3, r2
 80018ea:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <SSD1306_DrawPixel+0xb8>)
 80018ec:	5cd3      	ldrb	r3, [r2, r3]
 80018ee:	b25a      	sxtb	r2, r3
 80018f0:	88bb      	ldrh	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	2101      	movs	r1, #1
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	b25b      	sxtb	r3, r3
 8001902:	4013      	ands	r3, r2
 8001904:	b259      	sxtb	r1, r3
 8001906:	88fa      	ldrh	r2, [r7, #6]
 8001908:	4603      	mov	r3, r0
 800190a:	01db      	lsls	r3, r3, #7
 800190c:	4413      	add	r3, r2
 800190e:	b2c9      	uxtb	r1, r1
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <SSD1306_DrawPixel+0xb8>)
 8001912:	54d1      	strb	r1, [r2, r3]
 8001914:	e000      	b.n	8001918 <SSD1306_DrawPixel+0xac>
		return;
 8001916:	bf00      	nop
	}
}
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	20000490 	.word	0x20000490
 8001924:	20000090 	.word	0x20000090

08001928 <SSD1306_DrawLine>:
	/* Everything OK, zero should be returned */
	return *str;
}
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	4604      	mov	r4, r0
 8001930:	4608      	mov	r0, r1
 8001932:	4611      	mov	r1, r2
 8001934:	461a      	mov	r2, r3
 8001936:	4623      	mov	r3, r4
 8001938:	80fb      	strh	r3, [r7, #6]
 800193a:	4603      	mov	r3, r0
 800193c:	80bb      	strh	r3, [r7, #4]
 800193e:	460b      	mov	r3, r1
 8001940:	807b      	strh	r3, [r7, #2]
 8001942:	4613      	mov	r3, r2
 8001944:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	2b7f      	cmp	r3, #127	; 0x7f
 800194a:	d901      	bls.n	8001950 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800194c:	237f      	movs	r3, #127	; 0x7f
 800194e:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	2b7f      	cmp	r3, #127	; 0x7f
 8001954:	d901      	bls.n	800195a <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001956:	237f      	movs	r3, #127	; 0x7f
 8001958:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800195a:	88bb      	ldrh	r3, [r7, #4]
 800195c:	2b3f      	cmp	r3, #63	; 0x3f
 800195e:	d901      	bls.n	8001964 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001960:	233f      	movs	r3, #63	; 0x3f
 8001962:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001964:	883b      	ldrh	r3, [r7, #0]
 8001966:	2b3f      	cmp	r3, #63	; 0x3f
 8001968:	d901      	bls.n	800196e <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800196a:	233f      	movs	r3, #63	; 0x3f
 800196c:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800196e:	88fa      	ldrh	r2, [r7, #6]
 8001970:	887b      	ldrh	r3, [r7, #2]
 8001972:	429a      	cmp	r2, r3
 8001974:	d205      	bcs.n	8001982 <SSD1306_DrawLine+0x5a>
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	b29b      	uxth	r3, r3
 800197e:	b21b      	sxth	r3, r3
 8001980:	e004      	b.n	800198c <SSD1306_DrawLine+0x64>
 8001982:	88fa      	ldrh	r2, [r7, #6]
 8001984:	887b      	ldrh	r3, [r7, #2]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	b29b      	uxth	r3, r3
 800198a:	b21b      	sxth	r3, r3
 800198c:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800198e:	88ba      	ldrh	r2, [r7, #4]
 8001990:	883b      	ldrh	r3, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d205      	bcs.n	80019a2 <SSD1306_DrawLine+0x7a>
 8001996:	883a      	ldrh	r2, [r7, #0]
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	b29b      	uxth	r3, r3
 800199e:	b21b      	sxth	r3, r3
 80019a0:	e004      	b.n	80019ac <SSD1306_DrawLine+0x84>
 80019a2:	88ba      	ldrh	r2, [r7, #4]
 80019a4:	883b      	ldrh	r3, [r7, #0]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80019ae:	88fa      	ldrh	r2, [r7, #6]
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d201      	bcs.n	80019ba <SSD1306_DrawLine+0x92>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e001      	b.n	80019be <SSD1306_DrawLine+0x96>
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80019c0:	88ba      	ldrh	r2, [r7, #4]
 80019c2:	883b      	ldrh	r3, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d201      	bcs.n	80019cc <SSD1306_DrawLine+0xa4>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e001      	b.n	80019d0 <SSD1306_DrawLine+0xa8>
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295
 80019d0:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80019d2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80019d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019da:	429a      	cmp	r2, r3
 80019dc:	dd06      	ble.n	80019ec <SSD1306_DrawLine+0xc4>
 80019de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019e2:	0fda      	lsrs	r2, r3, #31
 80019e4:	4413      	add	r3, r2
 80019e6:	105b      	asrs	r3, r3, #1
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	e006      	b.n	80019fa <SSD1306_DrawLine+0xd2>
 80019ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019f0:	425b      	negs	r3, r3
 80019f2:	0fda      	lsrs	r2, r3, #31
 80019f4:	4413      	add	r3, r2
 80019f6:	105b      	asrs	r3, r3, #1
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80019fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d129      	bne.n	8001a58 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001a04:	883a      	ldrh	r2, [r7, #0]
 8001a06:	88bb      	ldrh	r3, [r7, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d205      	bcs.n	8001a18 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001a0c:	883b      	ldrh	r3, [r7, #0]
 8001a0e:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001a10:	88bb      	ldrh	r3, [r7, #4]
 8001a12:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001a14:	893b      	ldrh	r3, [r7, #8]
 8001a16:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001a18:	887a      	ldrh	r2, [r7, #2]
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d205      	bcs.n	8001a2c <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001a20:	887b      	ldrh	r3, [r7, #2]
 8001a22:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a28:	893b      	ldrh	r3, [r7, #8]
 8001a2a:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001a2c:	88bb      	ldrh	r3, [r7, #4]
 8001a2e:	82bb      	strh	r3, [r7, #20]
 8001a30:	e00c      	b.n	8001a4c <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001a32:	8ab9      	ldrh	r1, [r7, #20]
 8001a34:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff16 	bl	800186c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001a40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3301      	adds	r3, #1
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	82bb      	strh	r3, [r7, #20]
 8001a4c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a50:	883b      	ldrh	r3, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	dded      	ble.n	8001a32 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001a56:	e05f      	b.n	8001b18 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001a58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d129      	bne.n	8001ab4 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001a60:	883a      	ldrh	r2, [r7, #0]
 8001a62:	88bb      	ldrh	r3, [r7, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d205      	bcs.n	8001a74 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001a68:	883b      	ldrh	r3, [r7, #0]
 8001a6a:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001a6c:	88bb      	ldrh	r3, [r7, #4]
 8001a6e:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001a70:	893b      	ldrh	r3, [r7, #8]
 8001a72:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001a74:	887a      	ldrh	r2, [r7, #2]
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d205      	bcs.n	8001a88 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a84:	893b      	ldrh	r3, [r7, #8]
 8001a86:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	82bb      	strh	r3, [r7, #20]
 8001a8c:	e00c      	b.n	8001aa8 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001a8e:	8abb      	ldrh	r3, [r7, #20]
 8001a90:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a94:	88b9      	ldrh	r1, [r7, #4]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fee8 	bl	800186c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001a9c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	82bb      	strh	r3, [r7, #20]
 8001aa8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001aac:	887b      	ldrh	r3, [r7, #2]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dded      	ble.n	8001a8e <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001ab2:	e031      	b.n	8001b18 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001ab4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ab8:	88b9      	ldrh	r1, [r7, #4]
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fed5 	bl	800186c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001ac2:	88fa      	ldrh	r2, [r7, #6]
 8001ac4:	887b      	ldrh	r3, [r7, #2]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d103      	bne.n	8001ad2 <SSD1306_DrawLine+0x1aa>
 8001aca:	88ba      	ldrh	r2, [r7, #4]
 8001acc:	883b      	ldrh	r3, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d021      	beq.n	8001b16 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001ad2:	8afb      	ldrh	r3, [r7, #22]
 8001ad4:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001ad6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ada:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ade:	425b      	negs	r3, r3
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dd08      	ble.n	8001af6 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001ae4:	8afa      	ldrh	r2, [r7, #22]
 8001ae6:	8a3b      	ldrh	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001aee:	89fa      	ldrh	r2, [r7, #14]
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	4413      	add	r3, r2
 8001af4:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001af6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001afa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	dad8      	bge.n	8001ab4 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001b02:	8afa      	ldrh	r2, [r7, #22]
 8001b04:	8a7b      	ldrh	r3, [r7, #18]
 8001b06:	4413      	add	r3, r2
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001b0c:	89ba      	ldrh	r2, [r7, #12]
 8001b0e:	88bb      	ldrh	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001b14:	e7ce      	b.n	8001ab4 <SSD1306_DrawLine+0x18c>
			break;
 8001b16:	bf00      	nop
		} 
	}
}
 8001b18:	371c      	adds	r7, #28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd90      	pop	{r4, r7, pc}
	...

08001b20 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <ssd1306_I2C_Init+0x24>)
 8001b28:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b2a:	e002      	b.n	8001b32 <ssd1306_I2C_Init+0x12>
		p--;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f9      	bne.n	8001b2c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	0003d090 	.word	0x0003d090

08001b48 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b0c7      	sub	sp, #284	; 0x11c
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	4604      	mov	r4, r0
 8001b50:	4608      	mov	r0, r1
 8001b52:	4639      	mov	r1, r7
 8001b54:	600a      	str	r2, [r1, #0]
 8001b56:	4619      	mov	r1, r3
 8001b58:	1dfb      	adds	r3, r7, #7
 8001b5a:	4622      	mov	r2, r4
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	1dbb      	adds	r3, r7, #6
 8001b60:	4602      	mov	r2, r0
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	460a      	mov	r2, r1
 8001b68:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	1dba      	adds	r2, r7, #6
 8001b70:	7812      	ldrb	r2, [r2, #0]
 8001b72:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b7a:	e010      	b.n	8001b9e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001b7c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b80:	463a      	mov	r2, r7
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	441a      	add	r2, r3
 8001b86:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	7811      	ldrb	r1, [r2, #0]
 8001b8e:	f107 020c 	add.w	r2, r7, #12
 8001b92:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001b94:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b9e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	1d3a      	adds	r2, r7, #4
 8001ba6:	8812      	ldrh	r2, [r2, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d8e7      	bhi.n	8001b7c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, HAL_MAX_DELAY);
 8001bac:	1dfb      	adds	r3, r7, #7
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	b299      	uxth	r1, r3
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	b298      	uxth	r0, r3
 8001bba:	f107 020c 	add.w	r2, r7, #12
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4804      	ldr	r0, [pc, #16]	; (8001bd8 <ssd1306_I2C_WriteMulti+0x90>)
 8001bc8:	f001 fa0a 	bl	8002fe0 <HAL_I2C_Master_Transmit>
}
 8001bcc:	bf00      	nop
 8001bce:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd90      	pop	{r4, r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000898 	.word	0x20000898

08001bdc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af02      	add	r7, sp, #8
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
 8001be6:	460b      	mov	r3, r1
 8001be8:	71bb      	strb	r3, [r7, #6]
 8001bea:	4613      	mov	r3, r2
 8001bec:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001bee:	79bb      	ldrb	r3, [r7, #6]
 8001bf0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001bf2:	797b      	ldrb	r3, [r7, #5]
 8001bf4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, HAL_MAX_DELAY);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	b299      	uxth	r1, r3
 8001bfa:	f107 020c 	add.w	r2, r7, #12
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2302      	movs	r3, #2
 8001c06:	4803      	ldr	r0, [pc, #12]	; (8001c14 <ssd1306_I2C_Write+0x38>)
 8001c08:	f001 f9ea 	bl	8002fe0 <HAL_I2C_Master_Transmit>
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000898 	.word	0x20000898

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_Init+0x28>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_Init+0x28>)
 8001c22:	f043 0310 	orr.w	r3, r3, #16
 8001c26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 fcf7 	bl	800261c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f000 f808 	bl	8001c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c34:	f7ff fbaa 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40022000 	.word	0x40022000

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x54>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x58>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 fd0f 	bl	8002686 <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00e      	b.n	8001c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d80a      	bhi.n	8001c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f000 fcd7 	bl	8002632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <HAL_InitTick+0x5c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x1c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	20000008 	.word	0x20000008
 8001cc4:	2000157c 	.word	0x2000157c

08001cc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <HAL_GetTick+0x10>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	2000157c 	.word	0x2000157c

08001cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff fff0 	bl	8001cc8 <HAL_GetTick>
 8001ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d005      	beq.n	8001d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_Delay+0x40>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d02:	bf00      	nop
 8001d04:	f7ff ffe0 	bl	8001cc8 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d8f7      	bhi.n	8001d04 <HAL_Delay+0x28>
  {
  }
}
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000008 	.word	0x20000008

08001d20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0be      	b.n	8001ec0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff fb46 	bl	80013f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 faed 	bl	8002344 <ADC_ConversionStop_Disable>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 8099 	bne.w	8001eae <HAL_ADC_Init+0x18e>
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f040 8095 	bne.w	8001eae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d8c:	f023 0302 	bic.w	r3, r3, #2
 8001d90:	f043 0202 	orr.w	r2, r3, #2
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001da0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7b1b      	ldrb	r3, [r3, #12]
 8001da6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001da8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001db8:	d003      	beq.n	8001dc2 <HAL_ADC_Init+0xa2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d102      	bne.n	8001dc8 <HAL_ADC_Init+0xa8>
 8001dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc6:	e000      	b.n	8001dca <HAL_ADC_Init+0xaa>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7d1b      	ldrb	r3, [r3, #20]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d119      	bne.n	8001e0c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7b1b      	ldrb	r3, [r3, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	035a      	lsls	r2, r3, #13
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	e00b      	b.n	8001e0c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	f043 0220 	orr.w	r2, r3, #32
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_ADC_Init+0x1a8>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	68b9      	ldr	r1, [r7, #8]
 8001e30:	430b      	orrs	r3, r1
 8001e32:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e3c:	d003      	beq.n	8001e46 <HAL_ADC_Init+0x126>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d104      	bne.n	8001e50 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	051b      	lsls	r3, r3, #20
 8001e4e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_ADC_Init+0x1ac>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d10b      	bne.n	8001e8c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	f023 0303 	bic.w	r3, r3, #3
 8001e82:	f043 0201 	orr.w	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e8a:	e018      	b.n	8001ebe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e90:	f023 0312 	bic.w	r3, r3, #18
 8001e94:	f043 0210 	orr.w	r2, r3, #16
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	f043 0201 	orr.w	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001eac:	e007      	b.n	8001ebe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	f043 0210 	orr.w	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	ffe1f7fd 	.word	0xffe1f7fd
 8001ecc:	ff1f0efe 	.word	0xff1f0efe

08001ed0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a64      	ldr	r2, [pc, #400]	; (8002078 <HAL_ADC_Start_DMA+0x1a8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d004      	beq.n	8001ef4 <HAL_ADC_Start_DMA+0x24>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a63      	ldr	r2, [pc, #396]	; (800207c <HAL_ADC_Start_DMA+0x1ac>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d106      	bne.n	8001f02 <HAL_ADC_Start_DMA+0x32>
 8001ef4:	4b60      	ldr	r3, [pc, #384]	; (8002078 <HAL_ADC_Start_DMA+0x1a8>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f040 80b3 	bne.w	8002068 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_ADC_Start_DMA+0x40>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e0ae      	b.n	800206e <HAL_ADC_Start_DMA+0x19e>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 f9c1 	bl	80022a0 <ADC_Enable>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f040 809a 	bne.w	800205e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a4e      	ldr	r2, [pc, #312]	; (800207c <HAL_ADC_Start_DMA+0x1ac>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d105      	bne.n	8001f54 <HAL_ADC_Start_DMA+0x84>
 8001f48:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <HAL_ADC_Start_DMA+0x1a8>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d115      	bne.n	8001f80 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d026      	beq.n	8001fbc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f7e:	e01d      	b.n	8001fbc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a39      	ldr	r2, [pc, #228]	; (8002078 <HAL_ADC_Start_DMA+0x1a8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d004      	beq.n	8001fa0 <HAL_ADC_Start_DMA+0xd0>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a38      	ldr	r2, [pc, #224]	; (800207c <HAL_ADC_Start_DMA+0x1ac>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d10d      	bne.n	8001fbc <HAL_ADC_Start_DMA+0xec>
 8001fa0:	4b35      	ldr	r3, [pc, #212]	; (8002078 <HAL_ADC_Start_DMA+0x1a8>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d007      	beq.n	8001fbc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	f023 0206 	bic.w	r2, r3, #6
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fd4:	e002      	b.n	8001fdc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4a25      	ldr	r2, [pc, #148]	; (8002080 <HAL_ADC_Start_DMA+0x1b0>)
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4a24      	ldr	r2, [pc, #144]	; (8002084 <HAL_ADC_Start_DMA+0x1b4>)
 8001ff2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	4a23      	ldr	r2, [pc, #140]	; (8002088 <HAL_ADC_Start_DMA+0x1b8>)
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0202 	mvn.w	r2, #2
 8002004:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002014:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a18      	ldr	r0, [r3, #32]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	334c      	adds	r3, #76	; 0x4c
 8002020:	4619      	mov	r1, r3
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f000 fb95 	bl	8002754 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002034:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002038:	d108      	bne.n	800204c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002048:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800204a:	e00f      	b.n	800206c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800205a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800205c:	e006      	b.n	800206c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002066:	e001      	b.n	800206c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800206c:	7dfb      	ldrb	r3, [r7, #23]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40012400 	.word	0x40012400
 800207c:	40012800 	.word	0x40012800
 8002080:	080023b9 	.word	0x080023b9
 8002084:	08002435 	.word	0x08002435
 8002088:	08002451 	.word	0x08002451

0800208c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x20>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e0dc      	b.n	800228a <HAL_ADC_ConfigChannel+0x1da>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b06      	cmp	r3, #6
 80020de:	d81c      	bhi.n	800211a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	3b05      	subs	r3, #5
 80020f2:	221f      	movs	r2, #31
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	4019      	ands	r1, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	3b05      	subs	r3, #5
 800210c:	fa00 f203 	lsl.w	r2, r0, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	635a      	str	r2, [r3, #52]	; 0x34
 8002118:	e03c      	b.n	8002194 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d81c      	bhi.n	800215c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	3b23      	subs	r3, #35	; 0x23
 8002134:	221f      	movs	r2, #31
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	4019      	ands	r1, r3
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	3b23      	subs	r3, #35	; 0x23
 800214e:	fa00 f203 	lsl.w	r2, r0, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
 800215a:	e01b      	b.n	8002194 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	3b41      	subs	r3, #65	; 0x41
 800216e:	221f      	movs	r2, #31
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	4019      	ands	r1, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	3b41      	subs	r3, #65	; 0x41
 8002188:	fa00 f203 	lsl.w	r2, r0, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b09      	cmp	r3, #9
 800219a:	d91c      	bls.n	80021d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68d9      	ldr	r1, [r3, #12]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	3b1e      	subs	r3, #30
 80021ae:	2207      	movs	r2, #7
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	4019      	ands	r1, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6898      	ldr	r0, [r3, #8]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	3b1e      	subs	r3, #30
 80021c8:	fa00 f203 	lsl.w	r2, r0, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	e019      	b.n	800220a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6919      	ldr	r1, [r3, #16]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	2207      	movs	r2, #7
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4019      	ands	r1, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6898      	ldr	r0, [r3, #8]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b10      	cmp	r3, #16
 8002210:	d003      	beq.n	800221a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002216:	2b11      	cmp	r3, #17
 8002218:	d132      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a1d      	ldr	r2, [pc, #116]	; (8002294 <HAL_ADC_ConfigChannel+0x1e4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d125      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d126      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002240:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b10      	cmp	r3, #16
 8002248:	d11a      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800224a:	4b13      	ldr	r3, [pc, #76]	; (8002298 <HAL_ADC_ConfigChannel+0x1e8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a13      	ldr	r2, [pc, #76]	; (800229c <HAL_ADC_ConfigChannel+0x1ec>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	0c9a      	lsrs	r2, r3, #18
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002260:	e002      	b.n	8002268 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	3b01      	subs	r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f9      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x1b2>
 800226e:	e007      	b.n	8002280 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	f043 0220 	orr.w	r2, r3, #32
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002288:	7bfb      	ldrb	r3, [r7, #15]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	40012400 	.word	0x40012400
 8002298:	20000000 	.word	0x20000000
 800229c:	431bde83 	.word	0x431bde83

080022a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d039      	beq.n	8002332 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0201 	orr.w	r2, r2, #1
 80022cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <ADC_Enable+0x9c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1b      	ldr	r2, [pc, #108]	; (8002340 <ADC_Enable+0xa0>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	0c9b      	lsrs	r3, r3, #18
 80022da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022dc:	e002      	b.n	80022e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f9      	bne.n	80022de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ea:	f7ff fced 	bl	8001cc8 <HAL_GetTick>
 80022ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022f0:	e018      	b.n	8002324 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022f2:	f7ff fce9 	bl	8001cc8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d911      	bls.n	8002324 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	f043 0210 	orr.w	r2, r3, #16
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e007      	b.n	8002334 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d1df      	bne.n	80022f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000000 	.word	0x20000000
 8002340:	431bde83 	.word	0x431bde83

08002344 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b01      	cmp	r3, #1
 800235c:	d127      	bne.n	80023ae <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0201 	bic.w	r2, r2, #1
 800236c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800236e:	f7ff fcab 	bl	8001cc8 <HAL_GetTick>
 8002372:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002374:	e014      	b.n	80023a0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002376:	f7ff fca7 	bl	8001cc8 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d90d      	bls.n	80023a0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	f043 0210 	orr.w	r2, r3, #16
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002394:	f043 0201 	orr.w	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e007      	b.n	80023b0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d0e3      	beq.n	8002376 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d127      	bne.n	8002422 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023e8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023ec:	d115      	bne.n	800241a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d111      	bne.n	800241a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f7fe ff9a 	bl	8001354 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002420:	e004      	b.n	800242c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
}
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f7ff fe22 	bl	800208c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	f043 0204 	orr.w	r2, r3, #4
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f7ff fe11 	bl	800209e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a0:	4013      	ands	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b6:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	60d3      	str	r3, [r2, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <__NVIC_GetPriorityGrouping+0x18>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	f003 0307 	and.w	r3, r3, #7
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	db0b      	blt.n	8002512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	4906      	ldr	r1, [pc, #24]	; (800251c <__NVIC_EnableIRQ+0x34>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2001      	movs	r0, #1
 800250a:	fa00 f202 	lsl.w	r2, r0, r2
 800250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	e000e100 	.word	0xe000e100

08002520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	db0a      	blt.n	800254a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	490c      	ldr	r1, [pc, #48]	; (800256c <__NVIC_SetPriority+0x4c>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	440b      	add	r3, r1
 8002544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002548:	e00a      	b.n	8002560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4908      	ldr	r1, [pc, #32]	; (8002570 <__NVIC_SetPriority+0x50>)
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3b04      	subs	r3, #4
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	440b      	add	r3, r1
 800255e:	761a      	strb	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000e100 	.word	0xe000e100
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f1c3 0307 	rsb	r3, r3, #7
 800258e:	2b04      	cmp	r3, #4
 8002590:	bf28      	it	cs
 8002592:	2304      	movcs	r3, #4
 8002594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3304      	adds	r3, #4
 800259a:	2b06      	cmp	r3, #6
 800259c:	d902      	bls.n	80025a4 <NVIC_EncodePriority+0x30>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3b03      	subs	r3, #3
 80025a2:	e000      	b.n	80025a6 <NVIC_EncodePriority+0x32>
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	401a      	ands	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	43d9      	mvns	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	4313      	orrs	r3, r2
         );
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e8:	d301      	bcc.n	80025ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ea:	2301      	movs	r3, #1
 80025ec:	e00f      	b.n	800260e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ee:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <SysTick_Config+0x40>)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025f6:	210f      	movs	r1, #15
 80025f8:	f04f 30ff 	mov.w	r0, #4294967295
 80025fc:	f7ff ff90 	bl	8002520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <SysTick_Config+0x40>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002606:	4b04      	ldr	r3, [pc, #16]	; (8002618 <SysTick_Config+0x40>)
 8002608:	2207      	movs	r2, #7
 800260a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	e000e010 	.word	0xe000e010

0800261c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ff2d 	bl	8002484 <__NVIC_SetPriorityGrouping>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002632:	b580      	push	{r7, lr}
 8002634:	b086      	sub	sp, #24
 8002636:	af00      	add	r7, sp, #0
 8002638:	4603      	mov	r3, r0
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002644:	f7ff ff42 	bl	80024cc <__NVIC_GetPriorityGrouping>
 8002648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	6978      	ldr	r0, [r7, #20]
 8002650:	f7ff ff90 	bl	8002574 <NVIC_EncodePriority>
 8002654:	4602      	mov	r2, r0
 8002656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff5f 	bl	8002520 <__NVIC_SetPriority>
}
 8002662:	bf00      	nop
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	4603      	mov	r3, r0
 8002672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff35 	bl	80024e8 <__NVIC_EnableIRQ>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ffa2 	bl	80025d8 <SysTick_Config>
 8002694:	4603      	mov	r3, r0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e043      	b.n	800273e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	4b22      	ldr	r3, [pc, #136]	; (8002748 <HAL_DMA_Init+0xa8>)
 80026be:	4413      	add	r3, r2
 80026c0:	4a22      	ldr	r2, [pc, #136]	; (800274c <HAL_DMA_Init+0xac>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	009a      	lsls	r2, r3, #2
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a1f      	ldr	r2, [pc, #124]	; (8002750 <HAL_DMA_Init+0xb0>)
 80026d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002704:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002710:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	bffdfff8 	.word	0xbffdfff8
 800274c:	cccccccd 	.word	0xcccccccd
 8002750:	40020000 	.word	0x40020000

08002754 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_DMA_Start_IT+0x20>
 8002770:	2302      	movs	r3, #2
 8002772:	e04a      	b.n	800280a <HAL_DMA_Start_IT+0xb6>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002782:	2b01      	cmp	r3, #1
 8002784:	d13a      	bne.n	80027fc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2202      	movs	r2, #2
 800278a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f938 	bl	8002a20 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 020e 	orr.w	r2, r2, #14
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e00f      	b.n	80027ea <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0204 	bic.w	r2, r2, #4
 80027d8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 020a 	orr.w	r2, r2, #10
 80027e8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0201 	orr.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	e005      	b.n	8002808 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002804:	2302      	movs	r3, #2
 8002806:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002808:	7dfb      	ldrb	r3, [r7, #23]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	2204      	movs	r2, #4
 8002832:	409a      	lsls	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d04f      	beq.n	80028dc <HAL_DMA_IRQHandler+0xc8>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b00      	cmp	r3, #0
 8002844:	d04a      	beq.n	80028dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d107      	bne.n	8002864 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0204 	bic.w	r2, r2, #4
 8002862:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a66      	ldr	r2, [pc, #408]	; (8002a04 <HAL_DMA_IRQHandler+0x1f0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d029      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xae>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a65      	ldr	r2, [pc, #404]	; (8002a08 <HAL_DMA_IRQHandler+0x1f4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d022      	beq.n	80028be <HAL_DMA_IRQHandler+0xaa>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a63      	ldr	r2, [pc, #396]	; (8002a0c <HAL_DMA_IRQHandler+0x1f8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d01a      	beq.n	80028b8 <HAL_DMA_IRQHandler+0xa4>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a62      	ldr	r2, [pc, #392]	; (8002a10 <HAL_DMA_IRQHandler+0x1fc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d012      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x9e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a60      	ldr	r2, [pc, #384]	; (8002a14 <HAL_DMA_IRQHandler+0x200>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00a      	beq.n	80028ac <HAL_DMA_IRQHandler+0x98>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a5f      	ldr	r2, [pc, #380]	; (8002a18 <HAL_DMA_IRQHandler+0x204>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d102      	bne.n	80028a6 <HAL_DMA_IRQHandler+0x92>
 80028a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028a4:	e00e      	b.n	80028c4 <HAL_DMA_IRQHandler+0xb0>
 80028a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028aa:	e00b      	b.n	80028c4 <HAL_DMA_IRQHandler+0xb0>
 80028ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028b0:	e008      	b.n	80028c4 <HAL_DMA_IRQHandler+0xb0>
 80028b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028b6:	e005      	b.n	80028c4 <HAL_DMA_IRQHandler+0xb0>
 80028b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028bc:	e002      	b.n	80028c4 <HAL_DMA_IRQHandler+0xb0>
 80028be:	2340      	movs	r3, #64	; 0x40
 80028c0:	e000      	b.n	80028c4 <HAL_DMA_IRQHandler+0xb0>
 80028c2:	2304      	movs	r3, #4
 80028c4:	4a55      	ldr	r2, [pc, #340]	; (8002a1c <HAL_DMA_IRQHandler+0x208>)
 80028c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8094 	beq.w	80029fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028da:	e08e      	b.n	80029fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	2202      	movs	r2, #2
 80028e2:	409a      	lsls	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d056      	beq.n	800299a <HAL_DMA_IRQHandler+0x186>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d051      	beq.n	800299a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10b      	bne.n	800291c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 020a 	bic.w	r2, r2, #10
 8002912:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a38      	ldr	r2, [pc, #224]	; (8002a04 <HAL_DMA_IRQHandler+0x1f0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d029      	beq.n	800297a <HAL_DMA_IRQHandler+0x166>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a37      	ldr	r2, [pc, #220]	; (8002a08 <HAL_DMA_IRQHandler+0x1f4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d022      	beq.n	8002976 <HAL_DMA_IRQHandler+0x162>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a35      	ldr	r2, [pc, #212]	; (8002a0c <HAL_DMA_IRQHandler+0x1f8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01a      	beq.n	8002970 <HAL_DMA_IRQHandler+0x15c>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a34      	ldr	r2, [pc, #208]	; (8002a10 <HAL_DMA_IRQHandler+0x1fc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d012      	beq.n	800296a <HAL_DMA_IRQHandler+0x156>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a32      	ldr	r2, [pc, #200]	; (8002a14 <HAL_DMA_IRQHandler+0x200>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00a      	beq.n	8002964 <HAL_DMA_IRQHandler+0x150>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a31      	ldr	r2, [pc, #196]	; (8002a18 <HAL_DMA_IRQHandler+0x204>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d102      	bne.n	800295e <HAL_DMA_IRQHandler+0x14a>
 8002958:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800295c:	e00e      	b.n	800297c <HAL_DMA_IRQHandler+0x168>
 800295e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002962:	e00b      	b.n	800297c <HAL_DMA_IRQHandler+0x168>
 8002964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002968:	e008      	b.n	800297c <HAL_DMA_IRQHandler+0x168>
 800296a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800296e:	e005      	b.n	800297c <HAL_DMA_IRQHandler+0x168>
 8002970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002974:	e002      	b.n	800297c <HAL_DMA_IRQHandler+0x168>
 8002976:	2320      	movs	r3, #32
 8002978:	e000      	b.n	800297c <HAL_DMA_IRQHandler+0x168>
 800297a:	2302      	movs	r3, #2
 800297c:	4a27      	ldr	r2, [pc, #156]	; (8002a1c <HAL_DMA_IRQHandler+0x208>)
 800297e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	d034      	beq.n	80029fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002998:	e02f      	b.n	80029fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2208      	movs	r2, #8
 80029a0:	409a      	lsls	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d028      	beq.n	80029fc <HAL_DMA_IRQHandler+0x1e8>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d023      	beq.n	80029fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 020e 	bic.w	r2, r2, #14
 80029c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029cc:	2101      	movs	r1, #1
 80029ce:	fa01 f202 	lsl.w	r2, r1, r2
 80029d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d004      	beq.n	80029fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
    }
  }
  return;
 80029fa:	bf00      	nop
 80029fc:	bf00      	nop
}
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40020008 	.word	0x40020008
 8002a08:	4002001c 	.word	0x4002001c
 8002a0c:	40020030 	.word	0x40020030
 8002a10:	40020044 	.word	0x40020044
 8002a14:	40020058 	.word	0x40020058
 8002a18:	4002006c 	.word	0x4002006c
 8002a1c:	40020000 	.word	0x40020000

08002a20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a36:	2101      	movs	r1, #1
 8002a38:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b10      	cmp	r3, #16
 8002a4c:	d108      	bne.n	8002a60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a5e:	e007      	b.n	8002a70 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	60da      	str	r2, [r3, #12]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b08b      	sub	sp, #44	; 0x2c
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a8e:	e127      	b.n	8002ce0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a90:	2201      	movs	r2, #1
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	f040 8116 	bne.w	8002cda <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b12      	cmp	r3, #18
 8002ab4:	d034      	beq.n	8002b20 <HAL_GPIO_Init+0xa4>
 8002ab6:	2b12      	cmp	r3, #18
 8002ab8:	d80d      	bhi.n	8002ad6 <HAL_GPIO_Init+0x5a>
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d02b      	beq.n	8002b16 <HAL_GPIO_Init+0x9a>
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d804      	bhi.n	8002acc <HAL_GPIO_Init+0x50>
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d031      	beq.n	8002b2a <HAL_GPIO_Init+0xae>
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d01c      	beq.n	8002b04 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002aca:	e048      	b.n	8002b5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d043      	beq.n	8002b58 <HAL_GPIO_Init+0xdc>
 8002ad0:	2b11      	cmp	r3, #17
 8002ad2:	d01b      	beq.n	8002b0c <HAL_GPIO_Init+0x90>
          break;
 8002ad4:	e043      	b.n	8002b5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ad6:	4a89      	ldr	r2, [pc, #548]	; (8002cfc <HAL_GPIO_Init+0x280>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d026      	beq.n	8002b2a <HAL_GPIO_Init+0xae>
 8002adc:	4a87      	ldr	r2, [pc, #540]	; (8002cfc <HAL_GPIO_Init+0x280>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d806      	bhi.n	8002af0 <HAL_GPIO_Init+0x74>
 8002ae2:	4a87      	ldr	r2, [pc, #540]	; (8002d00 <HAL_GPIO_Init+0x284>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d020      	beq.n	8002b2a <HAL_GPIO_Init+0xae>
 8002ae8:	4a86      	ldr	r2, [pc, #536]	; (8002d04 <HAL_GPIO_Init+0x288>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d01d      	beq.n	8002b2a <HAL_GPIO_Init+0xae>
          break;
 8002aee:	e036      	b.n	8002b5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002af0:	4a85      	ldr	r2, [pc, #532]	; (8002d08 <HAL_GPIO_Init+0x28c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d019      	beq.n	8002b2a <HAL_GPIO_Init+0xae>
 8002af6:	4a85      	ldr	r2, [pc, #532]	; (8002d0c <HAL_GPIO_Init+0x290>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d016      	beq.n	8002b2a <HAL_GPIO_Init+0xae>
 8002afc:	4a84      	ldr	r2, [pc, #528]	; (8002d10 <HAL_GPIO_Init+0x294>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <HAL_GPIO_Init+0xae>
          break;
 8002b02:	e02c      	b.n	8002b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	623b      	str	r3, [r7, #32]
          break;
 8002b0a:	e028      	b.n	8002b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	3304      	adds	r3, #4
 8002b12:	623b      	str	r3, [r7, #32]
          break;
 8002b14:	e023      	b.n	8002b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	3308      	adds	r3, #8
 8002b1c:	623b      	str	r3, [r7, #32]
          break;
 8002b1e:	e01e      	b.n	8002b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	330c      	adds	r3, #12
 8002b26:	623b      	str	r3, [r7, #32]
          break;
 8002b28:	e019      	b.n	8002b5e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b32:	2304      	movs	r3, #4
 8002b34:	623b      	str	r3, [r7, #32]
          break;
 8002b36:	e012      	b.n	8002b5e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b40:	2308      	movs	r3, #8
 8002b42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	611a      	str	r2, [r3, #16]
          break;
 8002b4a:	e008      	b.n	8002b5e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	615a      	str	r2, [r3, #20]
          break;
 8002b56:	e002      	b.n	8002b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
          break;
 8002b5c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2bff      	cmp	r3, #255	; 0xff
 8002b62:	d801      	bhi.n	8002b68 <HAL_GPIO_Init+0xec>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	e001      	b.n	8002b6c <HAL_GPIO_Init+0xf0>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	2bff      	cmp	r3, #255	; 0xff
 8002b72:	d802      	bhi.n	8002b7a <HAL_GPIO_Init+0xfe>
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	e002      	b.n	8002b80 <HAL_GPIO_Init+0x104>
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	3b08      	subs	r3, #8
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	210f      	movs	r1, #15
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	401a      	ands	r2, r3
 8002b92:	6a39      	ldr	r1, [r7, #32]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8096 	beq.w	8002cda <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bae:	4b59      	ldr	r3, [pc, #356]	; (8002d14 <HAL_GPIO_Init+0x298>)
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	4a58      	ldr	r2, [pc, #352]	; (8002d14 <HAL_GPIO_Init+0x298>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6193      	str	r3, [r2, #24]
 8002bba:	4b56      	ldr	r3, [pc, #344]	; (8002d14 <HAL_GPIO_Init+0x298>)
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bc6:	4a54      	ldr	r2, [pc, #336]	; (8002d18 <HAL_GPIO_Init+0x29c>)
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	089b      	lsrs	r3, r3, #2
 8002bcc:	3302      	adds	r3, #2
 8002bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	220f      	movs	r2, #15
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4013      	ands	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a4b      	ldr	r2, [pc, #300]	; (8002d1c <HAL_GPIO_Init+0x2a0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_GPIO_Init+0x19e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4a      	ldr	r2, [pc, #296]	; (8002d20 <HAL_GPIO_Init+0x2a4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00d      	beq.n	8002c16 <HAL_GPIO_Init+0x19a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a49      	ldr	r2, [pc, #292]	; (8002d24 <HAL_GPIO_Init+0x2a8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <HAL_GPIO_Init+0x196>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a48      	ldr	r2, [pc, #288]	; (8002d28 <HAL_GPIO_Init+0x2ac>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_GPIO_Init+0x192>
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e006      	b.n	8002c1c <HAL_GPIO_Init+0x1a0>
 8002c0e:	2304      	movs	r3, #4
 8002c10:	e004      	b.n	8002c1c <HAL_GPIO_Init+0x1a0>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e002      	b.n	8002c1c <HAL_GPIO_Init+0x1a0>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <HAL_GPIO_Init+0x1a0>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1e:	f002 0203 	and.w	r2, r2, #3
 8002c22:	0092      	lsls	r2, r2, #2
 8002c24:	4093      	lsls	r3, r2
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c2c:	493a      	ldr	r1, [pc, #232]	; (8002d18 <HAL_GPIO_Init+0x29c>)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	3302      	adds	r3, #2
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c46:	4b39      	ldr	r3, [pc, #228]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4938      	ldr	r1, [pc, #224]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]
 8002c52:	e006      	b.n	8002c62 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c54:	4b35      	ldr	r3, [pc, #212]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	4933      	ldr	r1, [pc, #204]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d006      	beq.n	8002c7c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c6e:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	492e      	ldr	r1, [pc, #184]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	604b      	str	r3, [r1, #4]
 8002c7a:	e006      	b.n	8002c8a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c7c:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	4929      	ldr	r1, [pc, #164]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d006      	beq.n	8002ca4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c96:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	4924      	ldr	r1, [pc, #144]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
 8002ca2:	e006      	b.n	8002cb2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	491f      	ldr	r1, [pc, #124]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d006      	beq.n	8002ccc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	491a      	ldr	r1, [pc, #104]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60cb      	str	r3, [r1, #12]
 8002cca:	e006      	b.n	8002cda <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ccc:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	4915      	ldr	r1, [pc, #84]	; (8002d2c <HAL_GPIO_Init+0x2b0>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	3301      	adds	r3, #1
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f47f aed0 	bne.w	8002a90 <HAL_GPIO_Init+0x14>
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	372c      	adds	r7, #44	; 0x2c
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	10210000 	.word	0x10210000
 8002d00:	10110000 	.word	0x10110000
 8002d04:	10120000 	.word	0x10120000
 8002d08:	10310000 	.word	0x10310000
 8002d0c:	10320000 	.word	0x10320000
 8002d10:	10220000 	.word	0x10220000
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40010000 	.word	0x40010000
 8002d1c:	40010800 	.word	0x40010800
 8002d20:	40010c00 	.word	0x40010c00
 8002d24:	40011000 	.word	0x40011000
 8002d28:	40011400 	.word	0x40011400
 8002d2c:	40010400 	.word	0x40010400

08002d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d40:	787b      	ldrb	r3, [r7, #1]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d46:	887a      	ldrh	r2, [r7, #2]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d4c:	e003      	b.n	8002d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d4e:	887b      	ldrh	r3, [r7, #2]
 8002d50:	041a      	lsls	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	611a      	str	r2, [r3, #16]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d78:	887a      	ldrh	r2, [r7, #2]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002d7e:	e002      	b.n	8002d86 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d80:	887a      	ldrh	r2, [r7, #2]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	611a      	str	r2, [r3, #16]
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e10f      	b.n	8002fc2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe fb82 	bl	80014c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2224      	movs	r2, #36	; 0x24
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dd4:	f001 f8f6 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 8002dd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4a7b      	ldr	r2, [pc, #492]	; (8002fcc <HAL_I2C_Init+0x23c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d807      	bhi.n	8002df4 <HAL_I2C_Init+0x64>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a7a      	ldr	r2, [pc, #488]	; (8002fd0 <HAL_I2C_Init+0x240>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	bf94      	ite	ls
 8002dec:	2301      	movls	r3, #1
 8002dee:	2300      	movhi	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e006      	b.n	8002e02 <HAL_I2C_Init+0x72>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4a77      	ldr	r2, [pc, #476]	; (8002fd4 <HAL_I2C_Init+0x244>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	bf94      	ite	ls
 8002dfc:	2301      	movls	r3, #1
 8002dfe:	2300      	movhi	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e0db      	b.n	8002fc2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4a72      	ldr	r2, [pc, #456]	; (8002fd8 <HAL_I2C_Init+0x248>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	0c9b      	lsrs	r3, r3, #18
 8002e14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4a64      	ldr	r2, [pc, #400]	; (8002fcc <HAL_I2C_Init+0x23c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d802      	bhi.n	8002e44 <HAL_I2C_Init+0xb4>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	3301      	adds	r3, #1
 8002e42:	e009      	b.n	8002e58 <HAL_I2C_Init+0xc8>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
 8002e4e:	4a63      	ldr	r2, [pc, #396]	; (8002fdc <HAL_I2C_Init+0x24c>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	099b      	lsrs	r3, r3, #6
 8002e56:	3301      	adds	r3, #1
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4956      	ldr	r1, [pc, #344]	; (8002fcc <HAL_I2C_Init+0x23c>)
 8002e74:	428b      	cmp	r3, r1
 8002e76:	d80d      	bhi.n	8002e94 <HAL_I2C_Init+0x104>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1e59      	subs	r1, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e86:	3301      	adds	r3, #1
 8002e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	bf38      	it	cc
 8002e90:	2304      	movcc	r3, #4
 8002e92:	e04f      	b.n	8002f34 <HAL_I2C_Init+0x1a4>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d111      	bne.n	8002ec0 <HAL_I2C_Init+0x130>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e58      	subs	r0, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	440b      	add	r3, r1
 8002eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	e012      	b.n	8002ee6 <HAL_I2C_Init+0x156>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1e58      	subs	r0, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	0099      	lsls	r1, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_Init+0x15e>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e022      	b.n	8002f34 <HAL_I2C_Init+0x1a4>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10e      	bne.n	8002f14 <HAL_I2C_Init+0x184>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1e58      	subs	r0, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6859      	ldr	r1, [r3, #4]
 8002efe:	460b      	mov	r3, r1
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	440b      	add	r3, r1
 8002f04:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f12:	e00f      	b.n	8002f34 <HAL_I2C_Init+0x1a4>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1e58      	subs	r0, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6859      	ldr	r1, [r3, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	0099      	lsls	r1, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	6809      	ldr	r1, [r1, #0]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6911      	ldr	r1, [r2, #16]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68d2      	ldr	r2, [r2, #12]
 8002f6e:	4311      	orrs	r1, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	430b      	orrs	r3, r1
 8002f76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	000186a0 	.word	0x000186a0
 8002fd0:	001e847f 	.word	0x001e847f
 8002fd4:	003d08ff 	.word	0x003d08ff
 8002fd8:	431bde83 	.word	0x431bde83
 8002fdc:	10624dd3 	.word	0x10624dd3

08002fe0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	461a      	mov	r2, r3
 8002fec:	460b      	mov	r3, r1
 8002fee:	817b      	strh	r3, [r7, #10]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ff4:	f7fe fe68 	bl	8001cc8 <HAL_GetTick>
 8002ff8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b20      	cmp	r3, #32
 8003004:	f040 80e0 	bne.w	80031c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	2319      	movs	r3, #25
 800300e:	2201      	movs	r2, #1
 8003010:	4970      	ldr	r1, [pc, #448]	; (80031d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fa7a 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
 8003020:	e0d3      	b.n	80031ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_I2C_Master_Transmit+0x50>
 800302c:	2302      	movs	r3, #2
 800302e:	e0cc      	b.n	80031ca <HAL_I2C_Master_Transmit+0x1ea>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d007      	beq.n	8003056 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003064:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2221      	movs	r2, #33	; 0x21
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2210      	movs	r2, #16
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	893a      	ldrh	r2, [r7, #8]
 8003086:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4a50      	ldr	r2, [pc, #320]	; (80031d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003096:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003098:	8979      	ldrh	r1, [r7, #10]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	6a3a      	ldr	r2, [r7, #32]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f9be 	bl	8003420 <I2C_MasterRequestWrite>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e08d      	b.n	80031ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030c4:	e066      	b.n	8003194 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	6a39      	ldr	r1, [r7, #32]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 faf4 	bl	80036b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d107      	bne.n	80030ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e06b      	b.n	80031ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	781a      	ldrb	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b04      	cmp	r3, #4
 800312e:	d11b      	bne.n	8003168 <HAL_I2C_Master_Transmit+0x188>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003134:	2b00      	cmp	r3, #0
 8003136:	d017      	beq.n	8003168 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	781a      	ldrb	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	6a39      	ldr	r1, [r7, #32]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 fae4 	bl	800373a <I2C_WaitOnBTFFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00d      	beq.n	8003194 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	2b04      	cmp	r3, #4
 800317e:	d107      	bne.n	8003190 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e01a      	b.n	80031ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	2b00      	cmp	r3, #0
 800319a:	d194      	bne.n	80030c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e000      	b.n	80031ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
  }
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	00100002 	.word	0x00100002
 80031d8:	ffff0000 	.word	0xffff0000

080031dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	; 0x28
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	460b      	mov	r3, r1
 80031ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80031ec:	f7fe fd6c 	bl	8001cc8 <HAL_GetTick>
 80031f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80031f2:	2301      	movs	r3, #1
 80031f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b20      	cmp	r3, #32
 8003200:	f040 8105 	bne.w	800340e <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	2319      	movs	r3, #25
 800320a:	2201      	movs	r2, #1
 800320c:	4982      	ldr	r1, [pc, #520]	; (8003418 <HAL_I2C_IsDeviceReady+0x23c>)
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f97c 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800321a:	2302      	movs	r3, #2
 800321c:	e0f8      	b.n	8003410 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_I2C_IsDeviceReady+0x50>
 8003228:	2302      	movs	r3, #2
 800322a:	e0f1      	b.n	8003410 <HAL_I2C_IsDeviceReady+0x234>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b01      	cmp	r3, #1
 8003240:	d007      	beq.n	8003252 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003260:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2224      	movs	r2, #36	; 0x24
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4a6a      	ldr	r2, [pc, #424]	; (800341c <HAL_I2C_IsDeviceReady+0x240>)
 8003274:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003284:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2200      	movs	r2, #0
 800328e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f93a 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e0b6      	b.n	8003410 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032a2:	897b      	ldrh	r3, [r7, #10]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80032b2:	f7fe fd09 	bl	8001cc8 <HAL_GetTick>
 80032b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032dc:	bf0c      	ite	eq
 80032de:	2301      	moveq	r3, #1
 80032e0:	2300      	movne	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032e6:	e025      	b.n	8003334 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032e8:	f7fe fcee 	bl	8001cc8 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d302      	bcc.n	80032fe <HAL_I2C_IsDeviceReady+0x122>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d103      	bne.n	8003306 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	22a0      	movs	r2, #160	; 0xa0
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b02      	cmp	r3, #2
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2ba0      	cmp	r3, #160	; 0xa0
 800333e:	d005      	beq.n	800334c <HAL_I2C_IsDeviceReady+0x170>
 8003340:	7dfb      	ldrb	r3, [r7, #23]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d102      	bne.n	800334c <HAL_I2C_IsDeviceReady+0x170>
 8003346:	7dbb      	ldrb	r3, [r7, #22]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0cd      	beq.n	80032e8 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b02      	cmp	r3, #2
 8003360:	d129      	bne.n	80033b6 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003370:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003372:	2300      	movs	r3, #0
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2319      	movs	r3, #25
 800338e:	2201      	movs	r2, #1
 8003390:	4921      	ldr	r1, [pc, #132]	; (8003418 <HAL_I2C_IsDeviceReady+0x23c>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f8ba 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e036      	b.n	8003410 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e02c      	b.n	8003410 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	2319      	movs	r3, #25
 80033d6:	2201      	movs	r2, #1
 80033d8:	490f      	ldr	r1, [pc, #60]	; (8003418 <HAL_I2C_IsDeviceReady+0x23c>)
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f896 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e012      	b.n	8003410 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	3301      	adds	r3, #1
 80033ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	f4ff af3e 	bcc.w	8003276 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 800340e:	2302      	movs	r3, #2
  }
}
 8003410:	4618      	mov	r0, r3
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	00100002 	.word	0x00100002
 800341c:	ffff0000 	.word	0xffff0000

08003420 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af02      	add	r7, sp, #8
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	460b      	mov	r3, r1
 800342e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b08      	cmp	r3, #8
 800343a:	d006      	beq.n	800344a <I2C_MasterRequestWrite+0x2a>
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d003      	beq.n	800344a <I2C_MasterRequestWrite+0x2a>
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003448:	d108      	bne.n	800345c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e00b      	b.n	8003474 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	2b12      	cmp	r3, #18
 8003462:	d107      	bne.n	8003474 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003472:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f843 	bl	800350c <I2C_WaitOnFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e035      	b.n	80034fc <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003498:	d108      	bne.n	80034ac <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800349a:	897b      	ldrh	r3, [r7, #10]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034a8:	611a      	str	r2, [r3, #16]
 80034aa:	e01b      	b.n	80034e4 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034ac:	897b      	ldrh	r3, [r7, #10]
 80034ae:	11db      	asrs	r3, r3, #7
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	f003 0306 	and.w	r3, r3, #6
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f063 030f 	orn	r3, r3, #15
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	490e      	ldr	r1, [pc, #56]	; (8003504 <I2C_MasterRequestWrite+0xe4>)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f875 	bl	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e010      	b.n	80034fc <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034da:	897b      	ldrh	r3, [r7, #10]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	4907      	ldr	r1, [pc, #28]	; (8003508 <I2C_MasterRequestWrite+0xe8>)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f865 	bl	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	00010008 	.word	0x00010008
 8003508:	00010002 	.word	0x00010002

0800350c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800351c:	e025      	b.n	800356a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d021      	beq.n	800356a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fe fbcf 	bl	8001cc8 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d116      	bne.n	800356a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f043 0220 	orr.w	r2, r3, #32
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e023      	b.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d10d      	bne.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	43da      	mvns	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	e00c      	b.n	80035aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	43da      	mvns	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4013      	ands	r3, r2
 800359c:	b29b      	uxth	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf0c      	ite	eq
 80035a2:	2301      	moveq	r3, #1
 80035a4:	2300      	movne	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d0b6      	beq.n	800351e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035c8:	e051      	b.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d8:	d123      	bne.n	8003622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f043 0204 	orr.w	r2, r3, #4
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e046      	b.n	80036b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d021      	beq.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362a:	f7fe fb4d 	bl	8001cc8 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	429a      	cmp	r2, r3
 8003638:	d302      	bcc.n	8003640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d116      	bne.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f043 0220 	orr.w	r2, r3, #32
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e020      	b.n	80036b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d10c      	bne.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	43da      	mvns	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4013      	ands	r3, r2
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	e00b      	b.n	80036aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	43da      	mvns	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4013      	ands	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d18d      	bne.n	80035ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c4:	e02d      	b.n	8003722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f878 	bl	80037bc <I2C_IsAcknowledgeFailed>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e02d      	b.n	8003732 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d021      	beq.n	8003722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036de:	f7fe faf3 	bl	8001cc8 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d302      	bcc.n	80036f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d116      	bne.n	8003722 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f043 0220 	orr.w	r2, r3, #32
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e007      	b.n	8003732 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372c:	2b80      	cmp	r3, #128	; 0x80
 800372e:	d1ca      	bne.n	80036c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003746:	e02d      	b.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f837 	bl	80037bc <I2C_IsAcknowledgeFailed>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e02d      	b.n	80037b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375e:	d021      	beq.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003760:	f7fe fab2 	bl	8001cc8 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	429a      	cmp	r2, r3
 800376e:	d302      	bcc.n	8003776 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d116      	bne.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	f043 0220 	orr.w	r2, r3, #32
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e007      	b.n	80037b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d1ca      	bne.n	8003748 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d2:	d11b      	bne.n	800380c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	f043 0204 	orr.w	r2, r3, #4
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e26c      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8087 	beq.w	8003946 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003838:	4b92      	ldr	r3, [pc, #584]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 030c 	and.w	r3, r3, #12
 8003840:	2b04      	cmp	r3, #4
 8003842:	d00c      	beq.n	800385e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003844:	4b8f      	ldr	r3, [pc, #572]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 030c 	and.w	r3, r3, #12
 800384c:	2b08      	cmp	r3, #8
 800384e:	d112      	bne.n	8003876 <HAL_RCC_OscConfig+0x5e>
 8003850:	4b8c      	ldr	r3, [pc, #560]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385c:	d10b      	bne.n	8003876 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385e:	4b89      	ldr	r3, [pc, #548]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d06c      	beq.n	8003944 <HAL_RCC_OscConfig+0x12c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d168      	bne.n	8003944 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e246      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387e:	d106      	bne.n	800388e <HAL_RCC_OscConfig+0x76>
 8003880:	4b80      	ldr	r3, [pc, #512]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a7f      	ldr	r2, [pc, #508]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	e02e      	b.n	80038ec <HAL_RCC_OscConfig+0xd4>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10c      	bne.n	80038b0 <HAL_RCC_OscConfig+0x98>
 8003896:	4b7b      	ldr	r3, [pc, #492]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a7a      	ldr	r2, [pc, #488]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 800389c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	4b78      	ldr	r3, [pc, #480]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a77      	ldr	r2, [pc, #476]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	e01d      	b.n	80038ec <HAL_RCC_OscConfig+0xd4>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038b8:	d10c      	bne.n	80038d4 <HAL_RCC_OscConfig+0xbc>
 80038ba:	4b72      	ldr	r3, [pc, #456]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a71      	ldr	r2, [pc, #452]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4b6f      	ldr	r3, [pc, #444]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a6e      	ldr	r2, [pc, #440]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	e00b      	b.n	80038ec <HAL_RCC_OscConfig+0xd4>
 80038d4:	4b6b      	ldr	r3, [pc, #428]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a6a      	ldr	r2, [pc, #424]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038de:	6013      	str	r3, [r2, #0]
 80038e0:	4b68      	ldr	r3, [pc, #416]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a67      	ldr	r2, [pc, #412]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80038e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d013      	beq.n	800391c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fe f9e8 	bl	8001cc8 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038fc:	f7fe f9e4 	bl	8001cc8 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	; 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e1fa      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	4b5d      	ldr	r3, [pc, #372]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0xe4>
 800391a:	e014      	b.n	8003946 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7fe f9d4 	bl	8001cc8 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003924:	f7fe f9d0 	bl	8001cc8 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	; 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e1e6      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003936:	4b53      	ldr	r3, [pc, #332]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x10c>
 8003942:	e000      	b.n	8003946 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d063      	beq.n	8003a1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003952:	4b4c      	ldr	r3, [pc, #304]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 030c 	and.w	r3, r3, #12
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00b      	beq.n	8003976 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800395e:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b08      	cmp	r3, #8
 8003968:	d11c      	bne.n	80039a4 <HAL_RCC_OscConfig+0x18c>
 800396a:	4b46      	ldr	r3, [pc, #280]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d116      	bne.n	80039a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003976:	4b43      	ldr	r3, [pc, #268]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <HAL_RCC_OscConfig+0x176>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d001      	beq.n	800398e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e1ba      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398e:	4b3d      	ldr	r3, [pc, #244]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4939      	ldr	r1, [pc, #228]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a2:	e03a      	b.n	8003a1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d020      	beq.n	80039ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ac:	4b36      	ldr	r3, [pc, #216]	; (8003a88 <HAL_RCC_OscConfig+0x270>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b2:	f7fe f989 	bl	8001cc8 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ba:	f7fe f985 	bl	8001cc8 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e19b      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039cc:	4b2d      	ldr	r3, [pc, #180]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d8:	4b2a      	ldr	r3, [pc, #168]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4927      	ldr	r1, [pc, #156]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	600b      	str	r3, [r1, #0]
 80039ec:	e015      	b.n	8003a1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ee:	4b26      	ldr	r3, [pc, #152]	; (8003a88 <HAL_RCC_OscConfig+0x270>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fe f968 	bl	8001cc8 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039fc:	f7fe f964 	bl	8001cc8 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e17a      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d03a      	beq.n	8003a9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d019      	beq.n	8003a62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a2e:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <HAL_RCC_OscConfig+0x274>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a34:	f7fe f948 	bl	8001cc8 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3c:	f7fe f944 	bl	8001cc8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e15a      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a5a:	2001      	movs	r0, #1
 8003a5c:	f000 fac6 	bl	8003fec <RCC_Delay>
 8003a60:	e01c      	b.n	8003a9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <HAL_RCC_OscConfig+0x274>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a68:	f7fe f92e 	bl	8001cc8 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6e:	e00f      	b.n	8003a90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a70:	f7fe f92a 	bl	8001cc8 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d908      	bls.n	8003a90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e140      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000
 8003a88:	42420000 	.word	0x42420000
 8003a8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a90:	4b9e      	ldr	r3, [pc, #632]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e9      	bne.n	8003a70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80a6 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aae:	4b97      	ldr	r3, [pc, #604]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10d      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	4b94      	ldr	r3, [pc, #592]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	4a93      	ldr	r2, [pc, #588]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	61d3      	str	r3, [r2, #28]
 8003ac6:	4b91      	ldr	r3, [pc, #580]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad6:	4b8e      	ldr	r3, [pc, #568]	; (8003d10 <HAL_RCC_OscConfig+0x4f8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d118      	bne.n	8003b14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae2:	4b8b      	ldr	r3, [pc, #556]	; (8003d10 <HAL_RCC_OscConfig+0x4f8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a8a      	ldr	r2, [pc, #552]	; (8003d10 <HAL_RCC_OscConfig+0x4f8>)
 8003ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aee:	f7fe f8eb 	bl	8001cc8 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af6:	f7fe f8e7 	bl	8001cc8 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b64      	cmp	r3, #100	; 0x64
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e0fd      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b08:	4b81      	ldr	r3, [pc, #516]	; (8003d10 <HAL_RCC_OscConfig+0x4f8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x312>
 8003b1c:	4b7b      	ldr	r3, [pc, #492]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	4a7a      	ldr	r2, [pc, #488]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6213      	str	r3, [r2, #32]
 8003b28:	e02d      	b.n	8003b86 <HAL_RCC_OscConfig+0x36e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x334>
 8003b32:	4b76      	ldr	r3, [pc, #472]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	4a75      	ldr	r2, [pc, #468]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003b38:	f023 0301 	bic.w	r3, r3, #1
 8003b3c:	6213      	str	r3, [r2, #32]
 8003b3e:	4b73      	ldr	r3, [pc, #460]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	4a72      	ldr	r2, [pc, #456]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003b44:	f023 0304 	bic.w	r3, r3, #4
 8003b48:	6213      	str	r3, [r2, #32]
 8003b4a:	e01c      	b.n	8003b86 <HAL_RCC_OscConfig+0x36e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d10c      	bne.n	8003b6e <HAL_RCC_OscConfig+0x356>
 8003b54:	4b6d      	ldr	r3, [pc, #436]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	4a6c      	ldr	r2, [pc, #432]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003b5a:	f043 0304 	orr.w	r3, r3, #4
 8003b5e:	6213      	str	r3, [r2, #32]
 8003b60:	4b6a      	ldr	r3, [pc, #424]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	4a69      	ldr	r2, [pc, #420]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6213      	str	r3, [r2, #32]
 8003b6c:	e00b      	b.n	8003b86 <HAL_RCC_OscConfig+0x36e>
 8003b6e:	4b67      	ldr	r3, [pc, #412]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	4a66      	ldr	r2, [pc, #408]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003b74:	f023 0301 	bic.w	r3, r3, #1
 8003b78:	6213      	str	r3, [r2, #32]
 8003b7a:	4b64      	ldr	r3, [pc, #400]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	4a63      	ldr	r2, [pc, #396]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003b80:	f023 0304 	bic.w	r3, r3, #4
 8003b84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d015      	beq.n	8003bba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8e:	f7fe f89b 	bl	8001cc8 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b94:	e00a      	b.n	8003bac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b96:	f7fe f897 	bl	8001cc8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e0ab      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bac:	4b57      	ldr	r3, [pc, #348]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0ee      	beq.n	8003b96 <HAL_RCC_OscConfig+0x37e>
 8003bb8:	e014      	b.n	8003be4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bba:	f7fe f885 	bl	8001cc8 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc0:	e00a      	b.n	8003bd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc2:	f7fe f881 	bl	8001cc8 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e095      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd8:	4b4c      	ldr	r3, [pc, #304]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1ee      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d105      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bea:	4b48      	ldr	r3, [pc, #288]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	4a47      	ldr	r2, [pc, #284]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 8081 	beq.w	8003d02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c00:	4b42      	ldr	r3, [pc, #264]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d061      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d146      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c14:	4b3f      	ldr	r3, [pc, #252]	; (8003d14 <HAL_RCC_OscConfig+0x4fc>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fe f855 	bl	8001cc8 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fe f851 	bl	8001cc8 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e067      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c34:	4b35      	ldr	r3, [pc, #212]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f0      	bne.n	8003c22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c48:	d108      	bne.n	8003c5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c4a:	4b30      	ldr	r3, [pc, #192]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	492d      	ldr	r1, [pc, #180]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c5c:	4b2b      	ldr	r3, [pc, #172]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a19      	ldr	r1, [r3, #32]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	4927      	ldr	r1, [pc, #156]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c74:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <HAL_RCC_OscConfig+0x4fc>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7a:	f7fe f825 	bl	8001cc8 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c82:	f7fe f821 	bl	8001cc8 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e037      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c94:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x46a>
 8003ca0:	e02f      	b.n	8003d02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca2:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <HAL_RCC_OscConfig+0x4fc>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7fe f80e 	bl	8001cc8 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fe f80a 	bl	8001cc8 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e020      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x498>
 8003cce:	e018      	b.n	8003d02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e013      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <HAL_RCC_OscConfig+0x4f4>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d106      	bne.n	8003cfe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	40007000 	.word	0x40007000
 8003d14:	42420060 	.word	0x42420060

08003d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0d0      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b6a      	ldr	r3, [pc, #424]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d910      	bls.n	8003d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b67      	ldr	r3, [pc, #412]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 0207 	bic.w	r2, r3, #7
 8003d42:	4965      	ldr	r1, [pc, #404]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b63      	ldr	r3, [pc, #396]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0b8      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d020      	beq.n	8003daa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d74:	4b59      	ldr	r3, [pc, #356]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4a58      	ldr	r2, [pc, #352]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d8c:	4b53      	ldr	r3, [pc, #332]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	4a52      	ldr	r2, [pc, #328]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d98:	4b50      	ldr	r3, [pc, #320]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	494d      	ldr	r1, [pc, #308]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d040      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4b47      	ldr	r3, [pc, #284]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d115      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e07f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd6:	4b41      	ldr	r3, [pc, #260]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e073      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de6:	4b3d      	ldr	r3, [pc, #244]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e06b      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df6:	4b39      	ldr	r3, [pc, #228]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f023 0203 	bic.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4936      	ldr	r1, [pc, #216]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e08:	f7fd ff5e 	bl	8001cc8 <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e10:	f7fd ff5a 	bl	8001cc8 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e053      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	4b2d      	ldr	r3, [pc, #180]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 020c 	and.w	r2, r3, #12
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d1eb      	bne.n	8003e10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e38:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d210      	bcs.n	8003e68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 0207 	bic.w	r2, r3, #7
 8003e4e:	4922      	ldr	r1, [pc, #136]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e032      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e74:	4b19      	ldr	r3, [pc, #100]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4916      	ldr	r1, [pc, #88]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e92:	4b12      	ldr	r3, [pc, #72]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	490e      	ldr	r1, [pc, #56]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ea6:	f000 f821 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8003eaa:	4601      	mov	r1, r0
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb8:	5cd3      	ldrb	r3, [r2, r3]
 8003eba:	fa21 f303 	lsr.w	r3, r1, r3
 8003ebe:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8003ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fd febc 	bl	8001c44 <HAL_InitTick>

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40022000 	.word	0x40022000
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	08005de4 	.word	0x08005de4
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	20000004 	.word	0x20000004

08003eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eec:	b490      	push	{r4, r7}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ef2:	4b2a      	ldr	r3, [pc, #168]	; (8003f9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ef4:	1d3c      	adds	r4, r7, #4
 8003ef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003efc:	4b28      	ldr	r3, [pc, #160]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	2300      	movs	r3, #0
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f16:	4b23      	ldr	r3, [pc, #140]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d002      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0x40>
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d003      	beq.n	8003f32 <HAL_RCC_GetSysClockFreq+0x46>
 8003f2a:	e02d      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f2c:	4b1e      	ldr	r3, [pc, #120]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f2e:	623b      	str	r3, [r7, #32]
      break;
 8003f30:	e02d      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	0c9b      	lsrs	r3, r3, #18
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f3e:	4413      	add	r3, r2
 8003f40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d013      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f50:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	0c5b      	lsrs	r3, r3, #17
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f5e:	4413      	add	r3, r2
 8003f60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	4a0f      	ldr	r2, [pc, #60]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f6a:	fb02 f203 	mul.w	r2, r2, r3
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
 8003f76:	e004      	b.n	8003f82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	4a0c      	ldr	r2, [pc, #48]	; (8003fac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f7c:	fb02 f303 	mul.w	r3, r2, r3
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	623b      	str	r3, [r7, #32]
      break;
 8003f86:	e002      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f88:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f8a:	623b      	str	r3, [r7, #32]
      break;
 8003f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3728      	adds	r7, #40	; 0x28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc90      	pop	{r4, r7}
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	08005dd0 	.word	0x08005dd0
 8003fa0:	08005de0 	.word	0x08005de0
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	007a1200 	.word	0x007a1200
 8003fac:	003d0900 	.word	0x003d0900

08003fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb4:	4b02      	ldr	r3, [pc, #8]	; (8003fc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr
 8003fc0:	20000000 	.word	0x20000000

08003fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fc8:	f7ff fff2 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8003fcc:	4601      	mov	r1, r0
 8003fce:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	4a03      	ldr	r2, [pc, #12]	; (8003fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fda:	5cd3      	ldrb	r3, [r2, r3]
 8003fdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	08005df4 	.word	0x08005df4

08003fec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <RCC_Delay+0x34>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a0a      	ldr	r2, [pc, #40]	; (8004024 <RCC_Delay+0x38>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	0a5b      	lsrs	r3, r3, #9
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004008:	bf00      	nop
  }
  while (Delay --);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1e5a      	subs	r2, r3, #1
 800400e:	60fa      	str	r2, [r7, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f9      	bne.n	8004008 <RCC_Delay+0x1c>
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000000 	.word	0x20000000
 8004024:	10624dd3 	.word	0x10624dd3

08004028 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d07d      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004044:	2300      	movs	r3, #0
 8004046:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004048:	4b4f      	ldr	r3, [pc, #316]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10d      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004054:	4b4c      	ldr	r3, [pc, #304]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	4a4b      	ldr	r2, [pc, #300]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800405a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405e:	61d3      	str	r3, [r2, #28]
 8004060:	4b49      	ldr	r3, [pc, #292]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406c:	2301      	movs	r3, #1
 800406e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004070:	4b46      	ldr	r3, [pc, #280]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004078:	2b00      	cmp	r3, #0
 800407a:	d118      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800407c:	4b43      	ldr	r3, [pc, #268]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a42      	ldr	r2, [pc, #264]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004086:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004088:	f7fd fe1e 	bl	8001cc8 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408e:	e008      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004090:	f7fd fe1a 	bl	8001cc8 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	; 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e06d      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a2:	4b3a      	ldr	r3, [pc, #232]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040ae:	4b36      	ldr	r3, [pc, #216]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d02e      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d027      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040cc:	4b2e      	ldr	r3, [pc, #184]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040d6:	4b2e      	ldr	r3, [pc, #184]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040d8:	2201      	movs	r2, #1
 80040da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040dc:	4b2c      	ldr	r3, [pc, #176]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040e2:	4a29      	ldr	r2, [pc, #164]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d014      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f2:	f7fd fde9 	bl	8001cc8 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f8:	e00a      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fa:	f7fd fde5 	bl	8001cc8 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	f241 3288 	movw	r2, #5000	; 0x1388
 8004108:	4293      	cmp	r3, r2
 800410a:	d901      	bls.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e036      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004110:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0ee      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800411c:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	4917      	ldr	r1, [pc, #92]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412a:	4313      	orrs	r3, r2
 800412c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800412e:	7dfb      	ldrb	r3, [r7, #23]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d105      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004134:	4b14      	ldr	r3, [pc, #80]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	4a13      	ldr	r2, [pc, #76]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800413e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800414c:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	490b      	ldr	r1, [pc, #44]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415a:	4313      	orrs	r3, r2
 800415c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800416a:	4b07      	ldr	r3, [pc, #28]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	4904      	ldr	r1, [pc, #16]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004178:	4313      	orrs	r3, r2
 800417a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000
 800418c:	40007000 	.word	0x40007000
 8004190:	42420440 	.word	0x42420440

08004194 <arm_rfft_32_fast_init_f32>:
 8004194:	b178      	cbz	r0, 80041b6 <arm_rfft_32_fast_init_f32+0x22>
 8004196:	2310      	movs	r3, #16
 8004198:	b430      	push	{r4, r5}
 800419a:	2520      	movs	r5, #32
 800419c:	2414      	movs	r4, #20
 800419e:	4907      	ldr	r1, [pc, #28]	; (80041bc <arm_rfft_32_fast_init_f32+0x28>)
 80041a0:	4a07      	ldr	r2, [pc, #28]	; (80041c0 <arm_rfft_32_fast_init_f32+0x2c>)
 80041a2:	8003      	strh	r3, [r0, #0]
 80041a4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <arm_rfft_32_fast_init_f32+0x30>)
 80041aa:	8205      	strh	r5, [r0, #16]
 80041ac:	8184      	strh	r4, [r0, #12]
 80041ae:	6143      	str	r3, [r0, #20]
 80041b0:	bc30      	pop	{r4, r5}
 80041b2:	2000      	movs	r0, #0
 80041b4:	4770      	bx	lr
 80041b6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ba:	4770      	bx	lr
 80041bc:	08006dac 	.word	0x08006dac
 80041c0:	0800b6e4 	.word	0x0800b6e4
 80041c4:	08014464 	.word	0x08014464

080041c8 <arm_rfft_64_fast_init_f32>:
 80041c8:	b178      	cbz	r0, 80041ea <arm_rfft_64_fast_init_f32+0x22>
 80041ca:	2320      	movs	r3, #32
 80041cc:	b430      	push	{r4, r5}
 80041ce:	2540      	movs	r5, #64	; 0x40
 80041d0:	2430      	movs	r4, #48	; 0x30
 80041d2:	4907      	ldr	r1, [pc, #28]	; (80041f0 <arm_rfft_64_fast_init_f32+0x28>)
 80041d4:	4a07      	ldr	r2, [pc, #28]	; (80041f4 <arm_rfft_64_fast_init_f32+0x2c>)
 80041d6:	8003      	strh	r3, [r0, #0]
 80041d8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <arm_rfft_64_fast_init_f32+0x30>)
 80041de:	8205      	strh	r5, [r0, #16]
 80041e0:	8184      	strh	r4, [r0, #12]
 80041e2:	6143      	str	r3, [r0, #20]
 80041e4:	bc30      	pop	{r4, r5}
 80041e6:	2000      	movs	r0, #0
 80041e8:	4770      	bx	lr
 80041ea:	f04f 30ff 	mov.w	r0, #4294967295
 80041ee:	4770      	bx	lr
 80041f0:	08008f04 	.word	0x08008f04
 80041f4:	0800ff64 	.word	0x0800ff64
 80041f8:	08018ce4 	.word	0x08018ce4

080041fc <arm_rfft_256_fast_init_f32>:
 80041fc:	b180      	cbz	r0, 8004220 <arm_rfft_256_fast_init_f32+0x24>
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	b430      	push	{r4, r5}
 8004202:	f44f 7580 	mov.w	r5, #256	; 0x100
 8004206:	24d0      	movs	r4, #208	; 0xd0
 8004208:	4907      	ldr	r1, [pc, #28]	; (8004228 <arm_rfft_256_fast_init_f32+0x2c>)
 800420a:	4a08      	ldr	r2, [pc, #32]	; (800422c <arm_rfft_256_fast_init_f32+0x30>)
 800420c:	8003      	strh	r3, [r0, #0]
 800420e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8004212:	4b07      	ldr	r3, [pc, #28]	; (8004230 <arm_rfft_256_fast_init_f32+0x34>)
 8004214:	8205      	strh	r5, [r0, #16]
 8004216:	8184      	strh	r4, [r0, #12]
 8004218:	6143      	str	r3, [r0, #20]
 800421a:	bc30      	pop	{r4, r5}
 800421c:	2000      	movs	r0, #0
 800421e:	4770      	bx	lr
 8004220:	f04f 30ff 	mov.w	r0, #4294967295
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	08006c0c 	.word	0x08006c0c
 800422c:	0800b2e4 	.word	0x0800b2e4
 8004230:	08014064 	.word	0x08014064

08004234 <arm_rfft_512_fast_init_f32>:
 8004234:	b190      	cbz	r0, 800425c <arm_rfft_512_fast_init_f32+0x28>
 8004236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800423a:	b430      	push	{r4, r5}
 800423c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8004240:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8004244:	4907      	ldr	r1, [pc, #28]	; (8004264 <arm_rfft_512_fast_init_f32+0x30>)
 8004246:	4a08      	ldr	r2, [pc, #32]	; (8004268 <arm_rfft_512_fast_init_f32+0x34>)
 8004248:	8003      	strh	r3, [r0, #0]
 800424a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <arm_rfft_512_fast_init_f32+0x38>)
 8004250:	8205      	strh	r5, [r0, #16]
 8004252:	8184      	strh	r4, [r0, #12]
 8004254:	6143      	str	r3, [r0, #20]
 8004256:	bc30      	pop	{r4, r5}
 8004258:	2000      	movs	r0, #0
 800425a:	4770      	bx	lr
 800425c:	f04f 30ff 	mov.w	r0, #4294967295
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	08008b94 	.word	0x08008b94
 8004268:	0800f764 	.word	0x0800f764
 800426c:	080184e4 	.word	0x080184e4

08004270 <arm_rfft_1024_fast_init_f32>:
 8004270:	b190      	cbz	r0, 8004298 <arm_rfft_1024_fast_init_f32+0x28>
 8004272:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004276:	b430      	push	{r4, r5}
 8004278:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800427c:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8004280:	4907      	ldr	r1, [pc, #28]	; (80042a0 <arm_rfft_1024_fast_init_f32+0x30>)
 8004282:	4a08      	ldr	r2, [pc, #32]	; (80042a4 <arm_rfft_1024_fast_init_f32+0x34>)
 8004284:	8003      	strh	r3, [r0, #0]
 8004286:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800428a:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <arm_rfft_1024_fast_init_f32+0x38>)
 800428c:	8205      	strh	r5, [r0, #16]
 800428e:	8184      	strh	r4, [r0, #12]
 8004290:	6143      	str	r3, [r0, #20]
 8004292:	bc30      	pop	{r4, r5}
 8004294:	2000      	movs	r0, #0
 8004296:	4770      	bx	lr
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	08008f64 	.word	0x08008f64
 80042a4:	08010064 	.word	0x08010064
 80042a8:	08011064 	.word	0x08011064

080042ac <arm_rfft_2048_fast_init_f32>:
 80042ac:	b190      	cbz	r0, 80042d4 <arm_rfft_2048_fast_init_f32+0x28>
 80042ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042b2:	b430      	push	{r4, r5}
 80042b4:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80042b8:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80042bc:	4907      	ldr	r1, [pc, #28]	; (80042dc <arm_rfft_2048_fast_init_f32+0x30>)
 80042be:	4a08      	ldr	r2, [pc, #32]	; (80042e0 <arm_rfft_2048_fast_init_f32+0x34>)
 80042c0:	8003      	strh	r3, [r0, #0]
 80042c2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80042c6:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <arm_rfft_2048_fast_init_f32+0x38>)
 80042c8:	8205      	strh	r5, [r0, #16]
 80042ca:	8184      	strh	r4, [r0, #12]
 80042cc:	6143      	str	r3, [r0, #20]
 80042ce:	bc30      	pop	{r4, r5}
 80042d0:	2000      	movs	r0, #0
 80042d2:	4770      	bx	lr
 80042d4:	f04f 30ff 	mov.w	r0, #4294967295
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	08005dfc 	.word	0x08005dfc
 80042e0:	080092e4 	.word	0x080092e4
 80042e4:	08012064 	.word	0x08012064

080042e8 <arm_rfft_4096_fast_init_f32>:
 80042e8:	b190      	cbz	r0, 8004310 <arm_rfft_4096_fast_init_f32+0x28>
 80042ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042ee:	b430      	push	{r4, r5}
 80042f0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80042f4:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80042f8:	4907      	ldr	r1, [pc, #28]	; (8004318 <arm_rfft_4096_fast_init_f32+0x30>)
 80042fa:	4a08      	ldr	r2, [pc, #32]	; (800431c <arm_rfft_4096_fast_init_f32+0x34>)
 80042fc:	8003      	strh	r3, [r0, #0]
 80042fe:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8004302:	4b07      	ldr	r3, [pc, #28]	; (8004320 <arm_rfft_4096_fast_init_f32+0x38>)
 8004304:	8205      	strh	r5, [r0, #16]
 8004306:	8184      	strh	r4, [r0, #12]
 8004308:	6143      	str	r3, [r0, #20]
 800430a:	bc30      	pop	{r4, r5}
 800430c:	2000      	movs	r0, #0
 800430e:	4770      	bx	lr
 8004310:	f04f 30ff 	mov.w	r0, #4294967295
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	08006dd4 	.word	0x08006dd4
 800431c:	0800b764 	.word	0x0800b764
 8004320:	080144e4 	.word	0x080144e4

08004324 <arm_rfft_fast_init_f32>:
 8004324:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004328:	d01f      	beq.n	800436a <arm_rfft_fast_init_f32+0x46>
 800432a:	d90b      	bls.n	8004344 <arm_rfft_fast_init_f32+0x20>
 800432c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004330:	d019      	beq.n	8004366 <arm_rfft_fast_init_f32+0x42>
 8004332:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004336:	d012      	beq.n	800435e <arm_rfft_fast_init_f32+0x3a>
 8004338:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800433c:	d00d      	beq.n	800435a <arm_rfft_fast_init_f32+0x36>
 800433e:	f04f 30ff 	mov.w	r0, #4294967295
 8004342:	4770      	bx	lr
 8004344:	2940      	cmp	r1, #64	; 0x40
 8004346:	d00c      	beq.n	8004362 <arm_rfft_fast_init_f32+0x3e>
 8004348:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800434c:	d003      	beq.n	8004356 <arm_rfft_fast_init_f32+0x32>
 800434e:	2920      	cmp	r1, #32
 8004350:	d1f5      	bne.n	800433e <arm_rfft_fast_init_f32+0x1a>
 8004352:	4b07      	ldr	r3, [pc, #28]	; (8004370 <arm_rfft_fast_init_f32+0x4c>)
 8004354:	4718      	bx	r3
 8004356:	4b07      	ldr	r3, [pc, #28]	; (8004374 <arm_rfft_fast_init_f32+0x50>)
 8004358:	4718      	bx	r3
 800435a:	4b07      	ldr	r3, [pc, #28]	; (8004378 <arm_rfft_fast_init_f32+0x54>)
 800435c:	4718      	bx	r3
 800435e:	4b07      	ldr	r3, [pc, #28]	; (800437c <arm_rfft_fast_init_f32+0x58>)
 8004360:	4718      	bx	r3
 8004362:	4b07      	ldr	r3, [pc, #28]	; (8004380 <arm_rfft_fast_init_f32+0x5c>)
 8004364:	e7f6      	b.n	8004354 <arm_rfft_fast_init_f32+0x30>
 8004366:	4b07      	ldr	r3, [pc, #28]	; (8004384 <arm_rfft_fast_init_f32+0x60>)
 8004368:	e7f4      	b.n	8004354 <arm_rfft_fast_init_f32+0x30>
 800436a:	4b07      	ldr	r3, [pc, #28]	; (8004388 <arm_rfft_fast_init_f32+0x64>)
 800436c:	e7f2      	b.n	8004354 <arm_rfft_fast_init_f32+0x30>
 800436e:	bf00      	nop
 8004370:	08004195 	.word	0x08004195
 8004374:	080041fd 	.word	0x080041fd
 8004378:	08004271 	.word	0x08004271
 800437c:	080042e9 	.word	0x080042e9
 8004380:	080041c9 	.word	0x080041c9
 8004384:	080042ad 	.word	0x080042ad
 8004388:	08004235 	.word	0x08004235

0800438c <stage_rfft_f32>:
 800438c:	4603      	mov	r3, r0
 800438e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004392:	460e      	mov	r6, r1
 8004394:	8805      	ldrh	r5, [r0, #0]
 8004396:	6809      	ldr	r1, [r1, #0]
 8004398:	b085      	sub	sp, #20
 800439a:	4614      	mov	r4, r2
 800439c:	4608      	mov	r0, r1
 800439e:	1e6a      	subs	r2, r5, #1
 80043a0:	9202      	str	r2, [sp, #8]
 80043a2:	695d      	ldr	r5, [r3, #20]
 80043a4:	f7fc faf6 	bl	8000994 <__addsf3>
 80043a8:	6871      	ldr	r1, [r6, #4]
 80043aa:	4607      	mov	r7, r0
 80043ac:	4608      	mov	r0, r1
 80043ae:	f7fc faf1 	bl	8000994 <__addsf3>
 80043b2:	4601      	mov	r1, r0
 80043b4:	4680      	mov	r8, r0
 80043b6:	4638      	mov	r0, r7
 80043b8:	f7fc faec 	bl	8000994 <__addsf3>
 80043bc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80043c0:	f7fc fbf0 	bl	8000ba4 <__aeabi_fmul>
 80043c4:	4641      	mov	r1, r8
 80043c6:	6020      	str	r0, [r4, #0]
 80043c8:	4638      	mov	r0, r7
 80043ca:	f7fc fae1 	bl	8000990 <__aeabi_fsub>
 80043ce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80043d2:	f7fc fbe7 	bl	8000ba4 <__aeabi_fmul>
 80043d6:	9a02      	ldr	r2, [sp, #8]
 80043d8:	6060      	str	r0, [r4, #4]
 80043da:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 80043de:	3410      	adds	r4, #16
 80043e0:	f106 0210 	add.w	r2, r6, #16
 80043e4:	3b08      	subs	r3, #8
 80043e6:	461e      	mov	r6, r3
 80043e8:	4617      	mov	r7, r2
 80043ea:	46a1      	mov	r9, r4
 80043ec:	3510      	adds	r5, #16
 80043ee:	f8d6 8008 	ldr.w	r8, [r6, #8]
 80043f2:	f857 ac08 	ldr.w	sl, [r7, #-8]
 80043f6:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80043fa:	4651      	mov	r1, sl
 80043fc:	4640      	mov	r0, r8
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	f7fc fac6 	bl	8000990 <__aeabi_fsub>
 8004404:	68f4      	ldr	r4, [r6, #12]
 8004406:	4683      	mov	fp, r0
 8004408:	9900      	ldr	r1, [sp, #0]
 800440a:	4620      	mov	r0, r4
 800440c:	f7fc fac2 	bl	8000994 <__addsf3>
 8004410:	4651      	mov	r1, sl
 8004412:	9001      	str	r0, [sp, #4]
 8004414:	4640      	mov	r0, r8
 8004416:	f7fc fabd 	bl	8000994 <__addsf3>
 800441a:	f855 8c08 	ldr.w	r8, [r5, #-8]
 800441e:	4682      	mov	sl, r0
 8004420:	4659      	mov	r1, fp
 8004422:	4640      	mov	r0, r8
 8004424:	f7fc fbbe 	bl	8000ba4 <__aeabi_fmul>
 8004428:	4601      	mov	r1, r0
 800442a:	4650      	mov	r0, sl
 800442c:	f7fc fab2 	bl	8000994 <__addsf3>
 8004430:	f855 ac04 	ldr.w	sl, [r5, #-4]
 8004434:	9003      	str	r0, [sp, #12]
 8004436:	9901      	ldr	r1, [sp, #4]
 8004438:	4650      	mov	r0, sl
 800443a:	f7fc fbb3 	bl	8000ba4 <__aeabi_fmul>
 800443e:	9a03      	ldr	r2, [sp, #12]
 8004440:	4601      	mov	r1, r0
 8004442:	4610      	mov	r0, r2
 8004444:	f7fc faa6 	bl	8000994 <__addsf3>
 8004448:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800444c:	f7fc fbaa 	bl	8000ba4 <__aeabi_fmul>
 8004450:	4621      	mov	r1, r4
 8004452:	f849 0c08 	str.w	r0, [r9, #-8]
 8004456:	9800      	ldr	r0, [sp, #0]
 8004458:	f7fc fa9a 	bl	8000990 <__aeabi_fsub>
 800445c:	4659      	mov	r1, fp
 800445e:	4604      	mov	r4, r0
 8004460:	4650      	mov	r0, sl
 8004462:	f7fc fb9f 	bl	8000ba4 <__aeabi_fmul>
 8004466:	4601      	mov	r1, r0
 8004468:	4620      	mov	r0, r4
 800446a:	f7fc fa93 	bl	8000994 <__addsf3>
 800446e:	9901      	ldr	r1, [sp, #4]
 8004470:	4604      	mov	r4, r0
 8004472:	4640      	mov	r0, r8
 8004474:	f7fc fb96 	bl	8000ba4 <__aeabi_fmul>
 8004478:	4601      	mov	r1, r0
 800447a:	4620      	mov	r0, r4
 800447c:	f7fc fa88 	bl	8000990 <__aeabi_fsub>
 8004480:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004484:	f7fc fb8e 	bl	8000ba4 <__aeabi_fmul>
 8004488:	9b02      	ldr	r3, [sp, #8]
 800448a:	f849 0c04 	str.w	r0, [r9, #-4]
 800448e:	3b01      	subs	r3, #1
 8004490:	f1a6 0608 	sub.w	r6, r6, #8
 8004494:	f107 0708 	add.w	r7, r7, #8
 8004498:	f105 0508 	add.w	r5, r5, #8
 800449c:	f109 0908 	add.w	r9, r9, #8
 80044a0:	9302      	str	r3, [sp, #8]
 80044a2:	d1a4      	bne.n	80043ee <stage_rfft_f32+0x62>
 80044a4:	b005      	add	sp, #20
 80044a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044aa:	bf00      	nop

080044ac <merge_rfft_f32>:
 80044ac:	4603      	mov	r3, r0
 80044ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b2:	680f      	ldr	r7, [r1, #0]
 80044b4:	8805      	ldrh	r5, [r0, #0]
 80044b6:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80044ba:	b085      	sub	sp, #20
 80044bc:	4614      	mov	r4, r2
 80044be:	460e      	mov	r6, r1
 80044c0:	1e6a      	subs	r2, r5, #1
 80044c2:	4641      	mov	r1, r8
 80044c4:	4638      	mov	r0, r7
 80044c6:	695d      	ldr	r5, [r3, #20]
 80044c8:	9202      	str	r2, [sp, #8]
 80044ca:	f7fc fa63 	bl	8000994 <__addsf3>
 80044ce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80044d2:	f7fc fb67 	bl	8000ba4 <__aeabi_fmul>
 80044d6:	4641      	mov	r1, r8
 80044d8:	6020      	str	r0, [r4, #0]
 80044da:	4638      	mov	r0, r7
 80044dc:	f7fc fa58 	bl	8000990 <__aeabi_fsub>
 80044e0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80044e4:	f7fc fb5e 	bl	8000ba4 <__aeabi_fmul>
 80044e8:	9a02      	ldr	r2, [sp, #8]
 80044ea:	6060      	str	r0, [r4, #4]
 80044ec:	2a00      	cmp	r2, #0
 80044ee:	d064      	beq.n	80045ba <merge_rfft_f32+0x10e>
 80044f0:	00d3      	lsls	r3, r2, #3
 80044f2:	3b08      	subs	r3, #8
 80044f4:	f106 0210 	add.w	r2, r6, #16
 80044f8:	4433      	add	r3, r6
 80044fa:	3410      	adds	r4, #16
 80044fc:	461e      	mov	r6, r3
 80044fe:	4617      	mov	r7, r2
 8004500:	46a1      	mov	r9, r4
 8004502:	3510      	adds	r5, #16
 8004504:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8004508:	f857 ac08 	ldr.w	sl, [r7, #-8]
 800450c:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8004510:	4641      	mov	r1, r8
 8004512:	4650      	mov	r0, sl
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	f7fc fa3b 	bl	8000990 <__aeabi_fsub>
 800451a:	68f4      	ldr	r4, [r6, #12]
 800451c:	4683      	mov	fp, r0
 800451e:	9900      	ldr	r1, [sp, #0]
 8004520:	4620      	mov	r0, r4
 8004522:	f7fc fa37 	bl	8000994 <__addsf3>
 8004526:	4651      	mov	r1, sl
 8004528:	9001      	str	r0, [sp, #4]
 800452a:	4640      	mov	r0, r8
 800452c:	f7fc fa32 	bl	8000994 <__addsf3>
 8004530:	f855 8c08 	ldr.w	r8, [r5, #-8]
 8004534:	4682      	mov	sl, r0
 8004536:	4659      	mov	r1, fp
 8004538:	4640      	mov	r0, r8
 800453a:	f7fc fb33 	bl	8000ba4 <__aeabi_fmul>
 800453e:	4601      	mov	r1, r0
 8004540:	4650      	mov	r0, sl
 8004542:	f7fc fa25 	bl	8000990 <__aeabi_fsub>
 8004546:	f855 ac04 	ldr.w	sl, [r5, #-4]
 800454a:	9003      	str	r0, [sp, #12]
 800454c:	9901      	ldr	r1, [sp, #4]
 800454e:	4650      	mov	r0, sl
 8004550:	f7fc fb28 	bl	8000ba4 <__aeabi_fmul>
 8004554:	9a03      	ldr	r2, [sp, #12]
 8004556:	4601      	mov	r1, r0
 8004558:	4610      	mov	r0, r2
 800455a:	f7fc fa19 	bl	8000990 <__aeabi_fsub>
 800455e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004562:	f7fc fb1f 	bl	8000ba4 <__aeabi_fmul>
 8004566:	4621      	mov	r1, r4
 8004568:	f849 0c08 	str.w	r0, [r9, #-8]
 800456c:	9800      	ldr	r0, [sp, #0]
 800456e:	f7fc fa0f 	bl	8000990 <__aeabi_fsub>
 8004572:	4659      	mov	r1, fp
 8004574:	4604      	mov	r4, r0
 8004576:	4650      	mov	r0, sl
 8004578:	f7fc fb14 	bl	8000ba4 <__aeabi_fmul>
 800457c:	4601      	mov	r1, r0
 800457e:	4620      	mov	r0, r4
 8004580:	f7fc fa08 	bl	8000994 <__addsf3>
 8004584:	9901      	ldr	r1, [sp, #4]
 8004586:	4604      	mov	r4, r0
 8004588:	4640      	mov	r0, r8
 800458a:	f7fc fb0b 	bl	8000ba4 <__aeabi_fmul>
 800458e:	4601      	mov	r1, r0
 8004590:	4620      	mov	r0, r4
 8004592:	f7fc f9fd 	bl	8000990 <__aeabi_fsub>
 8004596:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800459a:	f7fc fb03 	bl	8000ba4 <__aeabi_fmul>
 800459e:	9b02      	ldr	r3, [sp, #8]
 80045a0:	f849 0c04 	str.w	r0, [r9, #-4]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	f1a6 0608 	sub.w	r6, r6, #8
 80045aa:	f107 0708 	add.w	r7, r7, #8
 80045ae:	f105 0508 	add.w	r5, r5, #8
 80045b2:	f109 0908 	add.w	r9, r9, #8
 80045b6:	9302      	str	r3, [sp, #8]
 80045b8:	d1a4      	bne.n	8004504 <merge_rfft_f32+0x58>
 80045ba:	b005      	add	sp, #20
 80045bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080045c0 <arm_rfft_fast_f32>:
 80045c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c4:	8a05      	ldrh	r5, [r0, #16]
 80045c6:	4604      	mov	r4, r0
 80045c8:	086d      	lsrs	r5, r5, #1
 80045ca:	8005      	strh	r5, [r0, #0]
 80045cc:	4616      	mov	r6, r2
 80045ce:	461d      	mov	r5, r3
 80045d0:	b14b      	cbz	r3, 80045e6 <arm_rfft_fast_f32+0x26>
 80045d2:	f7ff ff6b 	bl	80044ac <merge_rfft_f32>
 80045d6:	462a      	mov	r2, r5
 80045d8:	4631      	mov	r1, r6
 80045da:	4620      	mov	r0, r4
 80045dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045e0:	2301      	movs	r3, #1
 80045e2:	f000 bcfd 	b.w	8004fe0 <arm_cfft_f32>
 80045e6:	460f      	mov	r7, r1
 80045e8:	461a      	mov	r2, r3
 80045ea:	2301      	movs	r3, #1
 80045ec:	f000 fcf8 	bl	8004fe0 <arm_cfft_f32>
 80045f0:	4632      	mov	r2, r6
 80045f2:	4639      	mov	r1, r7
 80045f4:	4620      	mov	r0, r4
 80045f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045fa:	f7ff bec7 	b.w	800438c <stage_rfft_f32>
 80045fe:	bf00      	nop

08004600 <arm_cfft_radix8by2_f32>:
 8004600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004604:	460c      	mov	r4, r1
 8004606:	8803      	ldrh	r3, [r0, #0]
 8004608:	b093      	sub	sp, #76	; 0x4c
 800460a:	900e      	str	r0, [sp, #56]	; 0x38
 800460c:	6842      	ldr	r2, [r0, #4]
 800460e:	0858      	lsrs	r0, r3, #1
 8004610:	9111      	str	r1, [sp, #68]	; 0x44
 8004612:	9010      	str	r0, [sp, #64]	; 0x40
 8004614:	0081      	lsls	r1, r0, #2
 8004616:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 800461a:	08db      	lsrs	r3, r3, #3
 800461c:	900f      	str	r0, [sp, #60]	; 0x3c
 800461e:	f000 8131 	beq.w	8004884 <arm_cfft_radix8by2_f32+0x284>
 8004622:	3110      	adds	r1, #16
 8004624:	1847      	adds	r7, r0, r1
 8004626:	46bb      	mov	fp, r7
 8004628:	f104 0610 	add.w	r6, r4, #16
 800462c:	3210      	adds	r2, #16
 800462e:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8004632:	9200      	str	r2, [sp, #0]
 8004634:	eb04 0801 	add.w	r8, r4, r1
 8004638:	930d      	str	r3, [sp, #52]	; 0x34
 800463a:	f100 0910 	add.w	r9, r0, #16
 800463e:	f859 2c10 	ldr.w	r2, [r9, #-16]
 8004642:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8004646:	4611      	mov	r1, r2
 8004648:	4618      	mov	r0, r3
 800464a:	930c      	str	r3, [sp, #48]	; 0x30
 800464c:	9206      	str	r2, [sp, #24]
 800464e:	f7fc f9a1 	bl	8000994 <__addsf3>
 8004652:	f858 1c0c 	ldr.w	r1, [r8, #-12]
 8004656:	f858 2c10 	ldr.w	r2, [r8, #-16]
 800465a:	f858 cc04 	ldr.w	ip, [r8, #-4]
 800465e:	f859 3c0c 	ldr.w	r3, [r9, #-12]
 8004662:	f856 ac0c 	ldr.w	sl, [r6, #-12]
 8004666:	910a      	str	r1, [sp, #40]	; 0x28
 8004668:	f85b 1c08 	ldr.w	r1, [fp, #-8]
 800466c:	f85b ec10 	ldr.w	lr, [fp, #-16]
 8004670:	f858 7c08 	ldr.w	r7, [r8, #-8]
 8004674:	9209      	str	r2, [sp, #36]	; 0x24
 8004676:	f8cd c008 	str.w	ip, [sp, #8]
 800467a:	f85b 2c0c 	ldr.w	r2, [fp, #-12]
 800467e:	f85b cc04 	ldr.w	ip, [fp, #-4]
 8004682:	f859 4c08 	ldr.w	r4, [r9, #-8]
 8004686:	f859 5c04 	ldr.w	r5, [r9, #-4]
 800468a:	9104      	str	r1, [sp, #16]
 800468c:	f846 0c10 	str.w	r0, [r6, #-16]
 8004690:	4619      	mov	r1, r3
 8004692:	4650      	mov	r0, sl
 8004694:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8004698:	f8cd c014 	str.w	ip, [sp, #20]
 800469c:	9203      	str	r2, [sp, #12]
 800469e:	9307      	str	r3, [sp, #28]
 80046a0:	9701      	str	r7, [sp, #4]
 80046a2:	f7fc f977 	bl	8000994 <__addsf3>
 80046a6:	f856 7c08 	ldr.w	r7, [r6, #-8]
 80046aa:	f846 0c0c 	str.w	r0, [r6, #-12]
 80046ae:	4621      	mov	r1, r4
 80046b0:	4638      	mov	r0, r7
 80046b2:	9408      	str	r4, [sp, #32]
 80046b4:	f7fc f96e 	bl	8000994 <__addsf3>
 80046b8:	f856 4c04 	ldr.w	r4, [r6, #-4]
 80046bc:	f846 0c08 	str.w	r0, [r6, #-8]
 80046c0:	4629      	mov	r1, r5
 80046c2:	4620      	mov	r0, r4
 80046c4:	f7fc f966 	bl	8000994 <__addsf3>
 80046c8:	9a06      	ldr	r2, [sp, #24]
 80046ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046cc:	4611      	mov	r1, r2
 80046ce:	f846 0c04 	str.w	r0, [r6, #-4]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fc f95c 	bl	8000990 <__aeabi_fsub>
 80046d8:	9907      	ldr	r1, [sp, #28]
 80046da:	9006      	str	r0, [sp, #24]
 80046dc:	4650      	mov	r0, sl
 80046de:	f7fc f957 	bl	8000990 <__aeabi_fsub>
 80046e2:	9908      	ldr	r1, [sp, #32]
 80046e4:	4682      	mov	sl, r0
 80046e6:	4638      	mov	r0, r7
 80046e8:	f7fc f952 	bl	8000990 <__aeabi_fsub>
 80046ec:	4629      	mov	r1, r5
 80046ee:	9007      	str	r0, [sp, #28]
 80046f0:	4620      	mov	r0, r4
 80046f2:	f7fc f94d 	bl	8000990 <__aeabi_fsub>
 80046f6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80046f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80046fa:	4639      	mov	r1, r7
 80046fc:	9008      	str	r0, [sp, #32]
 80046fe:	4620      	mov	r0, r4
 8004700:	f7fc f948 	bl	8000994 <__addsf3>
 8004704:	9903      	ldr	r1, [sp, #12]
 8004706:	f848 0c10 	str.w	r0, [r8, #-16]
 800470a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800470c:	3610      	adds	r6, #16
 800470e:	4628      	mov	r0, r5
 8004710:	f7fc f940 	bl	8000994 <__addsf3>
 8004714:	9904      	ldr	r1, [sp, #16]
 8004716:	f848 0c0c 	str.w	r0, [r8, #-12]
 800471a:	9801      	ldr	r0, [sp, #4]
 800471c:	f7fc f93a 	bl	8000994 <__addsf3>
 8004720:	9905      	ldr	r1, [sp, #20]
 8004722:	f848 0c08 	str.w	r0, [r8, #-8]
 8004726:	9802      	ldr	r0, [sp, #8]
 8004728:	f7fc f934 	bl	8000994 <__addsf3>
 800472c:	4621      	mov	r1, r4
 800472e:	f848 0c04 	str.w	r0, [r8, #-4]
 8004732:	4638      	mov	r0, r7
 8004734:	f7fc f92c 	bl	8000990 <__aeabi_fsub>
 8004738:	4629      	mov	r1, r5
 800473a:	4607      	mov	r7, r0
 800473c:	9803      	ldr	r0, [sp, #12]
 800473e:	f7fc f927 	bl	8000990 <__aeabi_fsub>
 8004742:	9901      	ldr	r1, [sp, #4]
 8004744:	9003      	str	r0, [sp, #12]
 8004746:	9804      	ldr	r0, [sp, #16]
 8004748:	f7fc f922 	bl	8000990 <__aeabi_fsub>
 800474c:	9902      	ldr	r1, [sp, #8]
 800474e:	9001      	str	r0, [sp, #4]
 8004750:	9805      	ldr	r0, [sp, #20]
 8004752:	f7fc f91d 	bl	8000990 <__aeabi_fsub>
 8004756:	9b00      	ldr	r3, [sp, #0]
 8004758:	9002      	str	r0, [sp, #8]
 800475a:	f853 4c10 	ldr.w	r4, [r3, #-16]
 800475e:	9806      	ldr	r0, [sp, #24]
 8004760:	4621      	mov	r1, r4
 8004762:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8004766:	f7fc fa1d 	bl	8000ba4 <__aeabi_fmul>
 800476a:	4629      	mov	r1, r5
 800476c:	9004      	str	r0, [sp, #16]
 800476e:	4650      	mov	r0, sl
 8004770:	f7fc fa18 	bl	8000ba4 <__aeabi_fmul>
 8004774:	9b04      	ldr	r3, [sp, #16]
 8004776:	4601      	mov	r1, r0
 8004778:	4618      	mov	r0, r3
 800477a:	f7fc f90b 	bl	8000994 <__addsf3>
 800477e:	4621      	mov	r1, r4
 8004780:	f849 0c10 	str.w	r0, [r9, #-16]
 8004784:	4650      	mov	r0, sl
 8004786:	f7fc fa0d 	bl	8000ba4 <__aeabi_fmul>
 800478a:	4629      	mov	r1, r5
 800478c:	4682      	mov	sl, r0
 800478e:	9806      	ldr	r0, [sp, #24]
 8004790:	f7fc fa08 	bl	8000ba4 <__aeabi_fmul>
 8004794:	4601      	mov	r1, r0
 8004796:	4650      	mov	r0, sl
 8004798:	f7fc f8fa 	bl	8000990 <__aeabi_fsub>
 800479c:	4629      	mov	r1, r5
 800479e:	f849 0c0c 	str.w	r0, [r9, #-12]
 80047a2:	4638      	mov	r0, r7
 80047a4:	f7fc f9fe 	bl	8000ba4 <__aeabi_fmul>
 80047a8:	4621      	mov	r1, r4
 80047aa:	4682      	mov	sl, r0
 80047ac:	9803      	ldr	r0, [sp, #12]
 80047ae:	f7fc f9f9 	bl	8000ba4 <__aeabi_fmul>
 80047b2:	4601      	mov	r1, r0
 80047b4:	4650      	mov	r0, sl
 80047b6:	f7fc f8eb 	bl	8000990 <__aeabi_fsub>
 80047ba:	4629      	mov	r1, r5
 80047bc:	f84b 0c10 	str.w	r0, [fp, #-16]
 80047c0:	9803      	ldr	r0, [sp, #12]
 80047c2:	f7fc f9ef 	bl	8000ba4 <__aeabi_fmul>
 80047c6:	4621      	mov	r1, r4
 80047c8:	4605      	mov	r5, r0
 80047ca:	4638      	mov	r0, r7
 80047cc:	f7fc f9ea 	bl	8000ba4 <__aeabi_fmul>
 80047d0:	4601      	mov	r1, r0
 80047d2:	4628      	mov	r0, r5
 80047d4:	f7fc f8de 	bl	8000994 <__addsf3>
 80047d8:	9b00      	ldr	r3, [sp, #0]
 80047da:	f84b 0c0c 	str.w	r0, [fp, #-12]
 80047de:	f853 4c08 	ldr.w	r4, [r3, #-8]
 80047e2:	9807      	ldr	r0, [sp, #28]
 80047e4:	4621      	mov	r1, r4
 80047e6:	f853 5c04 	ldr.w	r5, [r3, #-4]
 80047ea:	f7fc f9db 	bl	8000ba4 <__aeabi_fmul>
 80047ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80047f2:	4607      	mov	r7, r0
 80047f4:	4629      	mov	r1, r5
 80047f6:	4650      	mov	r0, sl
 80047f8:	f7fc f9d4 	bl	8000ba4 <__aeabi_fmul>
 80047fc:	4601      	mov	r1, r0
 80047fe:	4638      	mov	r0, r7
 8004800:	f7fc f8c8 	bl	8000994 <__addsf3>
 8004804:	4621      	mov	r1, r4
 8004806:	f849 0c08 	str.w	r0, [r9, #-8]
 800480a:	4650      	mov	r0, sl
 800480c:	f7fc f9ca 	bl	8000ba4 <__aeabi_fmul>
 8004810:	4629      	mov	r1, r5
 8004812:	4607      	mov	r7, r0
 8004814:	9807      	ldr	r0, [sp, #28]
 8004816:	f7fc f9c5 	bl	8000ba4 <__aeabi_fmul>
 800481a:	4601      	mov	r1, r0
 800481c:	4638      	mov	r0, r7
 800481e:	f7fc f8b7 	bl	8000990 <__aeabi_fsub>
 8004822:	4629      	mov	r1, r5
 8004824:	f849 0c04 	str.w	r0, [r9, #-4]
 8004828:	9801      	ldr	r0, [sp, #4]
 800482a:	f7fc f9bb 	bl	8000ba4 <__aeabi_fmul>
 800482e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8004832:	4607      	mov	r7, r0
 8004834:	4621      	mov	r1, r4
 8004836:	4650      	mov	r0, sl
 8004838:	f7fc f9b4 	bl	8000ba4 <__aeabi_fmul>
 800483c:	4601      	mov	r1, r0
 800483e:	4638      	mov	r0, r7
 8004840:	f7fc f8a6 	bl	8000990 <__aeabi_fsub>
 8004844:	4629      	mov	r1, r5
 8004846:	f84b 0c08 	str.w	r0, [fp, #-8]
 800484a:	4650      	mov	r0, sl
 800484c:	f7fc f9aa 	bl	8000ba4 <__aeabi_fmul>
 8004850:	4621      	mov	r1, r4
 8004852:	4605      	mov	r5, r0
 8004854:	9801      	ldr	r0, [sp, #4]
 8004856:	f7fc f9a5 	bl	8000ba4 <__aeabi_fmul>
 800485a:	4601      	mov	r1, r0
 800485c:	4628      	mov	r0, r5
 800485e:	f7fc f899 	bl	8000994 <__addsf3>
 8004862:	9b00      	ldr	r3, [sp, #0]
 8004864:	f84b 0c04 	str.w	r0, [fp, #-4]
 8004868:	3310      	adds	r3, #16
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800486e:	f108 0810 	add.w	r8, r8, #16
 8004872:	429e      	cmp	r6, r3
 8004874:	f109 0910 	add.w	r9, r9, #16
 8004878:	f10b 0b10 	add.w	fp, fp, #16
 800487c:	f47f aedf 	bne.w	800463e <arm_cfft_radix8by2_f32+0x3e>
 8004880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	f8bd 4040 	ldrh.w	r4, [sp, #64]	; 0x40
 8004888:	9811      	ldr	r0, [sp, #68]	; 0x44
 800488a:	4621      	mov	r1, r4
 800488c:	2302      	movs	r3, #2
 800488e:	f000 fd09 	bl	80052a4 <arm_radix8_butterfly_f32>
 8004892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004894:	4621      	mov	r1, r4
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	2302      	movs	r3, #2
 800489a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800489c:	b013      	add	sp, #76	; 0x4c
 800489e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a2:	f000 bcff 	b.w	80052a4 <arm_radix8_butterfly_f32>
 80048a6:	bf00      	nop

080048a8 <arm_cfft_radix8by4_f32>:
 80048a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ac:	8804      	ldrh	r4, [r0, #0]
 80048ae:	680d      	ldr	r5, [r1, #0]
 80048b0:	0864      	lsrs	r4, r4, #1
 80048b2:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 80048b6:	eb01 020a 	add.w	r2, r1, sl
 80048ba:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
 80048be:	b0a7      	sub	sp, #156	; 0x9c
 80048c0:	9023      	str	r0, [sp, #140]	; 0x8c
 80048c2:	9118      	str	r1, [sp, #96]	; 0x60
 80048c4:	4628      	mov	r0, r5
 80048c6:	4631      	mov	r1, r6
 80048c8:	4617      	mov	r7, r2
 80048ca:	f7fc f863 	bl	8000994 <__addsf3>
 80048ce:	4631      	mov	r1, r6
 80048d0:	4683      	mov	fp, r0
 80048d2:	4628      	mov	r0, r5
 80048d4:	9719      	str	r7, [sp, #100]	; 0x64
 80048d6:	f7fc f85b 	bl	8000990 <__aeabi_fsub>
 80048da:	eb07 050a 	add.w	r5, r7, sl
 80048de:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80048e0:	686e      	ldr	r6, [r5, #4]
 80048e2:	951a      	str	r5, [sp, #104]	; 0x68
 80048e4:	687d      	ldr	r5, [r7, #4]
 80048e6:	4631      	mov	r1, r6
 80048e8:	9001      	str	r0, [sp, #4]
 80048ea:	4628      	mov	r0, r5
 80048ec:	f7fc f852 	bl	8000994 <__addsf3>
 80048f0:	4631      	mov	r1, r6
 80048f2:	9002      	str	r0, [sp, #8]
 80048f4:	4628      	mov	r0, r5
 80048f6:	f7fc f84b 	bl	8000990 <__aeabi_fsub>
 80048fa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80048fc:	9718      	str	r7, [sp, #96]	; 0x60
 80048fe:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
 8004902:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 8004906:	9003      	str	r0, [sp, #12]
 8004908:	4659      	mov	r1, fp
 800490a:	4638      	mov	r0, r7
 800490c:	f7fc f842 	bl	8000994 <__addsf3>
 8004910:	4631      	mov	r1, r6
 8004912:	f7fc f83f 	bl	8000994 <__addsf3>
 8004916:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004918:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800491a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800491c:	eb05 0c0a 	add.w	ip, r5, sl
 8004920:	f8dc 8004 	ldr.w	r8, [ip, #4]
 8004924:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8004928:	951a      	str	r5, [sp, #104]	; 0x68
 800492a:	685d      	ldr	r5, [r3, #4]
 800492c:	f841 0b08 	str.w	r0, [r1], #8
 8004930:	911c      	str	r1, [sp, #112]	; 0x70
 8004932:	9802      	ldr	r0, [sp, #8]
 8004934:	6851      	ldr	r1, [r2, #4]
 8004936:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800493a:	f7fc f82b 	bl	8000994 <__addsf3>
 800493e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004940:	6851      	ldr	r1, [r2, #4]
 8004942:	f7fc f827 	bl	8000994 <__addsf3>
 8004946:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004948:	9901      	ldr	r1, [sp, #4]
 800494a:	6050      	str	r0, [r2, #4]
 800494c:	4648      	mov	r0, r9
 800494e:	f7fc f821 	bl	8000994 <__addsf3>
 8004952:	4641      	mov	r1, r8
 8004954:	f7fc f81c 	bl	8000990 <__aeabi_fsub>
 8004958:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800495a:	4639      	mov	r1, r7
 800495c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8004960:	9803      	ldr	r0, [sp, #12]
 8004962:	f7fc f815 	bl	8000990 <__aeabi_fsub>
 8004966:	4631      	mov	r1, r6
 8004968:	f7fc f814 	bl	8000994 <__addsf3>
 800496c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800496e:	4639      	mov	r1, r7
 8004970:	6058      	str	r0, [r3, #4]
 8004972:	4658      	mov	r0, fp
 8004974:	f7fc f80c 	bl	8000990 <__aeabi_fsub>
 8004978:	4631      	mov	r1, r6
 800497a:	f7fc f809 	bl	8000990 <__aeabi_fsub>
 800497e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004980:	4649      	mov	r1, r9
 8004982:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004986:	9802      	ldr	r0, [sp, #8]
 8004988:	f7fc f802 	bl	8000990 <__aeabi_fsub>
 800498c:	4641      	mov	r1, r8
 800498e:	f7fb ffff 	bl	8000990 <__aeabi_fsub>
 8004992:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004994:	4649      	mov	r1, r9
 8004996:	6050      	str	r0, [r2, #4]
 8004998:	9801      	ldr	r0, [sp, #4]
 800499a:	f7fb fff9 	bl	8000990 <__aeabi_fsub>
 800499e:	4641      	mov	r1, r8
 80049a0:	f7fb fff8 	bl	8000994 <__addsf3>
 80049a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80049a6:	9903      	ldr	r1, [sp, #12]
 80049a8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80049ac:	4638      	mov	r0, r7
 80049ae:	f7fb fff1 	bl	8000994 <__addsf3>
 80049b2:	4631      	mov	r1, r6
 80049b4:	f7fb ffec 	bl	8000990 <__aeabi_fsub>
 80049b8:	0866      	lsrs	r6, r4, #1
 80049ba:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80049bc:	1eb3      	subs	r3, r6, #2
 80049be:	9624      	str	r6, [sp, #144]	; 0x90
 80049c0:	4626      	mov	r6, r4
 80049c2:	6060      	str	r0, [r4, #4]
 80049c4:	981a      	ldr	r0, [sp, #104]	; 0x68
 80049c6:	3608      	adds	r6, #8
 80049c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80049ca:	961b      	str	r6, [sp, #108]	; 0x6c
 80049cc:	f100 0608 	add.w	r6, r0, #8
 80049d0:	961d      	str	r6, [sp, #116]	; 0x74
 80049d2:	4616      	mov	r6, r2
 80049d4:	3608      	adds	r6, #8
 80049d6:	961e      	str	r6, [sp, #120]	; 0x78
 80049d8:	f105 0608 	add.w	r6, r5, #8
 80049dc:	9621      	str	r6, [sp, #132]	; 0x84
 80049de:	f105 0718 	add.w	r7, r5, #24
 80049e2:	f105 0610 	add.w	r6, r5, #16
 80049e6:	085b      	lsrs	r3, r3, #1
 80049e8:	9622      	str	r6, [sp, #136]	; 0x88
 80049ea:	9720      	str	r7, [sp, #128]	; 0x80
 80049ec:	9325      	str	r3, [sp, #148]	; 0x94
 80049ee:	f000 820c 	beq.w	8004e0a <arm_cfft_radix8by4_f32+0x562>
 80049f2:	9311      	str	r3, [sp, #68]	; 0x44
 80049f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80049f6:	f1aa 030c 	sub.w	r3, sl, #12
 80049fa:	18e3      	adds	r3, r4, r3
 80049fc:	9306      	str	r3, [sp, #24]
 80049fe:	f101 0310 	add.w	r3, r1, #16
 8004a02:	9305      	str	r3, [sp, #20]
 8004a04:	f1a2 030c 	sub.w	r3, r2, #12
 8004a08:	9304      	str	r3, [sp, #16]
 8004a0a:	f105 0320 	add.w	r3, r5, #32
 8004a0e:	9307      	str	r3, [sp, #28]
 8004a10:	f100 0310 	add.w	r3, r0, #16
 8004a14:	f102 0810 	add.w	r8, r2, #16
 8004a18:	9303      	str	r3, [sp, #12]
 8004a1a:	f1a4 030c 	sub.w	r3, r4, #12
 8004a1e:	9608      	str	r6, [sp, #32]
 8004a20:	f1a0 0a0c 	sub.w	sl, r0, #12
 8004a24:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8004a28:	9302      	str	r3, [sp, #8]
 8004a2a:	f104 0910 	add.w	r9, r4, #16
 8004a2e:	f8cd 8004 	str.w	r8, [sp, #4]
 8004a32:	9e05      	ldr	r6, [sp, #20]
 8004a34:	9f03      	ldr	r7, [sp, #12]
 8004a36:	f856 4c08 	ldr.w	r4, [r6, #-8]
 8004a3a:	f857 5c08 	ldr.w	r5, [r7, #-8]
 8004a3e:	4620      	mov	r0, r4
 8004a40:	4629      	mov	r1, r5
 8004a42:	9217      	str	r2, [sp, #92]	; 0x5c
 8004a44:	f7fb ffa6 	bl	8000994 <__addsf3>
 8004a48:	4629      	mov	r1, r5
 8004a4a:	4680      	mov	r8, r0
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f7fb ff9f 	bl	8000990 <__aeabi_fsub>
 8004a52:	f856 4c04 	ldr.w	r4, [r6, #-4]
 8004a56:	f857 5c04 	ldr.w	r5, [r7, #-4]
 8004a5a:	9009      	str	r0, [sp, #36]	; 0x24
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	4620      	mov	r0, r4
 8004a60:	9605      	str	r6, [sp, #20]
 8004a62:	9703      	str	r7, [sp, #12]
 8004a64:	f7fb ff96 	bl	8000994 <__addsf3>
 8004a68:	4629      	mov	r1, r5
 8004a6a:	4607      	mov	r7, r0
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f7fb ff8f 	bl	8000990 <__aeabi_fsub>
 8004a72:	9c01      	ldr	r4, [sp, #4]
 8004a74:	f859 6c04 	ldr.w	r6, [r9, #-4]
 8004a78:	f854 bc04 	ldr.w	fp, [r4, #-4]
 8004a7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a7e:	900a      	str	r0, [sp, #40]	; 0x28
 8004a80:	4658      	mov	r0, fp
 8004a82:	f7fb ff87 	bl	8000994 <__addsf3>
 8004a86:	4631      	mov	r1, r6
 8004a88:	f7fb ff82 	bl	8000990 <__aeabi_fsub>
 8004a8c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8004a90:	9401      	str	r4, [sp, #4]
 8004a92:	f859 4c08 	ldr.w	r4, [r9, #-8]
 8004a96:	4629      	mov	r1, r5
 8004a98:	900b      	str	r0, [sp, #44]	; 0x2c
 8004a9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004a9c:	f7fb ff78 	bl	8000990 <__aeabi_fsub>
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	f7fb ff77 	bl	8000994 <__addsf3>
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	900c      	str	r0, [sp, #48]	; 0x30
 8004aaa:	4640      	mov	r0, r8
 8004aac:	f7fb ff70 	bl	8000990 <__aeabi_fsub>
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	f7fb ff6d 	bl	8000990 <__aeabi_fsub>
 8004ab6:	4659      	mov	r1, fp
 8004ab8:	900d      	str	r0, [sp, #52]	; 0x34
 8004aba:	4638      	mov	r0, r7
 8004abc:	f7fb ff68 	bl	8000990 <__aeabi_fsub>
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	f7fb ff65 	bl	8000990 <__aeabi_fsub>
 8004ac6:	4659      	mov	r1, fp
 8004ac8:	9012      	str	r0, [sp, #72]	; 0x48
 8004aca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004acc:	f7fb ff60 	bl	8000990 <__aeabi_fsub>
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	f7fb ff5f 	bl	8000994 <__addsf3>
 8004ad6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ad8:	9009      	str	r0, [sp, #36]	; 0x24
 8004ada:	4628      	mov	r0, r5
 8004adc:	f7fb ff5a 	bl	8000994 <__addsf3>
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	f7fb ff55 	bl	8000990 <__aeabi_fsub>
 8004ae6:	4641      	mov	r1, r8
 8004ae8:	9013      	str	r0, [sp, #76]	; 0x4c
 8004aea:	4628      	mov	r0, r5
 8004aec:	f7fb ff52 	bl	8000994 <__addsf3>
 8004af0:	4621      	mov	r1, r4
 8004af2:	f7fb ff4f 	bl	8000994 <__addsf3>
 8004af6:	9e05      	ldr	r6, [sp, #20]
 8004af8:	9b01      	ldr	r3, [sp, #4]
 8004afa:	f846 0c08 	str.w	r0, [r6, #-8]
 8004afe:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8004b02:	4638      	mov	r0, r7
 8004b04:	f7fb ff46 	bl	8000994 <__addsf3>
 8004b08:	f859 1c04 	ldr.w	r1, [r9, #-4]
 8004b0c:	f7fb ff42 	bl	8000994 <__addsf3>
 8004b10:	9f04      	ldr	r7, [sp, #16]
 8004b12:	f846 0c04 	str.w	r0, [r6, #-4]
 8004b16:	9605      	str	r6, [sp, #20]
 8004b18:	9e02      	ldr	r6, [sp, #8]
 8004b1a:	687c      	ldr	r4, [r7, #4]
 8004b1c:	6875      	ldr	r5, [r6, #4]
 8004b1e:	4620      	mov	r0, r4
 8004b20:	4629      	mov	r1, r5
 8004b22:	f7fb ff37 	bl	8000994 <__addsf3>
 8004b26:	4629      	mov	r1, r5
 8004b28:	4680      	mov	r8, r0
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f7fb ff30 	bl	8000990 <__aeabi_fsub>
 8004b30:	68bc      	ldr	r4, [r7, #8]
 8004b32:	68b5      	ldr	r5, [r6, #8]
 8004b34:	4683      	mov	fp, r0
 8004b36:	4629      	mov	r1, r5
 8004b38:	4620      	mov	r0, r4
 8004b3a:	9704      	str	r7, [sp, #16]
 8004b3c:	9602      	str	r6, [sp, #8]
 8004b3e:	f7fb ff29 	bl	8000994 <__addsf3>
 8004b42:	4629      	mov	r1, r5
 8004b44:	900a      	str	r0, [sp, #40]	; 0x28
 8004b46:	4620      	mov	r0, r4
 8004b48:	f7fb ff22 	bl	8000990 <__aeabi_fsub>
 8004b4c:	9e06      	ldr	r6, [sp, #24]
 8004b4e:	f8da 5008 	ldr.w	r5, [sl, #8]
 8004b52:	68b4      	ldr	r4, [r6, #8]
 8004b54:	900e      	str	r0, [sp, #56]	; 0x38
 8004b56:	4621      	mov	r1, r4
 8004b58:	4628      	mov	r0, r5
 8004b5a:	f7fb ff19 	bl	8000990 <__aeabi_fsub>
 8004b5e:	4659      	mov	r1, fp
 8004b60:	9016      	str	r0, [sp, #88]	; 0x58
 8004b62:	f7fb ff17 	bl	8000994 <__addsf3>
 8004b66:	f8da 7004 	ldr.w	r7, [sl, #4]
 8004b6a:	9606      	str	r6, [sp, #24]
 8004b6c:	6876      	ldr	r6, [r6, #4]
 8004b6e:	4639      	mov	r1, r7
 8004b70:	9014      	str	r0, [sp, #80]	; 0x50
 8004b72:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004b74:	f7fb ff0c 	bl	8000990 <__aeabi_fsub>
 8004b78:	4631      	mov	r1, r6
 8004b7a:	f7fb ff0b 	bl	8000994 <__addsf3>
 8004b7e:	4639      	mov	r1, r7
 8004b80:	900f      	str	r0, [sp, #60]	; 0x3c
 8004b82:	4640      	mov	r0, r8
 8004b84:	f7fb ff04 	bl	8000990 <__aeabi_fsub>
 8004b88:	4631      	mov	r1, r6
 8004b8a:	f7fb ff01 	bl	8000990 <__aeabi_fsub>
 8004b8e:	4629      	mov	r1, r5
 8004b90:	9015      	str	r0, [sp, #84]	; 0x54
 8004b92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004b94:	f7fb fefc 	bl	8000990 <__aeabi_fsub>
 8004b98:	4621      	mov	r1, r4
 8004b9a:	f7fb fef9 	bl	8000990 <__aeabi_fsub>
 8004b9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	9010      	str	r0, [sp, #64]	; 0x40
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fb fef3 	bl	8000990 <__aeabi_fsub>
 8004baa:	4639      	mov	r1, r7
 8004bac:	4683      	mov	fp, r0
 8004bae:	4630      	mov	r0, r6
 8004bb0:	f7fb feee 	bl	8000990 <__aeabi_fsub>
 8004bb4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004bb6:	f7fb feeb 	bl	8000990 <__aeabi_fsub>
 8004bba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004bbc:	4606      	mov	r6, r0
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f7fb fee8 	bl	8000994 <__addsf3>
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	f7fb fee5 	bl	8000994 <__addsf3>
 8004bca:	9c04      	ldr	r4, [sp, #16]
 8004bcc:	f1aa 0a08 	sub.w	sl, sl, #8
 8004bd0:	60a0      	str	r0, [r4, #8]
 8004bd2:	f8da 100c 	ldr.w	r1, [sl, #12]
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	f7fb fedc 	bl	8000994 <__addsf3>
 8004bdc:	9a06      	ldr	r2, [sp, #24]
 8004bde:	f109 0908 	add.w	r9, r9, #8
 8004be2:	6851      	ldr	r1, [r2, #4]
 8004be4:	f7fb fed6 	bl	8000994 <__addsf3>
 8004be8:	9d08      	ldr	r5, [sp, #32]
 8004bea:	6060      	str	r0, [r4, #4]
 8004bec:	9404      	str	r4, [sp, #16]
 8004bee:	f855 4c08 	ldr.w	r4, [r5, #-8]
 8004bf2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	f7fb ffd5 	bl	8000ba4 <__aeabi_fmul>
 8004bfa:	f855 5c04 	ldr.w	r5, [r5, #-4]
 8004bfe:	4680      	mov	r8, r0
 8004c00:	4629      	mov	r1, r5
 8004c02:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004c04:	f7fb ffce 	bl	8000ba4 <__aeabi_fmul>
 8004c08:	4601      	mov	r1, r0
 8004c0a:	4640      	mov	r0, r8
 8004c0c:	f7fb fec2 	bl	8000994 <__addsf3>
 8004c10:	9f01      	ldr	r7, [sp, #4]
 8004c12:	4621      	mov	r1, r4
 8004c14:	f847 0c08 	str.w	r0, [r7, #-8]
 8004c18:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004c1a:	f7fb ffc3 	bl	8000ba4 <__aeabi_fmul>
 8004c1e:	4629      	mov	r1, r5
 8004c20:	4680      	mov	r8, r0
 8004c22:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004c24:	f7fb ffbe 	bl	8000ba4 <__aeabi_fmul>
 8004c28:	4601      	mov	r1, r0
 8004c2a:	4640      	mov	r0, r8
 8004c2c:	f7fb feb0 	bl	8000990 <__aeabi_fsub>
 8004c30:	4629      	mov	r1, r5
 8004c32:	9701      	str	r7, [sp, #4]
 8004c34:	f847 0c04 	str.w	r0, [r7, #-4]
 8004c38:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004c3a:	f7fb ffb3 	bl	8000ba4 <__aeabi_fmul>
 8004c3e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004c40:	4680      	mov	r8, r0
 8004c42:	4621      	mov	r1, r4
 8004c44:	4638      	mov	r0, r7
 8004c46:	f7fb ffad 	bl	8000ba4 <__aeabi_fmul>
 8004c4a:	4601      	mov	r1, r0
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	f7fb fe9f 	bl	8000990 <__aeabi_fsub>
 8004c52:	4629      	mov	r1, r5
 8004c54:	f8ca 0010 	str.w	r0, [sl, #16]
 8004c58:	4638      	mov	r0, r7
 8004c5a:	f7fb ffa3 	bl	8000ba4 <__aeabi_fmul>
 8004c5e:	4621      	mov	r1, r4
 8004c60:	4605      	mov	r5, r0
 8004c62:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004c64:	f7fb ff9e 	bl	8000ba4 <__aeabi_fmul>
 8004c68:	4601      	mov	r1, r0
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f7fb fe92 	bl	8000994 <__addsf3>
 8004c70:	9907      	ldr	r1, [sp, #28]
 8004c72:	f8ca 000c 	str.w	r0, [sl, #12]
 8004c76:	f851 4c10 	ldr.w	r4, [r1, #-16]
 8004c7a:	f851 5c0c 	ldr.w	r5, [r1, #-12]
 8004c7e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c80:	4621      	mov	r1, r4
 8004c82:	f7fb ff8f 	bl	8000ba4 <__aeabi_fmul>
 8004c86:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8004c8a:	4607      	mov	r7, r0
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	4640      	mov	r0, r8
 8004c90:	f7fb ff88 	bl	8000ba4 <__aeabi_fmul>
 8004c94:	4601      	mov	r1, r0
 8004c96:	4638      	mov	r0, r7
 8004c98:	f7fb fe7c 	bl	8000994 <__addsf3>
 8004c9c:	9b03      	ldr	r3, [sp, #12]
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	f843 0c08 	str.w	r0, [r3, #-8]
 8004ca4:	4640      	mov	r0, r8
 8004ca6:	f7fb ff7d 	bl	8000ba4 <__aeabi_fmul>
 8004caa:	4629      	mov	r1, r5
 8004cac:	4607      	mov	r7, r0
 8004cae:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004cb0:	f7fb ff78 	bl	8000ba4 <__aeabi_fmul>
 8004cb4:	4601      	mov	r1, r0
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	f7fb fe6a 	bl	8000990 <__aeabi_fsub>
 8004cbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004cbe:	9903      	ldr	r1, [sp, #12]
 8004cc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004cc4:	f841 0c04 	str.w	r0, [r1, #-4]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	4621      	mov	r1, r4
 8004ccc:	f7fb ff6a 	bl	8000ba4 <__aeabi_fmul>
 8004cd0:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8004cd4:	4607      	mov	r7, r0
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	4640      	mov	r0, r8
 8004cda:	f7fb ff63 	bl	8000ba4 <__aeabi_fmul>
 8004cde:	4601      	mov	r1, r0
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	f7fb fe55 	bl	8000990 <__aeabi_fsub>
 8004ce6:	9f02      	ldr	r7, [sp, #8]
 8004ce8:	4629      	mov	r1, r5
 8004cea:	60b8      	str	r0, [r7, #8]
 8004cec:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004cee:	f7fb ff59 	bl	8000ba4 <__aeabi_fmul>
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	f7fb ff54 	bl	8000ba4 <__aeabi_fmul>
 8004cfc:	4601      	mov	r1, r0
 8004cfe:	4628      	mov	r0, r5
 8004d00:	f7fb fe46 	bl	8000990 <__aeabi_fsub>
 8004d04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8004d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d0e:	4621      	mov	r1, r4
 8004d10:	f852 5c14 	ldr.w	r5, [r2, #-20]
 8004d14:	920a      	str	r2, [sp, #40]	; 0x28
 8004d16:	9702      	str	r7, [sp, #8]
 8004d18:	f7fb ff44 	bl	8000ba4 <__aeabi_fmul>
 8004d1c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8004d20:	4607      	mov	r7, r0
 8004d22:	4629      	mov	r1, r5
 8004d24:	4640      	mov	r0, r8
 8004d26:	f7fb ff3d 	bl	8000ba4 <__aeabi_fmul>
 8004d2a:	4601      	mov	r1, r0
 8004d2c:	4638      	mov	r0, r7
 8004d2e:	f7fb fe31 	bl	8000994 <__addsf3>
 8004d32:	4621      	mov	r1, r4
 8004d34:	f849 0c10 	str.w	r0, [r9, #-16]
 8004d38:	4640      	mov	r0, r8
 8004d3a:	f7fb ff33 	bl	8000ba4 <__aeabi_fmul>
 8004d3e:	4629      	mov	r1, r5
 8004d40:	4607      	mov	r7, r0
 8004d42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d44:	f7fb ff2e 	bl	8000ba4 <__aeabi_fmul>
 8004d48:	4601      	mov	r1, r0
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	f7fb fe20 	bl	8000990 <__aeabi_fsub>
 8004d50:	4629      	mov	r1, r5
 8004d52:	f849 0c0c 	str.w	r0, [r9, #-12]
 8004d56:	4630      	mov	r0, r6
 8004d58:	f7fb ff24 	bl	8000ba4 <__aeabi_fmul>
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	4607      	mov	r7, r0
 8004d60:	4658      	mov	r0, fp
 8004d62:	f7fb ff1f 	bl	8000ba4 <__aeabi_fmul>
 8004d66:	4601      	mov	r1, r0
 8004d68:	4638      	mov	r0, r7
 8004d6a:	f7fb fe11 	bl	8000990 <__aeabi_fsub>
 8004d6e:	9f06      	ldr	r7, [sp, #24]
 8004d70:	4629      	mov	r1, r5
 8004d72:	60b8      	str	r0, [r7, #8]
 8004d74:	4658      	mov	r0, fp
 8004d76:	f7fb ff15 	bl	8000ba4 <__aeabi_fmul>
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	4630      	mov	r0, r6
 8004d80:	f7fb ff10 	bl	8000ba4 <__aeabi_fmul>
 8004d84:	4601      	mov	r1, r0
 8004d86:	4628      	mov	r0, r5
 8004d88:	f7fb fe04 	bl	8000994 <__addsf3>
 8004d8c:	9c04      	ldr	r4, [sp, #16]
 8004d8e:	9a08      	ldr	r2, [sp, #32]
 8004d90:	3c08      	subs	r4, #8
 8004d92:	9b01      	ldr	r3, [sp, #4]
 8004d94:	9e05      	ldr	r6, [sp, #20]
 8004d96:	9903      	ldr	r1, [sp, #12]
 8004d98:	9404      	str	r4, [sp, #16]
 8004d9a:	f102 0408 	add.w	r4, r2, #8
 8004d9e:	9a07      	ldr	r2, [sp, #28]
 8004da0:	9408      	str	r4, [sp, #32]
 8004da2:	3210      	adds	r2, #16
 8004da4:	f103 0408 	add.w	r4, r3, #8
 8004da8:	3608      	adds	r6, #8
 8004daa:	f101 0308 	add.w	r3, r1, #8
 8004dae:	9207      	str	r2, [sp, #28]
 8004db0:	9303      	str	r3, [sp, #12]
 8004db2:	9605      	str	r6, [sp, #20]
 8004db4:	9401      	str	r4, [sp, #4]
 8004db6:	9d02      	ldr	r5, [sp, #8]
 8004db8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dba:	f1a5 0308 	sub.w	r3, r5, #8
 8004dbe:	9302      	str	r3, [sp, #8]
 8004dc0:	f1a7 0308 	sub.w	r3, r7, #8
 8004dc4:	9306      	str	r3, [sp, #24]
 8004dc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004dc8:	3218      	adds	r2, #24
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	9311      	str	r3, [sp, #68]	; 0x44
 8004dd0:	f47f ae2f 	bne.w	8004a32 <arm_cfft_radix8by4_f32+0x18a>
 8004dd4:	9925      	ldr	r1, [sp, #148]	; 0x94
 8004dd6:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004dd8:	00cb      	lsls	r3, r1, #3
 8004dda:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004dde:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004de2:	9122      	str	r1, [sp, #136]	; 0x88
 8004de4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004de6:	4419      	add	r1, r3
 8004de8:	911c      	str	r1, [sp, #112]	; 0x70
 8004dea:	9921      	ldr	r1, [sp, #132]	; 0x84
 8004dec:	4419      	add	r1, r3
 8004dee:	9121      	str	r1, [sp, #132]	; 0x84
 8004df0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004df2:	4419      	add	r1, r3
 8004df4:	911e      	str	r1, [sp, #120]	; 0x78
 8004df6:	991d      	ldr	r1, [sp, #116]	; 0x74
 8004df8:	4419      	add	r1, r3
 8004dfa:	911d      	str	r1, [sp, #116]	; 0x74
 8004dfc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004dfe:	4419      	add	r1, r3
 8004e00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e02:	911b      	str	r1, [sp, #108]	; 0x6c
 8004e04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e08:	9320      	str	r3, [sp, #128]	; 0x80
 8004e0a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8004e0c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8004e0e:	6834      	ldr	r4, [r6, #0]
 8004e10:	683d      	ldr	r5, [r7, #0]
 8004e12:	4620      	mov	r0, r4
 8004e14:	4629      	mov	r1, r5
 8004e16:	f7fb fdbd 	bl	8000994 <__addsf3>
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	9001      	str	r0, [sp, #4]
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f7fb fdb6 	bl	8000990 <__aeabi_fsub>
 8004e24:	6874      	ldr	r4, [r6, #4]
 8004e26:	687d      	ldr	r5, [r7, #4]
 8004e28:	4683      	mov	fp, r0
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	961c      	str	r6, [sp, #112]	; 0x70
 8004e30:	971d      	str	r7, [sp, #116]	; 0x74
 8004e32:	f7fb fdaf 	bl	8000994 <__addsf3>
 8004e36:	4629      	mov	r1, r5
 8004e38:	4681      	mov	r9, r0
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f7fb fda8 	bl	8000990 <__aeabi_fsub>
 8004e40:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8004e42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e44:	6867      	ldr	r7, [r4, #4]
 8004e46:	685e      	ldr	r6, [r3, #4]
 8004e48:	4682      	mov	sl, r0
 8004e4a:	4659      	mov	r1, fp
 8004e4c:	4638      	mov	r0, r7
 8004e4e:	f7fb fda1 	bl	8000994 <__addsf3>
 8004e52:	4631      	mov	r1, r6
 8004e54:	f7fb fd9c 	bl	8000990 <__aeabi_fsub>
 8004e58:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004e5a:	6825      	ldr	r5, [r4, #0]
 8004e5c:	941e      	str	r4, [sp, #120]	; 0x78
 8004e5e:	6814      	ldr	r4, [r2, #0]
 8004e60:	9002      	str	r0, [sp, #8]
 8004e62:	4629      	mov	r1, r5
 8004e64:	4650      	mov	r0, sl
 8004e66:	f7fb fd93 	bl	8000990 <__aeabi_fsub>
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	f7fb fd92 	bl	8000994 <__addsf3>
 8004e70:	4629      	mov	r1, r5
 8004e72:	4680      	mov	r8, r0
 8004e74:	9801      	ldr	r0, [sp, #4]
 8004e76:	f7fb fd8b 	bl	8000990 <__aeabi_fsub>
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	f7fb fd88 	bl	8000990 <__aeabi_fsub>
 8004e80:	4639      	mov	r1, r7
 8004e82:	9003      	str	r0, [sp, #12]
 8004e84:	4648      	mov	r0, r9
 8004e86:	f7fb fd83 	bl	8000990 <__aeabi_fsub>
 8004e8a:	4631      	mov	r1, r6
 8004e8c:	f7fb fd80 	bl	8000990 <__aeabi_fsub>
 8004e90:	4639      	mov	r1, r7
 8004e92:	9004      	str	r0, [sp, #16]
 8004e94:	4658      	mov	r0, fp
 8004e96:	f7fb fd7b 	bl	8000990 <__aeabi_fsub>
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	f7fb fd7a 	bl	8000994 <__addsf3>
 8004ea0:	4651      	mov	r1, sl
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f7fb fd75 	bl	8000994 <__addsf3>
 8004eaa:	4621      	mov	r1, r4
 8004eac:	f7fb fd70 	bl	8000990 <__aeabi_fsub>
 8004eb0:	9901      	ldr	r1, [sp, #4]
 8004eb2:	4682      	mov	sl, r0
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	f7fb fd6d 	bl	8000994 <__addsf3>
 8004eba:	4621      	mov	r1, r4
 8004ebc:	f7fb fd6a 	bl	8000994 <__addsf3>
 8004ec0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8004ec2:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8004ec4:	6028      	str	r0, [r5, #0]
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	4648      	mov	r0, r9
 8004eca:	f7fb fd63 	bl	8000994 <__addsf3>
 8004ece:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ed0:	6859      	ldr	r1, [r3, #4]
 8004ed2:	f7fb fd5f 	bl	8000994 <__addsf3>
 8004ed6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ed8:	6068      	str	r0, [r5, #4]
 8004eda:	6815      	ldr	r5, [r2, #0]
 8004edc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	4658      	mov	r0, fp
 8004ee4:	6854      	ldr	r4, [r2, #4]
 8004ee6:	f7fb fe5d 	bl	8000ba4 <__aeabi_fmul>
 8004eea:	4621      	mov	r1, r4
 8004eec:	4681      	mov	r9, r0
 8004eee:	4640      	mov	r0, r8
 8004ef0:	f7fb fe58 	bl	8000ba4 <__aeabi_fmul>
 8004ef4:	4601      	mov	r1, r0
 8004ef6:	4648      	mov	r0, r9
 8004ef8:	f7fb fd4c 	bl	8000994 <__addsf3>
 8004efc:	4629      	mov	r1, r5
 8004efe:	6038      	str	r0, [r7, #0]
 8004f00:	4640      	mov	r0, r8
 8004f02:	f7fb fe4f 	bl	8000ba4 <__aeabi_fmul>
 8004f06:	4621      	mov	r1, r4
 8004f08:	4605      	mov	r5, r0
 8004f0a:	4658      	mov	r0, fp
 8004f0c:	f7fb fe4a 	bl	8000ba4 <__aeabi_fmul>
 8004f10:	4601      	mov	r1, r0
 8004f12:	4628      	mov	r0, r5
 8004f14:	f7fb fd3c 	bl	8000990 <__aeabi_fsub>
 8004f18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6815      	ldr	r5, [r2, #0]
 8004f1e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004f22:	4629      	mov	r1, r5
 8004f24:	4658      	mov	r0, fp
 8004f26:	6854      	ldr	r4, [r2, #4]
 8004f28:	f7fb fe3c 	bl	8000ba4 <__aeabi_fmul>
 8004f2c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8004f30:	4680      	mov	r8, r0
 8004f32:	4621      	mov	r1, r4
 8004f34:	4648      	mov	r0, r9
 8004f36:	f7fb fe35 	bl	8000ba4 <__aeabi_fmul>
 8004f3a:	4601      	mov	r1, r0
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	f7fb fd29 	bl	8000994 <__addsf3>
 8004f42:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8004f44:	4629      	mov	r1, r5
 8004f46:	6038      	str	r0, [r7, #0]
 8004f48:	4648      	mov	r0, r9
 8004f4a:	f7fb fe2b 	bl	8000ba4 <__aeabi_fmul>
 8004f4e:	4621      	mov	r1, r4
 8004f50:	4605      	mov	r5, r0
 8004f52:	4658      	mov	r0, fp
 8004f54:	f7fb fe26 	bl	8000ba4 <__aeabi_fmul>
 8004f58:	4601      	mov	r1, r0
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f7fb fd18 	bl	8000990 <__aeabi_fsub>
 8004f60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6815      	ldr	r5, [r2, #0]
 8004f66:	4630      	mov	r0, r6
 8004f68:	4629      	mov	r1, r5
 8004f6a:	6854      	ldr	r4, [r2, #4]
 8004f6c:	f7fb fe1a 	bl	8000ba4 <__aeabi_fmul>
 8004f70:	4621      	mov	r1, r4
 8004f72:	4607      	mov	r7, r0
 8004f74:	4650      	mov	r0, sl
 8004f76:	f7fb fe15 	bl	8000ba4 <__aeabi_fmul>
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	f7fb fd09 	bl	8000994 <__addsf3>
 8004f82:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8004f84:	4629      	mov	r1, r5
 8004f86:	6038      	str	r0, [r7, #0]
 8004f88:	4650      	mov	r0, sl
 8004f8a:	f7fb fe0b 	bl	8000ba4 <__aeabi_fmul>
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4605      	mov	r5, r0
 8004f92:	4630      	mov	r0, r6
 8004f94:	f7fb fe06 	bl	8000ba4 <__aeabi_fmul>
 8004f98:	4601      	mov	r1, r0
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	f7fb fcf8 	bl	8000990 <__aeabi_fsub>
 8004fa0:	f8bd 4090 	ldrh.w	r4, [sp, #144]	; 0x90
 8004fa4:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	686a      	ldr	r2, [r5, #4]
 8004faa:	9818      	ldr	r0, [sp, #96]	; 0x60
 8004fac:	4621      	mov	r1, r4
 8004fae:	2304      	movs	r3, #4
 8004fb0:	f000 f978 	bl	80052a4 <arm_radix8_butterfly_f32>
 8004fb4:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004fb6:	4621      	mov	r1, r4
 8004fb8:	686a      	ldr	r2, [r5, #4]
 8004fba:	2304      	movs	r3, #4
 8004fbc:	f000 f972 	bl	80052a4 <arm_radix8_butterfly_f32>
 8004fc0:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	686a      	ldr	r2, [r5, #4]
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	f000 f96c 	bl	80052a4 <arm_radix8_butterfly_f32>
 8004fcc:	4621      	mov	r1, r4
 8004fce:	2304      	movs	r3, #4
 8004fd0:	686a      	ldr	r2, [r5, #4]
 8004fd2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004fd4:	b027      	add	sp, #156	; 0x9c
 8004fd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fda:	f000 b963 	b.w	80052a4 <arm_radix8_butterfly_f32>
 8004fde:	bf00      	nop

08004fe0 <arm_cfft_f32>:
 8004fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe4:	2a01      	cmp	r2, #1
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	4617      	mov	r7, r2
 8004fea:	460c      	mov	r4, r1
 8004fec:	4698      	mov	r8, r3
 8004fee:	8805      	ldrh	r5, [r0, #0]
 8004ff0:	d05a      	beq.n	80050a8 <arm_cfft_f32+0xc8>
 8004ff2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004ff6:	d064      	beq.n	80050c2 <arm_cfft_f32+0xe2>
 8004ff8:	d916      	bls.n	8005028 <arm_cfft_f32+0x48>
 8004ffa:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8004ffe:	d01a      	beq.n	8005036 <arm_cfft_f32+0x56>
 8005000:	d94b      	bls.n	800509a <arm_cfft_f32+0xba>
 8005002:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8005006:	d05c      	beq.n	80050c2 <arm_cfft_f32+0xe2>
 8005008:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800500c:	d105      	bne.n	800501a <arm_cfft_f32+0x3a>
 800500e:	2301      	movs	r3, #1
 8005010:	6872      	ldr	r2, [r6, #4]
 8005012:	4629      	mov	r1, r5
 8005014:	4620      	mov	r0, r4
 8005016:	f000 f945 	bl	80052a4 <arm_radix8_butterfly_f32>
 800501a:	f1b8 0f00 	cmp.w	r8, #0
 800501e:	d111      	bne.n	8005044 <arm_cfft_f32+0x64>
 8005020:	2f01      	cmp	r7, #1
 8005022:	d016      	beq.n	8005052 <arm_cfft_f32+0x72>
 8005024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005028:	2d20      	cmp	r5, #32
 800502a:	d04a      	beq.n	80050c2 <arm_cfft_f32+0xe2>
 800502c:	d939      	bls.n	80050a2 <arm_cfft_f32+0xc2>
 800502e:	2d40      	cmp	r5, #64	; 0x40
 8005030:	d0ed      	beq.n	800500e <arm_cfft_f32+0x2e>
 8005032:	2d80      	cmp	r5, #128	; 0x80
 8005034:	d1f1      	bne.n	800501a <arm_cfft_f32+0x3a>
 8005036:	4621      	mov	r1, r4
 8005038:	4630      	mov	r0, r6
 800503a:	f7ff fae1 	bl	8004600 <arm_cfft_radix8by2_f32>
 800503e:	f1b8 0f00 	cmp.w	r8, #0
 8005042:	d0ed      	beq.n	8005020 <arm_cfft_f32+0x40>
 8005044:	68b2      	ldr	r2, [r6, #8]
 8005046:	89b1      	ldrh	r1, [r6, #12]
 8005048:	4620      	mov	r0, r4
 800504a:	f000 f843 	bl	80050d4 <arm_bitreversal_32>
 800504e:	2f01      	cmp	r7, #1
 8005050:	d1e8      	bne.n	8005024 <arm_cfft_f32+0x44>
 8005052:	4628      	mov	r0, r5
 8005054:	f7fb fd4e 	bl	8000af4 <__aeabi_ui2f>
 8005058:	4601      	mov	r1, r0
 800505a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800505e:	f7fb fe55 	bl	8000d0c <__aeabi_fdiv>
 8005062:	4607      	mov	r7, r0
 8005064:	2d00      	cmp	r5, #0
 8005066:	d0dd      	beq.n	8005024 <arm_cfft_f32+0x44>
 8005068:	2600      	movs	r6, #0
 800506a:	3408      	adds	r4, #8
 800506c:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8005070:	4639      	mov	r1, r7
 8005072:	f7fb fd97 	bl	8000ba4 <__aeabi_fmul>
 8005076:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800507a:	f844 0c08 	str.w	r0, [r4, #-8]
 800507e:	4639      	mov	r1, r7
 8005080:	f103 4000 	add.w	r0, r3, #2147483648	; 0x80000000
 8005084:	f7fb fd8e 	bl	8000ba4 <__aeabi_fmul>
 8005088:	3601      	adds	r6, #1
 800508a:	42b5      	cmp	r5, r6
 800508c:	f844 0c04 	str.w	r0, [r4, #-4]
 8005090:	f104 0408 	add.w	r4, r4, #8
 8005094:	d1ea      	bne.n	800506c <arm_cfft_f32+0x8c>
 8005096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800509a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800509e:	d0b6      	beq.n	800500e <arm_cfft_f32+0x2e>
 80050a0:	e7bb      	b.n	800501a <arm_cfft_f32+0x3a>
 80050a2:	2d10      	cmp	r5, #16
 80050a4:	d0c7      	beq.n	8005036 <arm_cfft_f32+0x56>
 80050a6:	e7b8      	b.n	800501a <arm_cfft_f32+0x3a>
 80050a8:	3104      	adds	r1, #4
 80050aa:	b17d      	cbz	r5, 80050cc <arm_cfft_f32+0xec>
 80050ac:	2300      	movs	r3, #0
 80050ae:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80050b2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80050b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80050ba:	3301      	adds	r3, #1
 80050bc:	429d      	cmp	r5, r3
 80050be:	d1f6      	bne.n	80050ae <arm_cfft_f32+0xce>
 80050c0:	e797      	b.n	8004ff2 <arm_cfft_f32+0x12>
 80050c2:	4621      	mov	r1, r4
 80050c4:	4630      	mov	r0, r6
 80050c6:	f7ff fbef 	bl	80048a8 <arm_cfft_radix8by4_f32>
 80050ca:	e7a6      	b.n	800501a <arm_cfft_f32+0x3a>
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0a9      	beq.n	8005024 <arm_cfft_f32+0x44>
 80050d0:	e7b8      	b.n	8005044 <arm_cfft_f32+0x64>
 80050d2:	bf00      	nop

080050d4 <arm_bitreversal_32>:
 80050d4:	b301      	cbz	r1, 8005118 <arm_bitreversal_32+0x44>
 80050d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050da:	4690      	mov	r8, r2
 80050dc:	2500      	movs	r5, #0
 80050de:	f102 0c02 	add.w	ip, r2, #2
 80050e2:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 80050e6:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 80050ea:	08a4      	lsrs	r4, r4, #2
 80050ec:	089b      	lsrs	r3, r3, #2
 80050ee:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 80050f2:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80050f6:	00a7      	lsls	r7, r4, #2
 80050f8:	009e      	lsls	r6, r3, #2
 80050fa:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80050fe:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 8005102:	1d3c      	adds	r4, r7, #4
 8005104:	1d33      	adds	r3, r6, #4
 8005106:	5907      	ldr	r7, [r0, r4]
 8005108:	58c6      	ldr	r6, [r0, r3]
 800510a:	3502      	adds	r5, #2
 800510c:	428d      	cmp	r5, r1
 800510e:	5106      	str	r6, [r0, r4]
 8005110:	50c7      	str	r7, [r0, r3]
 8005112:	d3e6      	bcc.n	80050e2 <arm_bitreversal_32+0xe>
 8005114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop

0800511c <arm_cmplx_mag_f32>:
 800511c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005120:	ea5f 0b92 	movs.w	fp, r2, lsr #2
 8005124:	b083      	sub	sp, #12
 8005126:	9201      	str	r2, [sp, #4]
 8005128:	4607      	mov	r7, r0
 800512a:	4688      	mov	r8, r1
 800512c:	d07b      	beq.n	8005226 <arm_cmplx_mag_f32+0x10a>
 800512e:	465e      	mov	r6, fp
 8005130:	f100 0420 	add.w	r4, r0, #32
 8005134:	f101 0510 	add.w	r5, r1, #16
 8005138:	f854 1c20 	ldr.w	r1, [r4, #-32]
 800513c:	f854 ac1c 	ldr.w	sl, [r4, #-28]
 8005140:	4608      	mov	r0, r1
 8005142:	f7fb fd2f 	bl	8000ba4 <__aeabi_fmul>
 8005146:	4651      	mov	r1, sl
 8005148:	4681      	mov	r9, r0
 800514a:	4650      	mov	r0, sl
 800514c:	f7fb fd2a 	bl	8000ba4 <__aeabi_fmul>
 8005150:	4601      	mov	r1, r0
 8005152:	4648      	mov	r0, r9
 8005154:	f7fb fc1e 	bl	8000994 <__addsf3>
 8005158:	2100      	movs	r1, #0
 800515a:	4681      	mov	r9, r0
 800515c:	f7fb fed4 	bl	8000f08 <__aeabi_fcmpge>
 8005160:	2800      	cmp	r0, #0
 8005162:	f000 808b 	beq.w	800527c <arm_cmplx_mag_f32+0x160>
 8005166:	4648      	mov	r0, r9
 8005168:	f000 fd86 	bl	8005c78 <sqrtf>
 800516c:	f845 0c10 	str.w	r0, [r5, #-16]
 8005170:	f854 1c18 	ldr.w	r1, [r4, #-24]
 8005174:	f854 ac14 	ldr.w	sl, [r4, #-20]
 8005178:	4608      	mov	r0, r1
 800517a:	f7fb fd13 	bl	8000ba4 <__aeabi_fmul>
 800517e:	4651      	mov	r1, sl
 8005180:	4681      	mov	r9, r0
 8005182:	4650      	mov	r0, sl
 8005184:	f7fb fd0e 	bl	8000ba4 <__aeabi_fmul>
 8005188:	4601      	mov	r1, r0
 800518a:	4648      	mov	r0, r9
 800518c:	f7fb fc02 	bl	8000994 <__addsf3>
 8005190:	2100      	movs	r1, #0
 8005192:	4681      	mov	r9, r0
 8005194:	f7fb feb8 	bl	8000f08 <__aeabi_fcmpge>
 8005198:	2800      	cmp	r0, #0
 800519a:	d07b      	beq.n	8005294 <arm_cmplx_mag_f32+0x178>
 800519c:	4648      	mov	r0, r9
 800519e:	f000 fd6b 	bl	8005c78 <sqrtf>
 80051a2:	f845 0c0c 	str.w	r0, [r5, #-12]
 80051a6:	f854 1c10 	ldr.w	r1, [r4, #-16]
 80051aa:	f854 ac0c 	ldr.w	sl, [r4, #-12]
 80051ae:	4608      	mov	r0, r1
 80051b0:	f7fb fcf8 	bl	8000ba4 <__aeabi_fmul>
 80051b4:	4651      	mov	r1, sl
 80051b6:	4681      	mov	r9, r0
 80051b8:	4650      	mov	r0, sl
 80051ba:	f7fb fcf3 	bl	8000ba4 <__aeabi_fmul>
 80051be:	4601      	mov	r1, r0
 80051c0:	4648      	mov	r0, r9
 80051c2:	f7fb fbe7 	bl	8000994 <__addsf3>
 80051c6:	2100      	movs	r1, #0
 80051c8:	4681      	mov	r9, r0
 80051ca:	f7fb fe9d 	bl	8000f08 <__aeabi_fcmpge>
 80051ce:	2800      	cmp	r0, #0
 80051d0:	d05c      	beq.n	800528c <arm_cmplx_mag_f32+0x170>
 80051d2:	4648      	mov	r0, r9
 80051d4:	f000 fd50 	bl	8005c78 <sqrtf>
 80051d8:	f845 0c08 	str.w	r0, [r5, #-8]
 80051dc:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80051e0:	f854 ac04 	ldr.w	sl, [r4, #-4]
 80051e4:	4608      	mov	r0, r1
 80051e6:	f7fb fcdd 	bl	8000ba4 <__aeabi_fmul>
 80051ea:	4651      	mov	r1, sl
 80051ec:	4681      	mov	r9, r0
 80051ee:	4650      	mov	r0, sl
 80051f0:	f7fb fcd8 	bl	8000ba4 <__aeabi_fmul>
 80051f4:	4601      	mov	r1, r0
 80051f6:	4648      	mov	r0, r9
 80051f8:	f7fb fbcc 	bl	8000994 <__addsf3>
 80051fc:	2100      	movs	r1, #0
 80051fe:	4681      	mov	r9, r0
 8005200:	f7fb fe82 	bl	8000f08 <__aeabi_fcmpge>
 8005204:	2800      	cmp	r0, #0
 8005206:	d03d      	beq.n	8005284 <arm_cmplx_mag_f32+0x168>
 8005208:	4648      	mov	r0, r9
 800520a:	f000 fd35 	bl	8005c78 <sqrtf>
 800520e:	f845 0c04 	str.w	r0, [r5, #-4]
 8005212:	3e01      	subs	r6, #1
 8005214:	f104 0420 	add.w	r4, r4, #32
 8005218:	f105 0510 	add.w	r5, r5, #16
 800521c:	d18c      	bne.n	8005138 <arm_cmplx_mag_f32+0x1c>
 800521e:	eb07 174b 	add.w	r7, r7, fp, lsl #5
 8005222:	eb08 180b 	add.w	r8, r8, fp, lsl #4
 8005226:	9b01      	ldr	r3, [sp, #4]
 8005228:	f013 0a03 	ands.w	sl, r3, #3
 800522c:	d023      	beq.n	8005276 <arm_cmplx_mag_f32+0x15a>
 800522e:	2600      	movs	r6, #0
 8005230:	3708      	adds	r7, #8
 8005232:	eb08 0a8a 	add.w	sl, r8, sl, lsl #2
 8005236:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800523a:	f857 5c04 	ldr.w	r5, [r7, #-4]
 800523e:	4608      	mov	r0, r1
 8005240:	f7fb fcb0 	bl	8000ba4 <__aeabi_fmul>
 8005244:	4629      	mov	r1, r5
 8005246:	4604      	mov	r4, r0
 8005248:	4628      	mov	r0, r5
 800524a:	f7fb fcab 	bl	8000ba4 <__aeabi_fmul>
 800524e:	4601      	mov	r1, r0
 8005250:	4620      	mov	r0, r4
 8005252:	f7fb fb9f 	bl	8000994 <__addsf3>
 8005256:	2100      	movs	r1, #0
 8005258:	4604      	mov	r4, r0
 800525a:	f108 0804 	add.w	r8, r8, #4
 800525e:	f7fb fe53 	bl	8000f08 <__aeabi_fcmpge>
 8005262:	b1d8      	cbz	r0, 800529c <arm_cmplx_mag_f32+0x180>
 8005264:	4620      	mov	r0, r4
 8005266:	f000 fd07 	bl	8005c78 <sqrtf>
 800526a:	f848 0c04 	str.w	r0, [r8, #-4]
 800526e:	45d0      	cmp	r8, sl
 8005270:	f107 0708 	add.w	r7, r7, #8
 8005274:	d1df      	bne.n	8005236 <arm_cmplx_mag_f32+0x11a>
 8005276:	b003      	add	sp, #12
 8005278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527c:	2300      	movs	r3, #0
 800527e:	f845 3c10 	str.w	r3, [r5, #-16]
 8005282:	e775      	b.n	8005170 <arm_cmplx_mag_f32+0x54>
 8005284:	2300      	movs	r3, #0
 8005286:	f845 3c04 	str.w	r3, [r5, #-4]
 800528a:	e7c2      	b.n	8005212 <arm_cmplx_mag_f32+0xf6>
 800528c:	2300      	movs	r3, #0
 800528e:	f845 3c08 	str.w	r3, [r5, #-8]
 8005292:	e7a3      	b.n	80051dc <arm_cmplx_mag_f32+0xc0>
 8005294:	2300      	movs	r3, #0
 8005296:	f845 3c0c 	str.w	r3, [r5, #-12]
 800529a:	e784      	b.n	80051a6 <arm_cmplx_mag_f32+0x8a>
 800529c:	f848 6c04 	str.w	r6, [r8, #-4]
 80052a0:	e7e5      	b.n	800526e <arm_cmplx_mag_f32+0x152>
 80052a2:	bf00      	nop

080052a4 <arm_radix8_butterfly_f32>:
 80052a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a8:	b0b9      	sub	sp, #228	; 0xe4
 80052aa:	9337      	str	r3, [sp, #220]	; 0xdc
 80052ac:	4603      	mov	r3, r0
 80052ae:	3304      	adds	r3, #4
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	4613      	mov	r3, r2
 80052b4:	9116      	str	r1, [sp, #88]	; 0x58
 80052b6:	3304      	adds	r3, #4
 80052b8:	9335      	str	r3, [sp, #212]	; 0xd4
 80052ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80052bc:	9118      	str	r1, [sp, #96]	; 0x60
 80052be:	9000      	str	r0, [sp, #0]
 80052c0:	9234      	str	r2, [sp, #208]	; 0xd0
 80052c2:	08df      	lsrs	r7, r3, #3
 80052c4:	00fa      	lsls	r2, r7, #3
 80052c6:	4616      	mov	r6, r2
 80052c8:	9900      	ldr	r1, [sp, #0]
 80052ca:	ebc7 7347 	rsb	r3, r7, r7, lsl #29
 80052ce:	4411      	add	r1, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	9107      	str	r1, [sp, #28]
 80052d4:	4411      	add	r1, r2
 80052d6:	911f      	str	r1, [sp, #124]	; 0x7c
 80052d8:	4419      	add	r1, r3
 80052da:	911d      	str	r1, [sp, #116]	; 0x74
 80052dc:	4411      	add	r1, r2
 80052de:	911b      	str	r1, [sp, #108]	; 0x6c
 80052e0:	4419      	add	r1, r3
 80052e2:	188d      	adds	r5, r1, r2
 80052e4:	18ec      	adds	r4, r5, r3
 80052e6:	eb04 0e02 	add.w	lr, r4, r2
 80052ea:	910f      	str	r1, [sp, #60]	; 0x3c
 80052ec:	eb0e 0103 	add.w	r1, lr, r3
 80052f0:	1888      	adds	r0, r1, r2
 80052f2:	9020      	str	r0, [sp, #128]	; 0x80
 80052f4:	4418      	add	r0, r3
 80052f6:	9226      	str	r2, [sp, #152]	; 0x98
 80052f8:	1882      	adds	r2, r0, r2
 80052fa:	901e      	str	r0, [sp, #120]	; 0x78
 80052fc:	18d0      	adds	r0, r2, r3
 80052fe:	900e      	str	r0, [sp, #56]	; 0x38
 8005300:	4430      	add	r0, r6
 8005302:	4403      	add	r3, r0
 8005304:	199e      	adds	r6, r3, r6
 8005306:	901c      	str	r0, [sp, #112]	; 0x70
 8005308:	4630      	mov	r0, r6
 800530a:	3204      	adds	r2, #4
 800530c:	9215      	str	r2, [sp, #84]	; 0x54
 800530e:	1d1a      	adds	r2, r3, #4
 8005310:	9219      	str	r2, [sp, #100]	; 0x64
 8005312:	4602      	mov	r2, r0
 8005314:	9621      	str	r6, [sp, #132]	; 0x84
 8005316:	463e      	mov	r6, r7
 8005318:	f04f 0800 	mov.w	r8, #0
 800531c:	3404      	adds	r4, #4
 800531e:	9412      	str	r4, [sp, #72]	; 0x48
 8005320:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005322:	f10e 0404 	add.w	r4, lr, #4
 8005326:	3204      	adds	r2, #4
 8005328:	9410      	str	r4, [sp, #64]	; 0x40
 800532a:	1d0c      	adds	r4, r1, #4
 800532c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800532e:	9211      	str	r2, [sp, #68]	; 0x44
 8005330:	1d02      	adds	r2, r0, #4
 8005332:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8005336:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 800533a:	9213      	str	r2, [sp, #76]	; 0x4c
 800533c:	1d0a      	adds	r2, r1, #4
 800533e:	9636      	str	r6, [sp, #216]	; 0xd8
 8005340:	9206      	str	r2, [sp, #24]
 8005342:	00fe      	lsls	r6, r7, #3
 8005344:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8005348:	46c2      	mov	sl, r8
 800534a:	4691      	mov	r9, r2
 800534c:	46b3      	mov	fp, r6
 800534e:	9f36      	ldr	r7, [sp, #216]	; 0xd8
 8005350:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005352:	3504      	adds	r5, #4
 8005354:	0139      	lsls	r1, r7, #4
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	9514      	str	r5, [sp, #80]	; 0x50
 800535a:	941a      	str	r4, [sp, #104]	; 0x68
 800535c:	9125      	str	r1, [sp, #148]	; 0x94
 800535e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005360:	9b07      	ldr	r3, [sp, #28]
 8005362:	9f00      	ldr	r7, [sp, #0]
 8005364:	f853 6009 	ldr.w	r6, [r3, r9]
 8005368:	f857 503a 	ldr.w	r5, [r7, sl, lsl #3]
 800536c:	4631      	mov	r1, r6
 800536e:	4628      	mov	r0, r5
 8005370:	f7fb fb10 	bl	8000994 <__addsf3>
 8005374:	4631      	mov	r1, r6
 8005376:	4604      	mov	r4, r0
 8005378:	4628      	mov	r0, r5
 800537a:	f7fb fb09 	bl	8000990 <__aeabi_fsub>
 800537e:	9b07      	ldr	r3, [sp, #28]
 8005380:	9700      	str	r7, [sp, #0]
 8005382:	f853 603a 	ldr.w	r6, [r3, sl, lsl #3]
 8005386:	f857 700b 	ldr.w	r7, [r7, fp]
 800538a:	9005      	str	r0, [sp, #20]
 800538c:	4639      	mov	r1, r7
 800538e:	4630      	mov	r0, r6
 8005390:	f7fb fb00 	bl	8000994 <__addsf3>
 8005394:	4639      	mov	r1, r7
 8005396:	4605      	mov	r5, r0
 8005398:	4630      	mov	r0, r6
 800539a:	f7fb faf9 	bl	8000990 <__aeabi_fsub>
 800539e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80053a0:	9008      	str	r0, [sp, #32]
 80053a2:	f852 603a 	ldr.w	r6, [r2, sl, lsl #3]
 80053a6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80053a8:	4630      	mov	r0, r6
 80053aa:	f852 800b 	ldr.w	r8, [r2, fp]
 80053ae:	4641      	mov	r1, r8
 80053b0:	f7fb faf0 	bl	8000994 <__addsf3>
 80053b4:	4641      	mov	r1, r8
 80053b6:	4607      	mov	r7, r0
 80053b8:	4630      	mov	r0, r6
 80053ba:	f7fb fae9 	bl	8000990 <__aeabi_fsub>
 80053be:	9a00      	ldr	r2, [sp, #0]
 80053c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80053c2:	f852 8009 	ldr.w	r8, [r2, r9]
 80053c6:	f853 300b 	ldr.w	r3, [r3, fp]
 80053ca:	9009      	str	r0, [sp, #36]	; 0x24
 80053cc:	4619      	mov	r1, r3
 80053ce:	4640      	mov	r0, r8
 80053d0:	9302      	str	r3, [sp, #8]
 80053d2:	f7fb fadf 	bl	8000994 <__addsf3>
 80053d6:	9b02      	ldr	r3, [sp, #8]
 80053d8:	4606      	mov	r6, r0
 80053da:	4619      	mov	r1, r3
 80053dc:	4640      	mov	r0, r8
 80053de:	f7fb fad7 	bl	8000990 <__aeabi_fsub>
 80053e2:	4639      	mov	r1, r7
 80053e4:	900a      	str	r0, [sp, #40]	; 0x28
 80053e6:	4620      	mov	r0, r4
 80053e8:	f7fb fad2 	bl	8000990 <__aeabi_fsub>
 80053ec:	4639      	mov	r1, r7
 80053ee:	900b      	str	r0, [sp, #44]	; 0x2c
 80053f0:	4620      	mov	r0, r4
 80053f2:	f7fb facf 	bl	8000994 <__addsf3>
 80053f6:	4631      	mov	r1, r6
 80053f8:	4604      	mov	r4, r0
 80053fa:	4628      	mov	r0, r5
 80053fc:	f7fb fac8 	bl	8000990 <__aeabi_fsub>
 8005400:	4631      	mov	r1, r6
 8005402:	900c      	str	r0, [sp, #48]	; 0x30
 8005404:	4628      	mov	r0, r5
 8005406:	f7fb fac5 	bl	8000994 <__addsf3>
 800540a:	4605      	mov	r5, r0
 800540c:	4601      	mov	r1, r0
 800540e:	4620      	mov	r0, r4
 8005410:	f7fb fac0 	bl	8000994 <__addsf3>
 8005414:	9b00      	ldr	r3, [sp, #0]
 8005416:	4629      	mov	r1, r5
 8005418:	f843 003a 	str.w	r0, [r3, sl, lsl #3]
 800541c:	4620      	mov	r0, r4
 800541e:	f7fb fab7 	bl	8000990 <__aeabi_fsub>
 8005422:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005424:	f841 0009 	str.w	r0, [r1, r9]
 8005428:	9f01      	ldr	r7, [sp, #4]
 800542a:	9906      	ldr	r1, [sp, #24]
 800542c:	f857 403a 	ldr.w	r4, [r7, sl, lsl #3]
 8005430:	f851 6009 	ldr.w	r6, [r1, r9]
 8005434:	4620      	mov	r0, r4
 8005436:	4631      	mov	r1, r6
 8005438:	f7fb faac 	bl	8000994 <__addsf3>
 800543c:	4631      	mov	r1, r6
 800543e:	4605      	mov	r5, r0
 8005440:	4620      	mov	r0, r4
 8005442:	f7fb faa5 	bl	8000990 <__aeabi_fsub>
 8005446:	9906      	ldr	r1, [sp, #24]
 8005448:	f857 600b 	ldr.w	r6, [r7, fp]
 800544c:	f851 403a 	ldr.w	r4, [r1, sl, lsl #3]
 8005450:	9002      	str	r0, [sp, #8]
 8005452:	4631      	mov	r1, r6
 8005454:	4620      	mov	r0, r4
 8005456:	9701      	str	r7, [sp, #4]
 8005458:	f7fb fa9c 	bl	8000994 <__addsf3>
 800545c:	4631      	mov	r1, r6
 800545e:	4680      	mov	r8, r0
 8005460:	4620      	mov	r0, r4
 8005462:	f7fb fa95 	bl	8000990 <__aeabi_fsub>
 8005466:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005468:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800546a:	f854 403a 	ldr.w	r4, [r4, sl, lsl #3]
 800546e:	f856 600b 	ldr.w	r6, [r6, fp]
 8005472:	900d      	str	r0, [sp, #52]	; 0x34
 8005474:	4631      	mov	r1, r6
 8005476:	4620      	mov	r0, r4
 8005478:	f7fb fa8c 	bl	8000994 <__addsf3>
 800547c:	4631      	mov	r1, r6
 800547e:	4607      	mov	r7, r0
 8005480:	4620      	mov	r0, r4
 8005482:	f7fb fa85 	bl	8000990 <__aeabi_fsub>
 8005486:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005488:	9c01      	ldr	r4, [sp, #4]
 800548a:	f851 600b 	ldr.w	r6, [r1, fp]
 800548e:	f854 4009 	ldr.w	r4, [r4, r9]
 8005492:	4631      	mov	r1, r6
 8005494:	9003      	str	r0, [sp, #12]
 8005496:	4620      	mov	r0, r4
 8005498:	f7fb fa7c 	bl	8000994 <__addsf3>
 800549c:	4631      	mov	r1, r6
 800549e:	9004      	str	r0, [sp, #16]
 80054a0:	4620      	mov	r0, r4
 80054a2:	f7fb fa75 	bl	8000990 <__aeabi_fsub>
 80054a6:	4639      	mov	r1, r7
 80054a8:	4606      	mov	r6, r0
 80054aa:	4628      	mov	r0, r5
 80054ac:	f7fb fa70 	bl	8000990 <__aeabi_fsub>
 80054b0:	4639      	mov	r1, r7
 80054b2:	4604      	mov	r4, r0
 80054b4:	4628      	mov	r0, r5
 80054b6:	f7fb fa6d 	bl	8000994 <__addsf3>
 80054ba:	9904      	ldr	r1, [sp, #16]
 80054bc:	4607      	mov	r7, r0
 80054be:	4640      	mov	r0, r8
 80054c0:	f7fb fa66 	bl	8000990 <__aeabi_fsub>
 80054c4:	9904      	ldr	r1, [sp, #16]
 80054c6:	4605      	mov	r5, r0
 80054c8:	4640      	mov	r0, r8
 80054ca:	f7fb fa63 	bl	8000994 <__addsf3>
 80054ce:	4680      	mov	r8, r0
 80054d0:	4601      	mov	r1, r0
 80054d2:	4638      	mov	r0, r7
 80054d4:	f7fb fa5e 	bl	8000994 <__addsf3>
 80054d8:	9b01      	ldr	r3, [sp, #4]
 80054da:	4641      	mov	r1, r8
 80054dc:	f843 003a 	str.w	r0, [r3, sl, lsl #3]
 80054e0:	4638      	mov	r0, r7
 80054e2:	f7fb fa55 	bl	8000990 <__aeabi_fsub>
 80054e6:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80054ea:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80054ec:	4629      	mov	r1, r5
 80054ee:	f847 0009 	str.w	r0, [r7, r9]
 80054f2:	4640      	mov	r0, r8
 80054f4:	f7fb fa4e 	bl	8000994 <__addsf3>
 80054f8:	4629      	mov	r1, r5
 80054fa:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80054fc:	f845 003a 	str.w	r0, [r5, sl, lsl #3]
 8005500:	4640      	mov	r0, r8
 8005502:	f7fb fa45 	bl	8000990 <__aeabi_fsub>
 8005506:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005508:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800550a:	4639      	mov	r1, r7
 800550c:	f845 000b 	str.w	r0, [r5, fp]
 8005510:	4620      	mov	r0, r4
 8005512:	f7fb fa3d 	bl	8000990 <__aeabi_fsub>
 8005516:	4621      	mov	r1, r4
 8005518:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800551a:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
 800551e:	4638      	mov	r0, r7
 8005520:	f7fb fa38 	bl	8000994 <__addsf3>
 8005524:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8005528:	9d08      	ldr	r5, [sp, #32]
 800552a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800552c:	4641      	mov	r1, r8
 800552e:	f844 000b 	str.w	r0, [r4, fp]
 8005532:	4628      	mov	r0, r5
 8005534:	f7fb fa2c 	bl	8000990 <__aeabi_fsub>
 8005538:	4985      	ldr	r1, [pc, #532]	; (8005750 <arm_radix8_butterfly_f32+0x4ac>)
 800553a:	f7fb fb33 	bl	8000ba4 <__aeabi_fmul>
 800553e:	4641      	mov	r1, r8
 8005540:	4604      	mov	r4, r0
 8005542:	4628      	mov	r0, r5
 8005544:	f7fb fa26 	bl	8000994 <__addsf3>
 8005548:	4981      	ldr	r1, [pc, #516]	; (8005750 <arm_radix8_butterfly_f32+0x4ac>)
 800554a:	f7fb fb2b 	bl	8000ba4 <__aeabi_fmul>
 800554e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8005552:	4605      	mov	r5, r0
 8005554:	4631      	mov	r1, r6
 8005556:	4640      	mov	r0, r8
 8005558:	f7fb fa1a 	bl	8000990 <__aeabi_fsub>
 800555c:	497c      	ldr	r1, [pc, #496]	; (8005750 <arm_radix8_butterfly_f32+0x4ac>)
 800555e:	f7fb fb21 	bl	8000ba4 <__aeabi_fmul>
 8005562:	4631      	mov	r1, r6
 8005564:	4607      	mov	r7, r0
 8005566:	4640      	mov	r0, r8
 8005568:	f7fb fa14 	bl	8000994 <__addsf3>
 800556c:	4978      	ldr	r1, [pc, #480]	; (8005750 <arm_radix8_butterfly_f32+0x4ac>)
 800556e:	f7fb fb19 	bl	8000ba4 <__aeabi_fmul>
 8005572:	9e05      	ldr	r6, [sp, #20]
 8005574:	4621      	mov	r1, r4
 8005576:	9004      	str	r0, [sp, #16]
 8005578:	4630      	mov	r0, r6
 800557a:	f7fb fa09 	bl	8000990 <__aeabi_fsub>
 800557e:	4621      	mov	r1, r4
 8005580:	4680      	mov	r8, r0
 8005582:	4630      	mov	r0, r6
 8005584:	f7fb fa06 	bl	8000994 <__addsf3>
 8005588:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800558a:	4629      	mov	r1, r5
 800558c:	9005      	str	r0, [sp, #20]
 800558e:	4630      	mov	r0, r6
 8005590:	f7fb f9fe 	bl	8000990 <__aeabi_fsub>
 8005594:	4629      	mov	r1, r5
 8005596:	4604      	mov	r4, r0
 8005598:	4630      	mov	r0, r6
 800559a:	f7fb f9fb 	bl	8000994 <__addsf3>
 800559e:	4639      	mov	r1, r7
 80055a0:	4606      	mov	r6, r0
 80055a2:	9802      	ldr	r0, [sp, #8]
 80055a4:	f7fb f9f4 	bl	8000990 <__aeabi_fsub>
 80055a8:	4639      	mov	r1, r7
 80055aa:	4605      	mov	r5, r0
 80055ac:	9802      	ldr	r0, [sp, #8]
 80055ae:	f7fb f9f1 	bl	8000994 <__addsf3>
 80055b2:	9904      	ldr	r1, [sp, #16]
 80055b4:	4607      	mov	r7, r0
 80055b6:	9803      	ldr	r0, [sp, #12]
 80055b8:	f7fb f9ea 	bl	8000990 <__aeabi_fsub>
 80055bc:	9904      	ldr	r1, [sp, #16]
 80055be:	9002      	str	r0, [sp, #8]
 80055c0:	9803      	ldr	r0, [sp, #12]
 80055c2:	f7fb f9e7 	bl	8000994 <__addsf3>
 80055c6:	4601      	mov	r1, r0
 80055c8:	9003      	str	r0, [sp, #12]
 80055ca:	9805      	ldr	r0, [sp, #20]
 80055cc:	f7fb f9e2 	bl	8000994 <__addsf3>
 80055d0:	9b03      	ldr	r3, [sp, #12]
 80055d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055d4:	4619      	mov	r1, r3
 80055d6:	f842 003a 	str.w	r0, [r2, sl, lsl #3]
 80055da:	9805      	ldr	r0, [sp, #20]
 80055dc:	f7fb f9d8 	bl	8000990 <__aeabi_fsub>
 80055e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80055e2:	9902      	ldr	r1, [sp, #8]
 80055e4:	f842 000b 	str.w	r0, [r2, fp]
 80055e8:	4640      	mov	r0, r8
 80055ea:	f7fb f9d3 	bl	8000994 <__addsf3>
 80055ee:	9a00      	ldr	r2, [sp, #0]
 80055f0:	9902      	ldr	r1, [sp, #8]
 80055f2:	f842 000b 	str.w	r0, [r2, fp]
 80055f6:	4640      	mov	r0, r8
 80055f8:	f7fb f9ca 	bl	8000990 <__aeabi_fsub>
 80055fc:	9a00      	ldr	r2, [sp, #0]
 80055fe:	4631      	mov	r1, r6
 8005600:	f842 0009 	str.w	r0, [r2, r9]
 8005604:	4638      	mov	r0, r7
 8005606:	f7fb f9c3 	bl	8000990 <__aeabi_fsub>
 800560a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800560c:	4639      	mov	r1, r7
 800560e:	f842 003a 	str.w	r0, [r2, sl, lsl #3]
 8005612:	4630      	mov	r0, r6
 8005614:	f7fb f9be 	bl	8000994 <__addsf3>
 8005618:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800561a:	4621      	mov	r1, r4
 800561c:	f842 000b 	str.w	r0, [r2, fp]
 8005620:	4628      	mov	r0, r5
 8005622:	f7fb f9b5 	bl	8000990 <__aeabi_fsub>
 8005626:	9f01      	ldr	r7, [sp, #4]
 8005628:	4629      	mov	r1, r5
 800562a:	f847 000b 	str.w	r0, [r7, fp]
 800562e:	4620      	mov	r0, r4
 8005630:	f7fb f9b0 	bl	8000994 <__addsf3>
 8005634:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005636:	f847 0009 	str.w	r0, [r7, r9]
 800563a:	449a      	add	sl, r3
 800563c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800563e:	449b      	add	fp, r3
 8005640:	4499      	add	r9, r3
 8005642:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005644:	4553      	cmp	r3, sl
 8005646:	f63f ae8b 	bhi.w	8005360 <arm_radix8_butterfly_f32+0xbc>
 800564a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800564c:	2b07      	cmp	r3, #7
 800564e:	f240 82db 	bls.w	8005c08 <arm_radix8_butterfly_f32+0x964>
 8005652:	2201      	movs	r2, #1
 8005654:	9231      	str	r2, [sp, #196]	; 0xc4
 8005656:	2200      	movs	r2, #0
 8005658:	9921      	ldr	r1, [sp, #132]	; 0x84
 800565a:	015e      	lsls	r6, r3, #5
 800565c:	9233      	str	r2, [sp, #204]	; 0xcc
 800565e:	ebc3 62c3 	rsb	r2, r3, r3, lsl #27
 8005662:	4431      	add	r1, r6
 8005664:	0152      	lsls	r2, r2, #5
 8005666:	1888      	adds	r0, r1, r2
 8005668:	ebc3 7303 	rsb	r3, r3, r3, lsl #28
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	902e      	str	r0, [sp, #184]	; 0xb8
 8005670:	4430      	add	r0, r6
 8005672:	18c5      	adds	r5, r0, r3
 8005674:	902d      	str	r0, [sp, #180]	; 0xb4
 8005676:	18e8      	adds	r0, r5, r3
 8005678:	1984      	adds	r4, r0, r6
 800567a:	4422      	add	r2, r4
 800567c:	912f      	str	r1, [sp, #188]	; 0xbc
 800567e:	1991      	adds	r1, r2, r6
 8005680:	18cf      	adds	r7, r1, r3
 8005682:	9724      	str	r7, [sp, #144]	; 0x90
 8005684:	441f      	add	r7, r3
 8005686:	19be      	adds	r6, r7, r6
 8005688:	9723      	str	r7, [sp, #140]	; 0x8c
 800568a:	18f7      	adds	r7, r6, r3
 800568c:	18fb      	adds	r3, r7, r3
 800568e:	9322      	str	r3, [sp, #136]	; 0x88
 8005690:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005692:	9730      	str	r7, [sp, #192]	; 0xc0
 8005694:	3308      	adds	r3, #8
 8005696:	9332      	str	r3, [sp, #200]	; 0xc8
 8005698:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800569a:	3204      	adds	r2, #4
 800569c:	469c      	mov	ip, r3
 800569e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056a0:	3504      	adds	r5, #4
 80056a2:	449c      	add	ip, r3
 80056a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056a6:	3404      	adds	r4, #4
 80056a8:	3304      	adds	r3, #4
 80056aa:	9327      	str	r3, [sp, #156]	; 0x9c
 80056ac:	463b      	mov	r3, r7
 80056ae:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80056b0:	3304      	adds	r3, #4
 80056b2:	932b      	str	r3, [sp, #172]	; 0xac
 80056b4:	1d33      	adds	r3, r6, #4
 80056b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80056b8:	1d3b      	adds	r3, r7, #4
 80056ba:	9f24      	ldr	r7, [sp, #144]	; 0x90
 80056bc:	3004      	adds	r0, #4
 80056be:	9226      	str	r2, [sp, #152]	; 0x98
 80056c0:	932a      	str	r3, [sp, #168]	; 0xa8
 80056c2:	1d0a      	adds	r2, r1, #4
 80056c4:	1d3b      	adds	r3, r7, #4
 80056c6:	960d      	str	r6, [sp, #52]	; 0x34
 80056c8:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 80056cc:	950c      	str	r5, [sp, #48]	; 0x30
 80056ce:	9428      	str	r4, [sp, #160]	; 0xa0
 80056d0:	9029      	str	r0, [sp, #164]	; 0xa4
 80056d2:	9225      	str	r2, [sp, #148]	; 0x94
 80056d4:	932c      	str	r3, [sp, #176]	; 0xb0
 80056d6:	9f33      	ldr	r7, [sp, #204]	; 0xcc
 80056d8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80056da:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 80056dc:	441f      	add	r7, r3
 80056de:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80056e2:	011d      	lsls	r5, r3, #4
 80056e4:	5972      	ldr	r2, [r6, r5]
 80056e6:	9e35      	ldr	r6, [sp, #212]	; 0xd4
 80056e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80056ea:	5972      	ldr	r2, [r6, r5]
 80056ec:	9e35      	ldr	r6, [sp, #212]	; 0xd4
 80056ee:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 80056f0:	921f      	str	r2, [sp, #124]	; 0x7c
 80056f2:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
 80056f6:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 80056fa:	013c      	lsls	r4, r7, #4
 80056fc:	931d      	str	r3, [sp, #116]	; 0x74
 80056fe:	462b      	mov	r3, r5
 8005700:	e9dd e831 	ldrd	lr, r8, [sp, #196]	; 0xc4
 8005704:	9219      	str	r2, [sp, #100]	; 0x64
 8005706:	592a      	ldr	r2, [r5, r4]
 8005708:	0178      	lsls	r0, r7, #5
 800570a:	9206      	str	r2, [sp, #24]
 800570c:	5932      	ldr	r2, [r6, r4]
 800570e:	eb07 0187 	add.w	r1, r7, r7, lsl #2
 8005712:	921c      	str	r2, [sp, #112]	; 0x70
 8005714:	582a      	ldr	r2, [r5, r0]
 8005716:	46f2      	mov	sl, lr
 8005718:	9207      	str	r2, [sp, #28]
 800571a:	5832      	ldr	r2, [r6, r0]
 800571c:	46c3      	mov	fp, r8
 800571e:	920a      	str	r2, [sp, #40]	; 0x28
 8005720:	f853 2031 	ldr.w	r2, [r3, r1, lsl #3]
 8005724:	ebc7 0cc7 	rsb	ip, r7, r7, lsl #3
 8005728:	921a      	str	r2, [sp, #104]	; 0x68
 800572a:	f856 2031 	ldr.w	r2, [r6, r1, lsl #3]
 800572e:	4619      	mov	r1, r3
 8005730:	921e      	str	r2, [sp, #120]	; 0x78
 8005732:	f853 203c 	ldr.w	r2, [r3, ip, lsl #3]
 8005736:	9733      	str	r7, [sp, #204]	; 0xcc
 8005738:	9208      	str	r2, [sp, #32]
 800573a:	f856 203c 	ldr.w	r2, [r6, ip, lsl #3]
 800573e:	9220      	str	r2, [sp, #128]	; 0x80
 8005740:	f851 3037 	ldr.w	r3, [r1, r7, lsl #3]
 8005744:	9305      	str	r3, [sp, #20]
 8005746:	f856 3037 	ldr.w	r3, [r6, r7, lsl #3]
 800574a:	9309      	str	r3, [sp, #36]	; 0x24
 800574c:	e002      	b.n	8005754 <arm_radix8_butterfly_f32+0x4b0>
 800574e:	bf00      	nop
 8005750:	3f3504f3 	.word	0x3f3504f3
 8005754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005756:	9f00      	ldr	r7, [sp, #0]
 8005758:	f853 603a 	ldr.w	r6, [r3, sl, lsl #3]
 800575c:	f857 503a 	ldr.w	r5, [r7, sl, lsl #3]
 8005760:	4631      	mov	r1, r6
 8005762:	4628      	mov	r0, r5
 8005764:	f7fb f916 	bl	8000994 <__addsf3>
 8005768:	4631      	mov	r1, r6
 800576a:	4604      	mov	r4, r0
 800576c:	4628      	mov	r0, r5
 800576e:	f7fb f90f 	bl	8000990 <__aeabi_fsub>
 8005772:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005774:	f857 600b 	ldr.w	r6, [r7, fp]
 8005778:	9700      	str	r7, [sp, #0]
 800577a:	f852 700b 	ldr.w	r7, [r2, fp]
 800577e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005780:	4639      	mov	r1, r7
 8005782:	4630      	mov	r0, r6
 8005784:	f7fb f906 	bl	8000994 <__addsf3>
 8005788:	4639      	mov	r1, r7
 800578a:	4605      	mov	r5, r0
 800578c:	4630      	mov	r0, r6
 800578e:	f7fb f8ff 	bl	8000990 <__aeabi_fsub>
 8005792:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005794:	9010      	str	r0, [sp, #64]	; 0x40
 8005796:	f852 603a 	ldr.w	r6, [r2, sl, lsl #3]
 800579a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800579c:	4630      	mov	r0, r6
 800579e:	f852 803a 	ldr.w	r8, [r2, sl, lsl #3]
 80057a2:	4641      	mov	r1, r8
 80057a4:	f7fb f8f6 	bl	8000994 <__addsf3>
 80057a8:	4641      	mov	r1, r8
 80057aa:	4607      	mov	r7, r0
 80057ac:	4630      	mov	r0, r6
 80057ae:	f7fb f8ef 	bl	8000990 <__aeabi_fsub>
 80057b2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80057b4:	9011      	str	r0, [sp, #68]	; 0x44
 80057b6:	f852 800b 	ldr.w	r8, [r2, fp]
 80057ba:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80057bc:	4640      	mov	r0, r8
 80057be:	f852 900b 	ldr.w	r9, [r2, fp]
 80057c2:	4649      	mov	r1, r9
 80057c4:	f7fb f8e6 	bl	8000994 <__addsf3>
 80057c8:	4649      	mov	r1, r9
 80057ca:	4606      	mov	r6, r0
 80057cc:	4640      	mov	r0, r8
 80057ce:	f7fb f8df 	bl	8000990 <__aeabi_fsub>
 80057d2:	4639      	mov	r1, r7
 80057d4:	9012      	str	r0, [sp, #72]	; 0x48
 80057d6:	4620      	mov	r0, r4
 80057d8:	f7fb f8da 	bl	8000990 <__aeabi_fsub>
 80057dc:	4639      	mov	r1, r7
 80057de:	4680      	mov	r8, r0
 80057e0:	4620      	mov	r0, r4
 80057e2:	f7fb f8d7 	bl	8000994 <__addsf3>
 80057e6:	4631      	mov	r1, r6
 80057e8:	4604      	mov	r4, r0
 80057ea:	4628      	mov	r0, r5
 80057ec:	f7fb f8d0 	bl	8000990 <__aeabi_fsub>
 80057f0:	4631      	mov	r1, r6
 80057f2:	9013      	str	r0, [sp, #76]	; 0x4c
 80057f4:	4628      	mov	r0, r5
 80057f6:	f7fb f8cd 	bl	8000994 <__addsf3>
 80057fa:	4605      	mov	r5, r0
 80057fc:	4601      	mov	r1, r0
 80057fe:	4620      	mov	r0, r4
 8005800:	f7fb f8c8 	bl	8000994 <__addsf3>
 8005804:	9a00      	ldr	r2, [sp, #0]
 8005806:	4629      	mov	r1, r5
 8005808:	f842 003a 	str.w	r0, [r2, sl, lsl #3]
 800580c:	4620      	mov	r0, r4
 800580e:	f7fb f8bf 	bl	8000990 <__aeabi_fsub>
 8005812:	9f01      	ldr	r7, [sp, #4]
 8005814:	9002      	str	r0, [sp, #8]
 8005816:	f857 403a 	ldr.w	r4, [r7, sl, lsl #3]
 800581a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800581c:	4620      	mov	r0, r4
 800581e:	f853 503a 	ldr.w	r5, [r3, sl, lsl #3]
 8005822:	4629      	mov	r1, r5
 8005824:	f7fb f8b6 	bl	8000994 <__addsf3>
 8005828:	4629      	mov	r1, r5
 800582a:	4606      	mov	r6, r0
 800582c:	4620      	mov	r0, r4
 800582e:	f7fb f8af 	bl	8000990 <__aeabi_fsub>
 8005832:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005834:	f857 500b 	ldr.w	r5, [r7, fp]
 8005838:	9701      	str	r7, [sp, #4]
 800583a:	f851 700b 	ldr.w	r7, [r1, fp]
 800583e:	9003      	str	r0, [sp, #12]
 8005840:	4639      	mov	r1, r7
 8005842:	4628      	mov	r0, r5
 8005844:	f7fb f8a6 	bl	8000994 <__addsf3>
 8005848:	4639      	mov	r1, r7
 800584a:	4604      	mov	r4, r0
 800584c:	4628      	mov	r0, r5
 800584e:	f7fb f89f 	bl	8000990 <__aeabi_fsub>
 8005852:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8005854:	9014      	str	r0, [sp, #80]	; 0x50
 8005856:	f851 503a 	ldr.w	r5, [r1, sl, lsl #3]
 800585a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800585c:	4628      	mov	r0, r5
 800585e:	f851 703a 	ldr.w	r7, [r1, sl, lsl #3]
 8005862:	4639      	mov	r1, r7
 8005864:	f7fb f896 	bl	8000994 <__addsf3>
 8005868:	4639      	mov	r1, r7
 800586a:	4681      	mov	r9, r0
 800586c:	4628      	mov	r0, r5
 800586e:	f7fb f88f 	bl	8000990 <__aeabi_fsub>
 8005872:	9926      	ldr	r1, [sp, #152]	; 0x98
 8005874:	9004      	str	r0, [sp, #16]
 8005876:	f851 500b 	ldr.w	r5, [r1, fp]
 800587a:	9925      	ldr	r1, [sp, #148]	; 0x94
 800587c:	4628      	mov	r0, r5
 800587e:	f851 300b 	ldr.w	r3, [r1, fp]
 8005882:	4619      	mov	r1, r3
 8005884:	9315      	str	r3, [sp, #84]	; 0x54
 8005886:	f7fb f885 	bl	8000994 <__addsf3>
 800588a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800588c:	4607      	mov	r7, r0
 800588e:	4619      	mov	r1, r3
 8005890:	4628      	mov	r0, r5
 8005892:	f7fb f87d 	bl	8000990 <__aeabi_fsub>
 8005896:	4649      	mov	r1, r9
 8005898:	9015      	str	r0, [sp, #84]	; 0x54
 800589a:	4630      	mov	r0, r6
 800589c:	f7fb f878 	bl	8000990 <__aeabi_fsub>
 80058a0:	4649      	mov	r1, r9
 80058a2:	4605      	mov	r5, r0
 80058a4:	4630      	mov	r0, r6
 80058a6:	f7fb f875 	bl	8000994 <__addsf3>
 80058aa:	4639      	mov	r1, r7
 80058ac:	4606      	mov	r6, r0
 80058ae:	4620      	mov	r0, r4
 80058b0:	f7fb f86e 	bl	8000990 <__aeabi_fsub>
 80058b4:	4639      	mov	r1, r7
 80058b6:	4681      	mov	r9, r0
 80058b8:	4620      	mov	r0, r4
 80058ba:	f7fb f86b 	bl	8000994 <__addsf3>
 80058be:	4649      	mov	r1, r9
 80058c0:	4607      	mov	r7, r0
 80058c2:	4640      	mov	r0, r8
 80058c4:	f7fb f866 	bl	8000994 <__addsf3>
 80058c8:	4649      	mov	r1, r9
 80058ca:	4604      	mov	r4, r0
 80058cc:	4640      	mov	r0, r8
 80058ce:	f7fb f85f 	bl	8000990 <__aeabi_fsub>
 80058d2:	4639      	mov	r1, r7
 80058d4:	4680      	mov	r8, r0
 80058d6:	4630      	mov	r0, r6
 80058d8:	f7fb f85c 	bl	8000994 <__addsf3>
 80058dc:	9b01      	ldr	r3, [sp, #4]
 80058de:	4639      	mov	r1, r7
 80058e0:	f843 003a 	str.w	r0, [r3, sl, lsl #3]
 80058e4:	4630      	mov	r0, r6
 80058e6:	f7fb f853 	bl	8000990 <__aeabi_fsub>
 80058ea:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 80058ee:	4607      	mov	r7, r0
 80058f0:	4649      	mov	r1, r9
 80058f2:	4628      	mov	r0, r5
 80058f4:	f7fb f84c 	bl	8000990 <__aeabi_fsub>
 80058f8:	4629      	mov	r1, r5
 80058fa:	4606      	mov	r6, r0
 80058fc:	4648      	mov	r0, r9
 80058fe:	f7fb f849 	bl	8000994 <__addsf3>
 8005902:	9902      	ldr	r1, [sp, #8]
 8005904:	4605      	mov	r5, r0
 8005906:	9807      	ldr	r0, [sp, #28]
 8005908:	f7fb f94c 	bl	8000ba4 <__aeabi_fmul>
 800590c:	4639      	mov	r1, r7
 800590e:	4681      	mov	r9, r0
 8005910:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005912:	f7fb f947 	bl	8000ba4 <__aeabi_fmul>
 8005916:	4601      	mov	r1, r0
 8005918:	4648      	mov	r0, r9
 800591a:	f7fb f83b 	bl	8000994 <__addsf3>
 800591e:	4639      	mov	r1, r7
 8005920:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8005922:	f847 003a 	str.w	r0, [r7, sl, lsl #3]
 8005926:	9807      	ldr	r0, [sp, #28]
 8005928:	f7fb f93c 	bl	8000ba4 <__aeabi_fmul>
 800592c:	9902      	ldr	r1, [sp, #8]
 800592e:	4607      	mov	r7, r0
 8005930:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005932:	f7fb f937 	bl	8000ba4 <__aeabi_fmul>
 8005936:	4601      	mov	r1, r0
 8005938:	4638      	mov	r0, r7
 800593a:	f7fb f829 	bl	8000990 <__aeabi_fsub>
 800593e:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8005940:	4621      	mov	r1, r4
 8005942:	f847 003a 	str.w	r0, [r7, sl, lsl #3]
 8005946:	9806      	ldr	r0, [sp, #24]
 8005948:	f7fb f92c 	bl	8000ba4 <__aeabi_fmul>
 800594c:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 8005950:	4607      	mov	r7, r0
 8005952:	4631      	mov	r1, r6
 8005954:	4648      	mov	r0, r9
 8005956:	f7fb f925 	bl	8000ba4 <__aeabi_fmul>
 800595a:	4601      	mov	r1, r0
 800595c:	4638      	mov	r0, r7
 800595e:	f7fb f819 	bl	8000994 <__addsf3>
 8005962:	4631      	mov	r1, r6
 8005964:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8005966:	f846 003a 	str.w	r0, [r6, sl, lsl #3]
 800596a:	9806      	ldr	r0, [sp, #24]
 800596c:	f7fb f91a 	bl	8000ba4 <__aeabi_fmul>
 8005970:	4621      	mov	r1, r4
 8005972:	4606      	mov	r6, r0
 8005974:	4648      	mov	r0, r9
 8005976:	f7fb f915 	bl	8000ba4 <__aeabi_fmul>
 800597a:	4601      	mov	r1, r0
 800597c:	4630      	mov	r0, r6
 800597e:	f7fb f807 	bl	8000990 <__aeabi_fsub>
 8005982:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005984:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8005986:	4641      	mov	r1, r8
 8005988:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
 800598c:	4630      	mov	r0, r6
 800598e:	f7fb f909 	bl	8000ba4 <__aeabi_fmul>
 8005992:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 8005996:	4604      	mov	r4, r0
 8005998:	4629      	mov	r1, r5
 800599a:	4648      	mov	r0, r9
 800599c:	f7fb f902 	bl	8000ba4 <__aeabi_fmul>
 80059a0:	4601      	mov	r1, r0
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7fa fff6 	bl	8000994 <__addsf3>
 80059a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80059aa:	4629      	mov	r1, r5
 80059ac:	f844 003a 	str.w	r0, [r4, sl, lsl #3]
 80059b0:	4630      	mov	r0, r6
 80059b2:	f7fb f8f7 	bl	8000ba4 <__aeabi_fmul>
 80059b6:	4641      	mov	r1, r8
 80059b8:	4604      	mov	r4, r0
 80059ba:	4648      	mov	r0, r9
 80059bc:	f7fb f8f2 	bl	8000ba4 <__aeabi_fmul>
 80059c0:	4601      	mov	r1, r0
 80059c2:	4620      	mov	r0, r4
 80059c4:	f7fa ffe4 	bl	8000990 <__aeabi_fsub>
 80059c8:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80059ca:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80059ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80059d0:	4639      	mov	r1, r7
 80059d2:	f845 003a 	str.w	r0, [r5, sl, lsl #3]
 80059d6:	4648      	mov	r0, r9
 80059d8:	f7fa ffda 	bl	8000990 <__aeabi_fsub>
 80059dc:	498c      	ldr	r1, [pc, #560]	; (8005c10 <arm_radix8_butterfly_f32+0x96c>)
 80059de:	f7fb f8e1 	bl	8000ba4 <__aeabi_fmul>
 80059e2:	4639      	mov	r1, r7
 80059e4:	4604      	mov	r4, r0
 80059e6:	4648      	mov	r0, r9
 80059e8:	f7fa ffd4 	bl	8000994 <__addsf3>
 80059ec:	4988      	ldr	r1, [pc, #544]	; (8005c10 <arm_radix8_butterfly_f32+0x96c>)
 80059ee:	f7fb f8d9 	bl	8000ba4 <__aeabi_fmul>
 80059f2:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 80059f6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80059f8:	4607      	mov	r7, r0
 80059fa:	4641      	mov	r1, r8
 80059fc:	4630      	mov	r0, r6
 80059fe:	f7fa ffc7 	bl	8000990 <__aeabi_fsub>
 8005a02:	4983      	ldr	r1, [pc, #524]	; (8005c10 <arm_radix8_butterfly_f32+0x96c>)
 8005a04:	f7fb f8ce 	bl	8000ba4 <__aeabi_fmul>
 8005a08:	4641      	mov	r1, r8
 8005a0a:	4681      	mov	r9, r0
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	f7fa ffc1 	bl	8000994 <__addsf3>
 8005a12:	497f      	ldr	r1, [pc, #508]	; (8005c10 <arm_radix8_butterfly_f32+0x96c>)
 8005a14:	f7fb f8c6 	bl	8000ba4 <__aeabi_fmul>
 8005a18:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f7fa ffb6 	bl	8000990 <__aeabi_fsub>
 8005a24:	4621      	mov	r1, r4
 8005a26:	9002      	str	r0, [sp, #8]
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f7fa ffb3 	bl	8000994 <__addsf3>
 8005a2e:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8005a32:	4604      	mov	r4, r0
 8005a34:	4639      	mov	r1, r7
 8005a36:	4640      	mov	r0, r8
 8005a38:	f7fa ffaa 	bl	8000990 <__aeabi_fsub>
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	4606      	mov	r6, r0
 8005a40:	4640      	mov	r0, r8
 8005a42:	f7fa ffa7 	bl	8000994 <__addsf3>
 8005a46:	4649      	mov	r1, r9
 8005a48:	4680      	mov	r8, r0
 8005a4a:	9803      	ldr	r0, [sp, #12]
 8005a4c:	f7fa ffa0 	bl	8000990 <__aeabi_fsub>
 8005a50:	4649      	mov	r1, r9
 8005a52:	4607      	mov	r7, r0
 8005a54:	9803      	ldr	r0, [sp, #12]
 8005a56:	f7fa ff9d 	bl	8000994 <__addsf3>
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	4681      	mov	r9, r0
 8005a5e:	9804      	ldr	r0, [sp, #16]
 8005a60:	f7fa ff96 	bl	8000990 <__aeabi_fsub>
 8005a64:	4629      	mov	r1, r5
 8005a66:	9003      	str	r0, [sp, #12]
 8005a68:	9804      	ldr	r0, [sp, #16]
 8005a6a:	f7fa ff93 	bl	8000994 <__addsf3>
 8005a6e:	4601      	mov	r1, r0
 8005a70:	9004      	str	r0, [sp, #16]
 8005a72:	4620      	mov	r0, r4
 8005a74:	f7fa ff8e 	bl	8000994 <__addsf3>
 8005a78:	9b04      	ldr	r3, [sp, #16]
 8005a7a:	4605      	mov	r5, r0
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f7fa ff86 	bl	8000990 <__aeabi_fsub>
 8005a84:	9903      	ldr	r1, [sp, #12]
 8005a86:	4604      	mov	r4, r0
 8005a88:	9802      	ldr	r0, [sp, #8]
 8005a8a:	f7fa ff83 	bl	8000994 <__addsf3>
 8005a8e:	9903      	ldr	r1, [sp, #12]
 8005a90:	9004      	str	r0, [sp, #16]
 8005a92:	9802      	ldr	r0, [sp, #8]
 8005a94:	f7fa ff7c 	bl	8000990 <__aeabi_fsub>
 8005a98:	4641      	mov	r1, r8
 8005a9a:	9003      	str	r0, [sp, #12]
 8005a9c:	4648      	mov	r0, r9
 8005a9e:	f7fa ff77 	bl	8000990 <__aeabi_fsub>
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	9002      	str	r0, [sp, #8]
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	f7fa ff74 	bl	8000994 <__addsf3>
 8005aac:	4631      	mov	r1, r6
 8005aae:	4681      	mov	r9, r0
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	f7fa ff6d 	bl	8000990 <__aeabi_fsub>
 8005ab6:	4639      	mov	r1, r7
 8005ab8:	4680      	mov	r8, r0
 8005aba:	4630      	mov	r0, r6
 8005abc:	f7fa ff6a 	bl	8000994 <__addsf3>
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	9805      	ldr	r0, [sp, #20]
 8005ac6:	f7fb f86d 	bl	8000ba4 <__aeabi_fmul>
 8005aca:	9902      	ldr	r1, [sp, #8]
 8005acc:	4607      	mov	r7, r0
 8005ace:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ad0:	f7fb f868 	bl	8000ba4 <__aeabi_fmul>
 8005ad4:	4601      	mov	r1, r0
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	f7fa ff5c 	bl	8000994 <__addsf3>
 8005adc:	9a00      	ldr	r2, [sp, #0]
 8005ade:	9902      	ldr	r1, [sp, #8]
 8005ae0:	f842 000b 	str.w	r0, [r2, fp]
 8005ae4:	9805      	ldr	r0, [sp, #20]
 8005ae6:	f7fb f85d 	bl	8000ba4 <__aeabi_fmul>
 8005aea:	4629      	mov	r1, r5
 8005aec:	4607      	mov	r7, r0
 8005aee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005af0:	f7fb f858 	bl	8000ba4 <__aeabi_fmul>
 8005af4:	4601      	mov	r1, r0
 8005af6:	4638      	mov	r0, r7
 8005af8:	f7fa ff4a 	bl	8000990 <__aeabi_fsub>
 8005afc:	9b01      	ldr	r3, [sp, #4]
 8005afe:	4621      	mov	r1, r4
 8005b00:	f843 000b 	str.w	r0, [r3, fp]
 8005b04:	9808      	ldr	r0, [sp, #32]
 8005b06:	f7fb f84d 	bl	8000ba4 <__aeabi_fmul>
 8005b0a:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	4649      	mov	r1, r9
 8005b10:	4638      	mov	r0, r7
 8005b12:	f7fb f847 	bl	8000ba4 <__aeabi_fmul>
 8005b16:	4601      	mov	r1, r0
 8005b18:	4628      	mov	r0, r5
 8005b1a:	f7fa ff3b 	bl	8000994 <__addsf3>
 8005b1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b20:	4649      	mov	r1, r9
 8005b22:	f843 000b 	str.w	r0, [r3, fp]
 8005b26:	9808      	ldr	r0, [sp, #32]
 8005b28:	f7fb f83c 	bl	8000ba4 <__aeabi_fmul>
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	4605      	mov	r5, r0
 8005b30:	4638      	mov	r0, r7
 8005b32:	f7fb f837 	bl	8000ba4 <__aeabi_fmul>
 8005b36:	4601      	mov	r1, r0
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f7fa ff29 	bl	8000990 <__aeabi_fsub>
 8005b3e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005b40:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8005b44:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005b46:	4649      	mov	r1, r9
 8005b48:	f845 000b 	str.w	r0, [r5, fp]
 8005b4c:	4638      	mov	r0, r7
 8005b4e:	f7fb f829 	bl	8000ba4 <__aeabi_fmul>
 8005b52:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8005b54:	4604      	mov	r4, r0
 8005b56:	4641      	mov	r1, r8
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f7fb f823 	bl	8000ba4 <__aeabi_fmul>
 8005b5e:	4601      	mov	r1, r0
 8005b60:	4620      	mov	r0, r4
 8005b62:	f7fa ff17 	bl	8000994 <__addsf3>
 8005b66:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8005b68:	4641      	mov	r1, r8
 8005b6a:	f843 000b 	str.w	r0, [r3, fp]
 8005b6e:	4638      	mov	r0, r7
 8005b70:	f7fb f818 	bl	8000ba4 <__aeabi_fmul>
 8005b74:	4649      	mov	r1, r9
 8005b76:	4604      	mov	r4, r0
 8005b78:	4628      	mov	r0, r5
 8005b7a:	f7fb f813 	bl	8000ba4 <__aeabi_fmul>
 8005b7e:	4601      	mov	r1, r0
 8005b80:	4620      	mov	r0, r4
 8005b82:	f7fa ff05 	bl	8000990 <__aeabi_fsub>
 8005b86:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8005b88:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005b8c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8005b8e:	f843 000b 	str.w	r0, [r3, fp]
 8005b92:	4641      	mov	r1, r8
 8005b94:	4638      	mov	r0, r7
 8005b96:	f7fb f805 	bl	8000ba4 <__aeabi_fmul>
 8005b9a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f7fa ffff 	bl	8000ba4 <__aeabi_fmul>
 8005ba6:	4601      	mov	r1, r0
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f7fa fef3 	bl	8000994 <__addsf3>
 8005bae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	f843 000b 	str.w	r0, [r3, fp]
 8005bb6:	4638      	mov	r0, r7
 8005bb8:	f7fa fff4 	bl	8000ba4 <__aeabi_fmul>
 8005bbc:	4641      	mov	r1, r8
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f7fa ffef 	bl	8000ba4 <__aeabi_fmul>
 8005bc6:	4601      	mov	r1, r0
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f7fa fee1 	bl	8000990 <__aeabi_fsub>
 8005bce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005bd0:	449a      	add	sl, r3
 8005bd2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005bd4:	f843 000b 	str.w	r0, [r3, fp]
 8005bd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bda:	449b      	add	fp, r3
 8005bdc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005bde:	4553      	cmp	r3, sl
 8005be0:	f63f adb8 	bhi.w	8005754 <arm_radix8_butterfly_f32+0x4b0>
 8005be4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8005be6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8005be8:	3208      	adds	r2, #8
 8005bea:	9232      	str	r2, [sp, #200]	; 0xc8
 8005bec:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8005bee:	3301      	adds	r3, #1
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	9331      	str	r3, [sp, #196]	; 0xc4
 8005bf4:	f47f ad6f 	bne.w	80056d6 <arm_radix8_butterfly_f32+0x432>
 8005bf8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8005bfa:	9216      	str	r2, [sp, #88]	; 0x58
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	9337      	str	r3, [sp, #220]	; 0xdc
 8005c02:	4613      	mov	r3, r2
 8005c04:	f7ff bb5d 	b.w	80052c2 <arm_radix8_butterfly_f32+0x1e>
 8005c08:	b039      	add	sp, #228	; 0xe4
 8005c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c0e:	bf00      	nop
 8005c10:	3f3504f3 	.word	0x3f3504f3

08005c14 <__errno>:
 8005c14:	4b01      	ldr	r3, [pc, #4]	; (8005c1c <__errno+0x8>)
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	2000000c 	.word	0x2000000c

08005c20 <__libc_init_array>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	2500      	movs	r5, #0
 8005c24:	4e0c      	ldr	r6, [pc, #48]	; (8005c58 <__libc_init_array+0x38>)
 8005c26:	4c0d      	ldr	r4, [pc, #52]	; (8005c5c <__libc_init_array+0x3c>)
 8005c28:	1ba4      	subs	r4, r4, r6
 8005c2a:	10a4      	asrs	r4, r4, #2
 8005c2c:	42a5      	cmp	r5, r4
 8005c2e:	d109      	bne.n	8005c44 <__libc_init_array+0x24>
 8005c30:	f000 f8c2 	bl	8005db8 <_init>
 8005c34:	2500      	movs	r5, #0
 8005c36:	4e0a      	ldr	r6, [pc, #40]	; (8005c60 <__libc_init_array+0x40>)
 8005c38:	4c0a      	ldr	r4, [pc, #40]	; (8005c64 <__libc_init_array+0x44>)
 8005c3a:	1ba4      	subs	r4, r4, r6
 8005c3c:	10a4      	asrs	r4, r4, #2
 8005c3e:	42a5      	cmp	r5, r4
 8005c40:	d105      	bne.n	8005c4e <__libc_init_array+0x2e>
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c48:	4798      	blx	r3
 8005c4a:	3501      	adds	r5, #1
 8005c4c:	e7ee      	b.n	8005c2c <__libc_init_array+0xc>
 8005c4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c52:	4798      	blx	r3
 8005c54:	3501      	adds	r5, #1
 8005c56:	e7f2      	b.n	8005c3e <__libc_init_array+0x1e>
 8005c58:	08018dec 	.word	0x08018dec
 8005c5c:	08018dec 	.word	0x08018dec
 8005c60:	08018dec 	.word	0x08018dec
 8005c64:	08018df0 	.word	0x08018df0

08005c68 <memset>:
 8005c68:	4603      	mov	r3, r0
 8005c6a:	4402      	add	r2, r0
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d100      	bne.n	8005c72 <memset+0xa>
 8005c70:	4770      	bx	lr
 8005c72:	f803 1b01 	strb.w	r1, [r3], #1
 8005c76:	e7f9      	b.n	8005c6c <memset+0x4>

08005c78 <sqrtf>:
 8005c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c7a:	b08b      	sub	sp, #44	; 0x2c
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	f000 f845 	bl	8005d0c <__ieee754_sqrtf>
 8005c82:	4b20      	ldr	r3, [pc, #128]	; (8005d04 <sqrtf+0x8c>)
 8005c84:	4606      	mov	r6, r0
 8005c86:	f993 5000 	ldrsb.w	r5, [r3]
 8005c8a:	1c6b      	adds	r3, r5, #1
 8005c8c:	d02a      	beq.n	8005ce4 <sqrtf+0x6c>
 8005c8e:	4621      	mov	r1, r4
 8005c90:	4620      	mov	r0, r4
 8005c92:	f7fb f94d 	bl	8000f30 <__aeabi_fcmpun>
 8005c96:	4607      	mov	r7, r0
 8005c98:	bb20      	cbnz	r0, 8005ce4 <sqrtf+0x6c>
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	f7fb f91f 	bl	8000ee0 <__aeabi_fcmplt>
 8005ca2:	b1f8      	cbz	r0, 8005ce4 <sqrtf+0x6c>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	4b17      	ldr	r3, [pc, #92]	; (8005d08 <sqrtf+0x90>)
 8005caa:	4620      	mov	r0, r4
 8005cac:	9301      	str	r3, [sp, #4]
 8005cae:	9708      	str	r7, [sp, #32]
 8005cb0:	f7fa fbb0 	bl	8000414 <__aeabi_f2d>
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	b99d      	cbnz	r5, 8005cea <sqrtf+0x72>
 8005cc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005cc6:	4668      	mov	r0, sp
 8005cc8:	f000 f873 	bl	8005db2 <matherr>
 8005ccc:	b1a8      	cbz	r0, 8005cfa <sqrtf+0x82>
 8005cce:	9b08      	ldr	r3, [sp, #32]
 8005cd0:	b11b      	cbz	r3, 8005cda <sqrtf+0x62>
 8005cd2:	f7ff ff9f 	bl	8005c14 <__errno>
 8005cd6:	9b08      	ldr	r3, [sp, #32]
 8005cd8:	6003      	str	r3, [r0, #0]
 8005cda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cde:	f7fa fe03 	bl	80008e8 <__aeabi_d2f>
 8005ce2:	4606      	mov	r6, r0
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	b00b      	add	sp, #44	; 0x2c
 8005ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cea:	4610      	mov	r0, r2
 8005cec:	4619      	mov	r1, r3
 8005cee:	f7fa fd13 	bl	8000718 <__aeabi_ddiv>
 8005cf2:	2d02      	cmp	r5, #2
 8005cf4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005cf8:	d1e5      	bne.n	8005cc6 <sqrtf+0x4e>
 8005cfa:	f7ff ff8b 	bl	8005c14 <__errno>
 8005cfe:	2321      	movs	r3, #33	; 0x21
 8005d00:	6003      	str	r3, [r0, #0]
 8005d02:	e7e4      	b.n	8005cce <sqrtf+0x56>
 8005d04:	20000070 	.word	0x20000070
 8005d08:	08018de4 	.word	0x08018de4

08005d0c <__ieee754_sqrtf>:
 8005d0c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8005d10:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005d14:	b570      	push	{r4, r5, r6, lr}
 8005d16:	4603      	mov	r3, r0
 8005d18:	4604      	mov	r4, r0
 8005d1a:	d309      	bcc.n	8005d30 <__ieee754_sqrtf+0x24>
 8005d1c:	4601      	mov	r1, r0
 8005d1e:	f7fa ff41 	bl	8000ba4 <__aeabi_fmul>
 8005d22:	4601      	mov	r1, r0
 8005d24:	4620      	mov	r0, r4
 8005d26:	f7fa fe35 	bl	8000994 <__addsf3>
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	bd70      	pop	{r4, r5, r6, pc}
 8005d30:	2a00      	cmp	r2, #0
 8005d32:	d0fb      	beq.n	8005d2c <__ieee754_sqrtf+0x20>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	da06      	bge.n	8005d46 <__ieee754_sqrtf+0x3a>
 8005d38:	4601      	mov	r1, r0
 8005d3a:	f7fa fe29 	bl	8000990 <__aeabi_fsub>
 8005d3e:	4601      	mov	r1, r0
 8005d40:	f7fa ffe4 	bl	8000d0c <__aeabi_fdiv>
 8005d44:	e7f1      	b.n	8005d2a <__ieee754_sqrtf+0x1e>
 8005d46:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8005d4a:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8005d4e:	d32e      	bcc.n	8005dae <__ieee754_sqrtf+0xa2>
 8005d50:	3c7f      	subs	r4, #127	; 0x7f
 8005d52:	07e2      	lsls	r2, r4, #31
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	ea4f 0164 	mov.w	r1, r4, asr #1
 8005d5c:	4616      	mov	r6, r2
 8005d5e:	f04f 0419 	mov.w	r4, #25
 8005d62:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8005d66:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005d6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d6e:	bf48      	it	mi
 8005d70:	005b      	lslmi	r3, r3, #1
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	1835      	adds	r5, r6, r0
 8005d76:	429d      	cmp	r5, r3
 8005d78:	bfde      	ittt	le
 8005d7a:	182e      	addle	r6, r5, r0
 8005d7c:	1b5b      	suble	r3, r3, r5
 8005d7e:	1812      	addle	r2, r2, r0
 8005d80:	3c01      	subs	r4, #1
 8005d82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005d86:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8005d8a:	d1f3      	bne.n	8005d74 <__ieee754_sqrtf+0x68>
 8005d8c:	b113      	cbz	r3, 8005d94 <__ieee754_sqrtf+0x88>
 8005d8e:	3201      	adds	r2, #1
 8005d90:	f022 0201 	bic.w	r2, r2, #1
 8005d94:	1054      	asrs	r4, r2, #1
 8005d96:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8005d9a:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8005d9e:	e7c5      	b.n	8005d2c <__ieee754_sqrtf+0x20>
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	3201      	adds	r2, #1
 8005da4:	0219      	lsls	r1, r3, #8
 8005da6:	d5fb      	bpl.n	8005da0 <__ieee754_sqrtf+0x94>
 8005da8:	3a01      	subs	r2, #1
 8005daa:	1aa4      	subs	r4, r4, r2
 8005dac:	e7d0      	b.n	8005d50 <__ieee754_sqrtf+0x44>
 8005dae:	2200      	movs	r2, #0
 8005db0:	e7f8      	b.n	8005da4 <__ieee754_sqrtf+0x98>

08005db2 <matherr>:
 8005db2:	2000      	movs	r0, #0
 8005db4:	4770      	bx	lr
	...

08005db8 <_init>:
 8005db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dba:	bf00      	nop
 8005dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dbe:	bc08      	pop	{r3}
 8005dc0:	469e      	mov	lr, r3
 8005dc2:	4770      	bx	lr

08005dc4 <_fini>:
 8005dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc6:	bf00      	nop
 8005dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dca:	bc08      	pop	{r3}
 8005dcc:	469e      	mov	lr, r3
 8005dce:	4770      	bx	lr
